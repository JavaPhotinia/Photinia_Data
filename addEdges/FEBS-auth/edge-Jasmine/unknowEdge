<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.web.servlet.support.ErrorPageFilterConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.server.adapter.ForwardedHeaderTransformer: void <clinit>()>-><java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.SocketImpl: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: org.springframework.security.oauth2.common.OAuth2AccessToken getAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.scheduler.DelegateServiceScheduler: java.lang.String toString()>
<org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler: void <init>(org.springframework.http.HttpStatus)>-><java.lang.Object: void <init>()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.Maps$Values: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: org.codehaus.jackson.type.JavaType typeFromId(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeObjectFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.base.Joiner$3: int size()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.type.MapType: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyStatement: int getUpdateCount()>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.LocalTime: java.lang.String toString()>
<com.google.common.base.Ticker$1: void <init>()>-><com.google.common.base.Ticker: void <init>()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><java.lang.reflect.Field: void setInt(java.lang.Object,int)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void init()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.apache.catalina.util.ContextName: java.lang.String getDisplayName()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>-><java.util.ArrayList: boolean remove(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.DigitList: java.lang.String toString()>
<com.google.common.cache.LocalCache$AbstractReferenceEntry: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Thread: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Boolean: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration$WebFluxConfig: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties,org.springframework.beans.factory.ListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.time.Duration: int compareTo(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.HashMap$EntrySet: boolean remove(java.lang.Object)>
<com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.font.EAttribute: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>-><org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.Resource[])>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><java.nio.CharBuffer: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.lang.Integer: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress,int,java.lang.String)>-><org.apache.http.util.Args: java.lang.Object notNull(java.lang.Object,java.lang.String)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache: java.util.Queue discardingQueue()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArraySet: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<com.p6spy.engine.spy.P6ModuleManager: void <init>()>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.springframework.web.servlet.function.RequestPredicates$HeadersPredicate: void <init>(java.util.function.Predicate)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object,java.lang.Object,int,int[])>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties)>-><org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties: void <init>()>
<org.springframework.aop.framework.AdvisedSupport: void copyConfigurationFrom(org.springframework.aop.framework.AdvisedSupport,org.springframework.aop.TargetSource,java.util.List)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.catalina.util.ContextName: java.lang.String getDisplayName()>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.Duration: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.security.x509.RDN: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.exceptions.OAuth2Exception: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Vector$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.ArrayList: boolean remove(java.lang.Object)>
<sun.awt.DebugSettings: void loadSystemProperties()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedHeader(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.http.ResponseEntity: java.lang.String toString()>
<org.springframework.web.cors.CorsConfiguration: void <clinit>()>-><java.lang.Enum: java.lang.String name()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void lambda$entryConsumer$0(java.util.function.Consumer,java.util.Map$Entry)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.core.io.Resource getIndexHtml(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.util.TypeVariableTypeInformation: java.lang.String toString()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.image.ComponentColorModel: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration: void <init>()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedValues: void forEach(java.util.function.Consumer)>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.LongNode: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.codehaus.jackson.map.type.ClassKey: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$AndPredicate: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.oauth2.provider.approval.Approval: java.lang.String toString()>
<java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.jdbc.core.RowMapperResultSetExtractor: java.util.List extractData(java.sql.ResultSet)>-><com.zaxxer.hikari.pool.HikariProxyResultSet: boolean next()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.SubList$1: boolean hasNext()>
<org.springframework.beans.factory.config.DependencyDescriptor: void <init>(java.lang.reflect.Field,boolean)>-><org.springframework.beans.factory.config.DependencyDescriptor: void <init>(java.lang.reflect.Field,boolean,boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.p6spy.engine.logging.Category: java.lang.String toString()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><java.time.Instant: java.time.Instant now()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.bouncycastle.asn1.ASN1Primitive: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserializeUsingCustom(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection,com.fasterxml.jackson.databind.JsonDeserializer)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getDeclaredSerialFields(java.lang.Class)>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: boolean isVisible(java.lang.reflect.Member)>-><java.lang.reflect.Field: int getModifiers()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>
<org.springframework.boot.web.embedded.tomcat.TldSkipPatterns: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.Vector: int size()>
<sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.ser.BeanSerializer: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerSecurityConfiguration: void <init>()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void unregisterComponent(javax.management.ObjectName)>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object,java.lang.Throwable)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.xml.bind.JAXBException: java.lang.String toString()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfiguration$RemoteTokenServicesConfiguration$UserInfoTokenServicesConfiguration: void <init>(org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties,org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoRestTemplateFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERUniversalString: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLogger: void debug(java.lang.String)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.serializer.SerialContext: java.lang.String toString()>
<com.google.common.collect.Maps$2: java.lang.Object transform(java.util.Map$Entry)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundryActuatorAutoConfiguration$IgnoredPathsSecurityConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.ArrayList: void <init>(int)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><io.netty.buffer.SwappedByteBuf: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.JSONSerializer: void writeWithFormat(java.lang.Object,java.lang.String)>-><com.google.common.base.Joiner$3: int size()>
<org.codehaus.jackson.map.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setNull(java.sql.PreparedStatement,int,int,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyDatabaseMetaData: java.lang.String getDatabaseProductName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicLongArray: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.misc.Unsafe: void putIntVolatile(java.lang.Object,long,int)>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractMap: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<java.util.Collections$SetFromMap: java.util.Spliterator spliterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Spliterator spliterator()>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.scheduling.config.ScheduledTask: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer getConfigurer(java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getDeclaredSerialFields(java.lang.Class)>-><java.lang.reflect.Field: java.lang.Class getType()>
<org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator: void doWith(java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCallableOnAssembly: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$HikariDataSourceMetricsConfiguration: void <init>(io.micrometer.core.instrument.MeterRegistry)>
<org.thymeleaf.spring5.util.SpringVersionUtils: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <init>(java.lang.String[])>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.common.ExpressionUtils: java.lang.Object convertTypedValue(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: java.lang.String toString()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<net.logstash.logback.encoder.com.lmax.disruptor.Sequence: void <init>(long)>-><sun.misc.Unsafe: void putOrderedLong(java.lang.Object,long,long)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.Period: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.FluxCallableOnAssembly: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.ObjectNode: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <clinit>()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.IdentityHashMap: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.MiscCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTime(int,java.sql.Time)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTime(int,java.sql.Time)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>
<com.baomidou.dynamic.datasource.spring.boot.autoconfigure.hikari.HikariCpConfig: void <clinit>()>-><java.util.concurrent.TimeUnit$4: long toMillis(long)>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.IntNode: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><com.p6spy.engine.common.CustomHashedHashSet: boolean add(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.net.URL: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.FieldPosition: java.lang.String toString()>
<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<me.zhyd.oauth.request.AuthDefaultRequest: me.zhyd.oauth.model.AuthResponse responseError(java.lang.Exception)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: int size()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents$1: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.ClockSource$Factory: com.zaxxer.hikari.util.ClockSource create()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.awt.AppContext: java.lang.String toString()>
<org.springframework.security.oauth2.provider.BaseRequest: void setScope(java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.util.HashMap: void <init>()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore$TokenExpiry: int compareTo(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Properties: void load(java.io.InputStream)>
<com.google.common.base.Ticker: void <clinit>()>-><com.google.common.base.Ticker$1: void <init>()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.List getUrlMappings()>
<org.aspectj.bridge.MessageWriter: void <init>(java.io.PrintWriter,boolean)>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: void <clinit>()>-><javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>
<org.springframework.web.client.RestTemplate: void <init>(java.util.List)>-><java.util.ArrayList: void <init>()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<org.springframework.web.util.OpaqueUriComponents: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.support.RootBeanDefinition: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.redis.RedisReactiveHealthContributorAutoConfiguration: void <init>(java.util.Map)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.LocalDate: boolean equals(java.lang.Object)>
<javax.management.MBeanServerDelegate: java.lang.String getMBeanServerId()>-><java.net.InetAddress: java.lang.String getHostName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><javax.security.auth.Subject$SecureSet: int size()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.node.BooleanNode: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.io.FileInputStream: void <init>(java.io.File)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.Object getLast(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.operation.ApiOperationReader getApiOperationReader()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><com.alibaba.fastjson.JSONArray: boolean remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.MonoOnAssembly: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.MBeanAttributeInfo: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Class: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: void forEach(java.util.function.Consumer)>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getChannels()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.String: java.lang.String intern()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.asm.Handle: java.lang.String toString()>
<org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <clinit>()>-><java.util.HashSet: void <init>(java.util.Collection)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeLongFieldAccessorImpl: int getInt(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.util.AbstractConstant: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.BaseObjectPoolConfig: boolean getTestOnReturn()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.aop.framework.ProxyFactoryBean: java.util.List freshAdvisorChain()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: int size()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.RegularEnumSet: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean isEmpty()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache$WriteQueue: void <init>()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeRefreshToken(org.springframework.security.oauth2.common.OAuth2RefreshToken)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String getValue()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: javax.management.ObjectName cloneObjectName(javax.management.ObjectName)>-><javax.management.ObjectName: javax.management.ObjectName getInstance(javax.management.ObjectName)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.IdentityHashMap$EntrySet: boolean remove(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.support.GenericBeanDefinition: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.core.io.UrlResource: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.aspectj.util.FuzzyBoolean$YesFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>-><org.aspectj.util.FuzzyBoolean$YesFuzzyBoolean: void <init>()>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void debug(java.lang.String)>-><io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: boolean isDebugEnabled()>
<com.google.common.cache.CacheBuilder: void <init>()>-><java.lang.Object: void <init>()>
<java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxCreate$IgnoreSink: java.lang.String toString()>
<org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERVisibleString: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long estimateSize()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: long estimateSize()>
<com.alibaba.fastjson.serializer.MiscCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.CodeSource: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Year: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.exceptions.OAuth2Exception: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.juli.logging.DirectJDKLog: void fatal(java.lang.Object,java.lang.Throwable)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.springframework.boot.cloud.CloudPlatform: void <clinit>()>-><org.springframework.boot.cloud.CloudPlatform$4: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.pool.HikariPool: boolean softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)>-><com.zaxxer.hikari.util.ConcurrentBag: boolean reserve(com.zaxxer.hikari.util.ConcurrentBag$IConcurrentBagEntry)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder maximumSize(long)>-><com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.logging.log4j.spi.Provider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.util.ClockSource: java.lang.String elapsedDisplayString(long,long)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.p6spy.engine.logging.Category: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Integer: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<com.google.common.cache.CacheStats: void <init>(long,long,long,long,long,long)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.codehaus.jackson.map.deser.std.StdDeserializer: java.util.Date _parseDate(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<reactor.util.function.Tuple4: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.MBeanConstructorInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.std.IndexedStringListSerializer: void serializeContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void initialize()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.aspectj.weaver.patterns.TypePattern: void <clinit>()>-><org.aspectj.weaver.patterns.NoTypePattern: void <init>()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.EnumMap$EntrySet: boolean remove(java.lang.Object)>
<org.thymeleaf.TemplateEngine: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.TreeMap$KeySet: boolean remove(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.util.ParentTypeAwareTypeInformation: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection _deserializeWithObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.util.TokenBuffer: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: java.lang.Object getAttribute(java.lang.String)>-><javax.management.MBeanServerDelegate: java.lang.String getImplementationVersion()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.Pair: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: long getLong(java.lang.Object)>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.PermissionCollection: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.introspect.MemberKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.reflect.Field: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.DefaultPathContainer: void <init>(java.lang.String,java.util.List)>
<sun.reflect.UnsafeDoubleFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<org.springframework.session.security.web.authentication.SpringSessionRememberMeServices: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.RegularEnumSet: boolean remove(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Hashtable$KeySet: int size()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.aop.framework.AdvisedSupport: java.lang.Class[] getProxiedInterfaces()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.springframework.web.client.RestTemplate: void <init>(java.util.List)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>-><java.lang.Object: void <init>()>
<com.p6spy.engine.spy.P6ModuleManager: void loadDriversExplicitly(com.p6spy.engine.spy.P6SpyLoadableOptions)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader)>
<register-finalize <javax.servlet.SessionTrackingMode: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>-><java.lang.Integer: java.lang.String toString(int)>
<org.springframework.security.authentication.LockedException: void <init>(java.lang.String)>-><org.springframework.security.authentication.AccountStatusException: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.JmxMBeanServer$2: void <init>(com.sun.jmx.mbeanserver.JmxMBeanServer)>-><java.lang.Object: void <init>()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERUniversalString: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeySet: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration: void <init>()>
<org.aspectj.util.FuzzyBoolean$NeverFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>-><org.aspectj.util.FuzzyBoolean$NeverFuzzyBoolean: void <init>()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.Executors$RunnableAdapter: java.lang.Object call()>-><com.zaxxer.hikari.pool.ProxyLeakTask: void run()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$4: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void ensureObj(java.lang.Object)>
<java.util.PriorityQueue: java.lang.Object poll()>-><java.util.PriorityQueue: void siftDown(int,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.misc.Unsafe: void putFloatVolatile(java.lang.Object,long,float)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<sun.reflect.UnsafeByteFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeByteFieldAccessorImpl: byte getByte(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<java.net.InMemoryCookieStore: void getInternal1(java.util.List,java.util.Map,java.lang.String,boolean)>-><java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.xkcoding.justauth.JustAuthAutoConfiguration: void <init>()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERUTF8String: java.lang.String toString()>
<org.springframework.boot.jta.bitronix.PoolingDataSourceBean: void <init>()>-><bitronix.tm.resource.jdbc.PoolingDataSource: void setEnableJdbc4ConnectionTest(boolean)>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><org.apache.tomcat.util.modeler.FeatureInfo: void setType(java.lang.String)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<org.codehaus.jackson.map.util.Comparators$1: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.sun.imageio.spi.FileImageOutputStreamSpi: javax.imageio.stream.ImageOutputStream createOutputStreamInstance(java.lang.Object,boolean,java.io.File)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<org.apache.logging.log4j.message.ParameterFormatter: void handleErrorInObjectToString(java.lang.Object,java.lang.StringBuilder,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><java.nio.CharBuffer: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyRegistrationConfiguration: void <init>()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.config.annotation.web.configuration.OAuth2ClientConfiguration: void <init>()>
<com.zaxxer.hikari.HikariConfig: void <clinit>()>-><java.lang.String: char[] toCharArray()>
<com.google.common.cache.CacheBuilder: void <clinit>()>-><com.google.common.cache.CacheBuilder$2: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundryActuatorAutoConfiguration: void <init>()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.Scannable$Attr$2: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><com.google.common.base.Joiner$3: int size()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.SubList: int size()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: boolean remove(java.lang.Object)>
<springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: void <init>()>-><com.fasterxml.classmate.util.ResolvedTypeCache: com.fasterxml.classmate.util.ResolvedTypeCache lruCache(int)>
<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.Maps$Values: void forEach(java.util.function.Consumer)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultUserInfoRestTemplateFactory: org.springframework.security.oauth2.client.OAuth2RestTemplate getUserInfoRestTemplate()>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.imageio.ImageTypeSpecifier$Interleaved: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<org.aspectj.bridge.IMessage: void <clinit>()>-><org.aspectj.bridge.IMessage$Kind: void <init>(java.lang.String,int,org.aspectj.bridge.IMessage$1)>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.compat.JreCompat: boolean isGraalAvailable()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.StringJoiner: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerOpaqueTokenConfiguration$WebSecurityConfiguration: void <init>()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.Vector: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.pool.HikariProxyStatement: int getUpdateCount()>-><com.zaxxer.hikari.pool.HikariProxyStatement: int getUpdateCount()>
<org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>-><java.lang.Thread: java.lang.Thread currentThread()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer removeConfigurer(java.lang.Class)>-><com.google.common.base.Joiner$3: int size()>
<java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: void add(int,java.lang.Object)>
<org.springframework.session.PrincipalNameIndexResolver: java.lang.String resolveIndexValueFor(org.springframework.session.Session)>-><org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.lang.Object getAttribute(java.lang.String)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: java.lang.String getApprovalKey(org.springframework.security.oauth2.provider.OAuth2Authentication)>
<com.zaxxer.hikari.pool.HikariPool: void lambda$softEvictConnections$0(com.zaxxer.hikari.pool.PoolEntry)>-><com.zaxxer.hikari.pool.HikariPool: boolean softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.node.DecimalNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.TreeMap$Entry: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$10: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.CodeSigner: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.invoke.LambdaForm$Name: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.JdkLoggerFactory: void <clinit>()>-><io.micrometer.core.util.internal.logging.JdkLoggerFactory: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.config.ConstructorArgumentValues: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.StringJoiner: java.lang.String toString()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.LinkedList: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Year: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.Scannable$Attr$1: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><java.lang.Object: java.lang.Class getClass()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.aspectj.util.FuzzyBoolean: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.ArrayBlockingQueue: int size()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void removeListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<cn.hutool.http.HttpBase: java.lang.Object header(java.util.Map,boolean)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.CompletableFuture: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jms.activemq.ActiveMQConnectionFactoryConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: javax.management.ObjectName cloneObjectName(javax.management.ObjectName)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Float: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.util.EnumMap: int entryHashCode(int)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeUsingCustom(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.util.LinkedMultiValueMap: boolean equals(java.lang.Object)>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.lang.Object getAttribute(java.lang.String)>-><org.springframework.session.MapSession: java.lang.Object getAttribute(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeStaticFloatFieldAccessorImpl: long getLong(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.net.InMemoryCookieStore: void getInternal2(java.util.List,java.util.Map,java.lang.Comparable,boolean)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.http.HttpHeaders: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><com.p6spy.engine.common.CustomHashedHashSet: boolean add(java.lang.Object)>
<org.springframework.data.redis.connection.RedisSubscribedConnectionException: void <init>(java.lang.String)>-><org.springframework.dao.InvalidDataAccessApiUsageException: void <init>(java.lang.String)>
<java.io.ObjectStreamClass$MemberSignature: void <init>(java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.Class getType()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeStaticObjectFieldAccessorImpl: int getInt(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void <init>()>-><com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.support.MethodOverrides: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void <init>(int)>-><org.apache.catalina.connector.OutputBuffer: void clear(java.nio.Buffer)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: long getLong(java.lang.Object)>
<org.apache.http.pool.RouteSpecificPool: void shutdown()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.google.common.cache.LocalCache$EntryFactory$8: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.WeakHashMap$Values: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.aspectj.util.LangUtil: java.util.List getFirstNumbers(java.lang.String)>-><java.util.StringTokenizer: java.lang.String nextToken()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><java.util.ArrayList: void clear()>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.MBeanConstructorInfo: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setDate(int,java.sql.Date,java.util.Calendar)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setDate(int,java.sql.Date,java.util.Calendar)>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.Semaphore: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: org.springframework.security.oauth2.provider.OAuth2Request getOAuth2Request()>
<com.google.common.cache.LocalCache$Strength$1: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$Strength: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><cn.hutool.core.map.MapProxy: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getDeclaredSerialFields(java.lang.Class)>-><java.io.ObjectStreamField: boolean isUnshared()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void initialize()>-><com.sun.jmx.mbeanserver.JmxMBeanServer$2: void <init>(com.sun.jmx.mbeanserver.JmxMBeanServer)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.LocalCache$Strength getKeyStrength()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: long getExpireAfterAccessNanos()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<sun.reflect.UnsafeLongFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.misc.Unsafe: void putLong(java.lang.Object,long,long)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.data.redis.serializer.ByteArrayRedisSerializer: void <clinit>()>-><org.springframework.data.redis.serializer.ByteArrayRedisSerializer: void <init>(java.lang.String,int)>
<org.springframework.security.web.access.ExceptionTranslationFilter$DefaultThrowableAnalyzer: java.lang.Throwable lambda$initExtractorMap$0(java.lang.Throwable)>-><javax.servlet.ServletException: java.lang.Throwable getRootCause()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>-><java.lang.Object: void <init>()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.ArrayType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.JsonMappingException instantiationException(java.lang.Class,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.nio.ByteBuffer: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>
<java.net.InMemoryCookieStore: void getInternal2(java.util.List,java.util.Map,java.lang.Comparable,boolean)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(java.util.List)>-><java.util.Arrays$ArrayList: boolean contains(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.redis.connection.util.ByteArrayWrapper: boolean equals(java.lang.Object)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FormatCache$MultipartKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.misc.Unsafe: void putLongVolatile(java.lang.Object,long,long)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<sun.reflect.UnsafeShortFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>-><com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap access$000()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.apache.juli.logging.DirectJDKLog: void fatal(java.lang.Object,java.lang.Throwable)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><org.apache.catalina.core.ContainerBase: org.apache.catalina.Container getParent()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>-><org.aspectj.weaver.BCException: void printStackTrace()>
<register-finalize <org.springframework.data.redis.serializer.ByteArrayRedisSerializer: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.image.ColorModel: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>-><com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><cn.hutool.core.date.DateTime: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: int compareTo(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterTypeReader: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void removeClassLoader(java.lang.ClassLoader,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository getInstantiatorCLR()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Collections$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.ParsePosition: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeBooleanFieldAccessorImpl: long getLong(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Object: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.BitSet: boolean equals(java.lang.Object)>
<io.netty.channel.nio.NioEventLoop$4: java.lang.Object run()>-><java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.Vector: boolean remove(java.lang.Object)>
<org.codehaus.jackson.map.util.ClassUtil: java.lang.reflect.Constructor findConstructor(java.lang.Class,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><io.netty.util.AbstractConstant: int compareTo(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><net.logstash.logback.encoder.com.lmax.disruptor.Sequence: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setBoolean(int,boolean)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><java.nio.CharBuffer: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><java.lang.String: java.lang.String valueOf(char)>
<reactor.util.function.Tuple2: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<org.springframework.web.servlet.view.ContentNegotiatingViewResolver: void <clinit>()>-><org.springframework.web.servlet.view.ContentNegotiatingViewResolver$1: void <init>()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.commons.pool2.BaseObject: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.SimpleType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.text.AttributeEntry: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.ObjectName: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><java.lang.Object: java.lang.Class getClass()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiListingReader: void <init>()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$2: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Byte: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void <init>(int)>-><java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.CharSequence convertElement(java.lang.CharSequence,boolean,org.springframework.boot.context.properties.source.ConfigurationPropertyName$ElementCharPredicate)>-><java.nio.CharBuffer: char charAt(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.RedisSessionConfiguration$SpringBootRedisHttpSessionConfiguration: void <init>()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.juli.logging.DirectJDKLog: boolean isInfoEnabled()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI lambda$doCreateConnectionProvider$0(org.springframework.data.redis.connection.RedisStandaloneConfiguration)>-><org.springframework.data.redis.connection.RedisStandaloneConfiguration: java.lang.String getHostName()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.apache.catalina.valves.ValveBase: java.lang.String getDomainInternal()>-><org.apache.catalina.valves.ValveBase: org.apache.catalina.Container getContainer()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.io.File: void <init>(java.lang.String)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><com.google.common.base.Joiner$3: int size()>
<java.net.InMemoryCookieStore: void getInternal2(java.util.List,java.util.Map,java.lang.Comparable,boolean)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1UTCTime: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.util.context.Context1: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.type.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: boolean indexSupportsIncludeFilters()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addFieldMixIns(java.lang.Class,java.lang.Class,java.util.Map)>-><java.lang.reflect.Field: java.lang.String getName()>
<org.springframework.security.crypto.password.Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><javax.management.ObjectName: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>-><org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(java.util.List)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.MBeanInfo: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>
<org.aspectj.weaver.ResolvedType$PointcutGetter: void <init>(org.aspectj.weaver.ResolvedType$1)>-><org.aspectj.weaver.ResolvedType$PointcutGetter: void <init>()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.audit.listener.AuditListener: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: boolean isEmpty()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.util.ClassTypeInformation: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.ProcessEnvironment$StringKeySet: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cache.CachesEndpointAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.binder.system.ProcessorMetrics: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getValueEquivalence()>-><com.google.common.cache.LocalCache$Strength$1: com.google.common.base.Equivalence defaultEquivalence()>
<org.aspectj.weaver.Lint: void <clinit>()>-><org.aspectj.weaver.tools.TraceFactory: org.aspectj.weaver.tools.TraceFactory getTraceFactory()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.util.MimeType: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean remove(java.lang.Object)>
<org.springframework.data.convert.MappingContextTypeInformationMapper: boolean lambda$verify$1(org.springframework.data.mapping.Alias,org.springframework.data.util.ClassTypeInformation,java.util.Map$Entry)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.AbstractList: java.util.Iterator iterator()>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<org.codehaus.jackson.map.deser.std.StdKeyDeserializer: java.lang.Object deserializeKey(java.lang.String,org.codehaus.jackson.map.DeserializationContext)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.alibaba.fastjson.util.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<com.google.common.cache.LocalCache: boolean usesAccessQueue()>-><com.google.common.cache.LocalCache: boolean expiresAfterAccess()>
<java.net.InMemoryCookieStore: void getInternal1(java.util.List,java.util.Map,java.lang.String,boolean)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Instant: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.math.BigDecimal: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: int getUpdateCount()>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><org.apache.catalina.valves.ValveBase: org.apache.catalina.Container getContainer()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.Clock$SystemClock: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.DriverDataSource: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<reactor.core.scheduler.Schedulers: java.lang.Object scanExecutor(java.util.concurrent.Executor,reactor.core.Scannable$Attr)>-><java.util.concurrent.ThreadPoolExecutor: boolean isTerminated()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.Hashtable$KeySet: int size()>
<sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.cglib.core.ClassInfo: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<org.springframework.validation.DataBinder: void <init>(java.lang.Object,java.lang.String)>-><org.springframework.validation.DefaultBindingErrorProcessor: void <init>()>
<org.codehaus.jackson.map.ser.std.IndexedStringListSerializer: void serializeUsingCustom(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void initialize()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>-><com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<org.springframework.boot.validation.MessageInterpolatorFactory: void <clinit>()>-><java.util.LinkedHashSet: void <init>()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><org.springframework.util.StringUtils: java.lang.String uriDecode(java.lang.String,java.nio.charset.Charset)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedField _constructField(java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection _deserializeWithObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl: void <init>(java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.reflect.Field: int getModifiers()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.core.publisher.Operators$EmptySubscription: int size()>
<com.p6spy.engine.spy.option.P6OptionsRepository: java.lang.Object parse(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.BCException: void printStackTrace(java.io.PrintStream)>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,boolean,boolean)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void <init>(javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,com.sun.jmx.mbeanserver.Repository)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: boolean customWeigher()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.BooleanNode: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress,int,java.lang.String)>-><org.apache.http.HttpHost: void <init>(java.net.InetAddress,java.lang.String,int,java.lang.String)>
<io.micrometer.prometheus.PrometheusMeterRegistry: void onMeterRemoved(io.micrometer.core.instrument.Meter)>-><io.micrometer.prometheus.PrometheusMeterRegistry: io.prometheus.client.CollectorRegistry getPrometheusRegistry()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration: void <init>()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.web.method.HandlerMethod: org.springframework.core.MethodParameter[] initMethodParameters()>
<java.util.AbstractList: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.thymeleaf.spring5.SpringWebFluxTemplateEngine: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.buffer.SwappedByteBuf: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.LocalDate: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList: void <init>(int)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<org.aspectj.weaver.patterns.ModifiersPattern: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.web.servlet.view.InternalResourceViewResolver: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<org.springframework.http.ResponseEntity: void <init>(org.springframework.http.HttpStatus)>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap,org.springframework.http.HttpStatus)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiDescriptionLookup: void <init>()>
<org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><java.lang.Throwable: void printStackTrace()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration: void <init>()>
<org.aspectj.weaver.UnresolvedType: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><org.springframework.boot.actuate.health.Health$Builder: java.util.Map access$100(org.springframework.boot.actuate.health.Health$Builder)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: void setSecurityMetadataSource(org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><cn.hutool.core.date.DateTime: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><java.lang.String: int indexOf(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.alibaba.fastjson.util.FieldInfo: java.lang.String toString()>
<org.apache.catalina.util.LifecycleMBeanBase: void initInternal()>-><org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void init(org.springframework.security.config.annotation.SecurityBuilder)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<javax.servlet.SessionTrackingMode: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Date: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointDiscoverer: org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey createOperationKey(org.springframework.boot.actuate.endpoint.Operation)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.MapType: java.lang.String toString()>
<com.google.common.cache.LocalCache: com.google.common.cache.LocalCache$Segment createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.time.chrono.ChronoZonedDateTime: int compareTo(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration: void <init>(org.springframework.beans.factory.ObjectProvider)>-><java.util.stream.ReferencePipeline$Head: void forEach(java.util.function.Consumer)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.zone.ZoneOffsetTransitionRule: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(java.util.List)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.Vector: boolean add(java.lang.Object)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationParameterHeadersConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$ClassProxyingConfiguration: void <init>(org.springframework.beans.factory.BeanFactory)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.p6spy.engine.common.Value: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.RegularEnumSet: boolean remove(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>-><org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.misc.Signal: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.node.DoubleNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.MutablePropertyValues: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration: void <init>()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><org.apache.catalina.util.LifecycleMBeanBase: java.lang.String getDomain()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><java.lang.reflect.Field: int hashCode()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.approval.Approval: java.lang.String toString()>
<org.springframework.security.web.session.InvalidSessionAccessDeniedHandler: void <init>(org.springframework.security.web.session.InvalidSessionStrategy)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.alibaba.fastjson.util.FieldInfo: int compareTo(com.alibaba.fastjson.util.FieldInfo)>-><java.lang.reflect.Field: java.lang.Class getType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry$UrlMapping: java.util.Collection getConfigAttrs()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.springframework.boot.web.server.MimeMappings: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.ImageBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.Tag: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.concurrent.SynchronousQueue: int size()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: void accept(java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,org.springframework.http.MediaType[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.lang.invoke.MethodHandleNatives: boolean verifyConstants()>-><java.lang.reflect.Field: int getInt(java.lang.Object)>
<sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext: void checkUnresolvedObjectId()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getValueEquivalence()>-><com.google.common.cache.CacheBuilder: com.google.common.cache.LocalCache$Strength getValueStrength()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: boolean usesWriteEntries()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<org.springframework.boot.actuate.health.Status: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.jdbc.support.JdbcUtils: void <clinit>()>-><java.lang.reflect.Field: java.lang.String getName()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.net.SocketPermission: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Object: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.base.Predicates$AndPredicate: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><cn.hutool.http.Header: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.Throwable: java.lang.String getMessage()>
<org.apache.catalina.core.ContainerBase: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<org.aspectj.weaver.ResolvedType$PointcutGetter: void <init>()>-><java.lang.Object: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.util.LinkedMultiValueMap: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void <init>()>-><java.util.Properties: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.x509.AVA: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void addListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><cn.hutool.core.date.format.FastDateFormat: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultSeparator: void <init>(char,java.lang.String)>-><java.lang.String: java.lang.String valueOf(char)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.CodeSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><cn.hutool.http.ContentType: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean contains(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: int compareTo(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.ArrayNode: boolean equals(java.lang.Object)>
<org.thymeleaf.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String)>-><java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<org.aspectj.weaver.patterns.EllipsisTypePattern: void <init>()>-><org.aspectj.weaver.patterns.TypePattern: void <init>(boolean,boolean,org.aspectj.weaver.patterns.TypePatternList)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: void init(org.springframework.security.config.annotation.SecurityBuilder)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.Duration: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.time.LocalDateTime: int compareTo(java.lang.Object)>
<sun.reflect.UnsafeIntegerFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.ser.BeanPropertyWriter buildWriter(java.lang.String,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.introspect.AnnotatedMember,boolean)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class getTargetClass()>-><java.lang.Object: java.lang.Class getClass()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.net.InMemoryCookieStore: void addIndex(java.util.Map,java.lang.Object,java.net.HttpCookie)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean remove(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<javax.management.MBeanServerDelegate: java.lang.String getMBeanServerId()>-><java.net.InetAddress: java.net.InetAddress getLocalHost()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.springframework.util.unit.DataSize: int compareTo(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.nio.ByteBuffer: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.LinkedList: boolean addAll(java.util.Collection)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.springframework.boot.context.properties.PropertyMapper$Source: java.lang.Boolean lambda$as$0()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.p6spy.engine.spy.P6ModuleManager: void loadDriversExplicitly(com.p6spy.engine.spy.P6SpyLoadableOptions)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.boot.jta.atomikos.AtomikosDataSourceBean: void afterPropertiesSet()>-><com.atomikos.jdbc.AtomikosDataSourceBean: void init()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaultLogoutSuccessHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: boolean equals(java.lang.Object)>
<org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.String)>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getInstance(java.lang.String)>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Iterator)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.alibaba.fastjson.util.FieldInfo: void <init>(java.lang.String,java.lang.Class,java.lang.Class,java.lang.reflect.Type,java.lang.reflect.Field,int,int,int)>-><java.lang.reflect.Field: int getModifiers()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeObjectFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.http.HttpStatus getStatus(javax.servlet.http.HttpServletRequest)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryConfiguration: void <init>()>
<reactor.util.function.Tuple4: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.node.NullNode: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><io.netty.util.AbstractConstant: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.util.TokenBuffer: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field locateField(java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.reflect.Field: java.lang.Class getType()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedMap: int size()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.invoke.LambdaForm: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: void setLong(java.lang.Object,long)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.oauth2.common.exceptions.OAuth2Exception: java.lang.String toString()>
<org.apache.tomcat.util.modeler.NoDescriptorRegistry: void <init>()>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry$PassthroughMBean: void <init>(org.apache.tomcat.util.modeler.NoDescriptorRegistry$1)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.util.ClassKey: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.TypeVariableTypeInformation: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object,int,int)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<sun.reflect.UnsafeByteFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.HashMap$KeySet: boolean remove(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setLong(java.lang.Object,long)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.Arrays$ArrayList: int size()>
<sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<javax.print.MimeType: void parse(java.lang.String)>-><java.util.Vector: void <init>()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.image.ColorModel: java.lang.String toString()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(org.springframework.security.access.ConfigAttribute)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.apache.catalina.util.ContextName: java.lang.String getDisplayName()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<springfox.documentation.spring.web.plugins.PathAndParametersEquivalence: void <clinit>()>-><springfox.documentation.spring.web.plugins.ResolvedMethodParameterEquivalence: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<io.netty.util.internal.CleanerJava6: void <clinit>()>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$7: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: int getInt(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.core.publisher.Operators$ScalarSubscription: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxOnAssembly: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.BeanMetadataAttribute: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><ch.qos.logback.core.subst.Token: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Float: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: java.util.Date getExpiration()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.net.HttpCookie: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><java.util.Collections: java.util.List emptyList()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.web.servlet.function.RequestPredicates$ContentTypePredicate: void <init>(java.util.Set)>-><org.springframework.web.servlet.function.RequestPredicates$HeadersPredicate: void <init>(java.util.function.Predicate)>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void trace(java.lang.Object)>
<org.springframework.web.util.pattern.PathPattern: void <clinit>()>-><java.util.Comparator: java.util.Comparator nullsLast(java.util.Comparator)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <clinit>()>-><java.util.ArrayList: void <init>()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.apache.catalina.util.ErrorPageSupport: void <init>()>-><java.lang.Object: void <init>()>
<sun.reflect.UnsafeDoubleFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<sun.reflect.UnsafeBooleanFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<io.micrometer.core.instrument.binder.logging.LogbackMetrics: void <clinit>()>-><java.lang.ThreadLocal: void <init>()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: org.springframework.security.oauth2.common.OAuth2RefreshToken getRefreshToken()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<com.zaxxer.hikari.pool.HikariProxyDatabaseMetaData: java.lang.String getDriverName()>-><com.zaxxer.hikari.pool.ProxyDatabaseMetaData: java.sql.SQLException checkException(java.sql.SQLException)>
<org.springframework.boot.SpringBootExceptionHandler: boolean isLogConfigurationMessage(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$1: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.config.DependencyDescriptor: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.OffsetTime: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><reactor.core.Fuseable$QueueSubscription: java.util.Iterator iterator()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: void lambda$initialCacheNames$0(java.lang.String)>-><org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder withCacheConfiguration(java.lang.String,org.springframework.data.redis.cache.RedisCacheConfiguration)>
<java.net.URLClassLoader: void close()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<org.apache.coyote.Constants: void <clinit>()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Locale: java.lang.String toString()>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SetFromMap: java.lang.Object[] toArray()>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<javax.print.MimeType: void parse(java.lang.String)>-><java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter$TimingContext: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.property.field.FieldProvider getFieldProvider()>
<org.springframework.data.util.TypeDiscoverer: org.springframework.data.util.TypeInformation getProperty(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class getTargetClass()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.NoDescriptorRegistry$NoJmxMBeanServer: void <init>(org.apache.tomcat.util.modeler.NoDescriptorRegistry$1)>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry$NoJmxMBeanServer: void <init>()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamField: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.lettuce.core.metrics.CommandMetrics: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection: java.lang.Object lambda$getClosedConnection$0(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>-><java.lang.Class: java.lang.String getCanonicalName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.scheduler.DelegateServiceScheduler: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.Rectangle: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findClass(java.lang.String)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object resolveReference(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.invoke.MethodType: boolean equals(java.lang.Object)>
<java.net.InMemoryCookieStore: void addIndex(java.util.Map,java.lang.Object,java.net.HttpCookie)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<com.alibaba.fastjson.serializer.ASMSerializerFactory: com.alibaba.fastjson.serializer.JavaBeanSerializer createJavaBeanSerializer(com.alibaba.fastjson.serializer.SerializeBeanInfo)>-><java.lang.reflect.Field: java.lang.String getName()>
<org.apache.catalina.connector.OutputBuffer: void <init>(int)>-><java.util.HashMap: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.EnumMap: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.awt.SunHints$Key: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache$Segment: void initTable(java.util.concurrent.atomic.AtomicReferenceArray)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.RegularEnumSet: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoCustomConfiguration: void <init>()>-><org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>()>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StringBuffer: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.aspectj.bridge.MessageWriter: void <init>(java.io.PrintWriter,boolean)>-><java.io.PrintWriter: void <init>(java.io.OutputStream)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.util.DerValue: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.util.TokenBuffer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: java.lang.String toString()>
<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.Class getRawType()>-><java.lang.reflect.Field: java.lang.Class getType()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Integer: java.lang.String toString()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.Point: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getKey()>
<org.thymeleaf.spring5.SpringTemplateEngine: void <clinit>()>-><org.thymeleaf.spring5.dialect.SpringStandardDialect: void <init>()>
<org.springframework.session.SingleIndexResolver: java.util.Map resolveIndexesFor(org.springframework.session.Session)>-><java.util.Collections: java.util.Map emptyMap()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration$OAuth2ClientWebMvcSecurityConfiguration: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<java.util.concurrent.DelayQueue: boolean offer(java.util.concurrent.Delayed)>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: void <init>(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.imageio.ImageTypeSpecifier: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$Values: boolean remove(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType create(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>-><com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.Predicates$AndPredicate: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><java.lang.Class: java.lang.String getSimpleName()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><cn.hutool.core.map.MapProxy: java.util.Set entrySet()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.thymeleaf.spring5.util.SpringVersionUtils: void <clinit>()>-><java.lang.String: int length()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.MBeanInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: java.lang.Object getAttribute(java.lang.String)>-><javax.management.MBeanServerDelegate: java.lang.String getSpecificationVersion()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.baomidou.dynamic.datasource.DynamicDataSourceCreator: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeRefreshToken(org.springframework.security.oauth2.common.OAuth2RefreshToken)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeRefreshToken(java.lang.String)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.security.access.vote.AffirmativeBased: void <init>(java.util.List)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: void <init>(java.util.List)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanSupport: void postRegister(java.lang.Boolean)>-><com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: void postRegister(java.lang.Boolean)>
<io.micrometer.core.instrument.binder.jvm.JvmGcMetrics: void <clinit>()>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.Class)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.DecimalNode: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.SkipResult: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<org.springframework.security.web.savedrequest.DefaultSavedRequest: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.core.Constants: void lambda$getValues$0(java.lang.String,java.util.Set,java.lang.String,java.lang.Object)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: java.lang.String getValue()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.BitSet: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void debug(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><io.netty.util.concurrent.ScheduledFutureTask: int compareTo(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.apache.tomcat.util.buf.UEncoder: java.util.BitSet access$000()>-><org.apache.tomcat.util.buf.UEncoder: java.util.BitSet initialSafeChars()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents$Type$10: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.boot.cloud.CloudPlatform: void <init>(java.lang.String,int,org.springframework.boot.cloud.CloudPlatform$1)>-><org.springframework.boot.cloud.CloudPlatform: void <init>(java.lang.String,int)>
<sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration: void <init>()>
<sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<javax.print.MimeType$LexicalAnalyzer: java.lang.String getLexeme()>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UEncoder: void <init>(org.apache.tomcat.util.buf.UEncoder$SafeCharsSet)>-><java.lang.Object: void <init>()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.AbstractByteBufAllocator: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: void addOperations(org.springframework.util.MultiValueMap,org.springframework.boot.actuate.endpoint.EndpointId,java.lang.Object,boolean)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void setInt(java.lang.Object,int)>
<io.micrometer.prometheus.PrometheusMeterRegistry: void onMeterRemoved(io.micrometer.core.instrument.Meter)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.session.web.http.SessionRepositoryFilter: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void addAllowedHeader(java.lang.String)>
<org.springframework.security.web.session.InvalidSessionAccessDeniedHandler: void <init>(org.springframework.security.web.session.InvalidSessionStrategy)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.asm.ConstantDynamic: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.AVA: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.modeler.Registry: void disableRegistry()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: int size()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.type.MapType: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: void addManagedBean(org.apache.tomcat.util.modeler.ManagedBean)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.util.TypeVariableTypeInformation: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration: void <init>(org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties,org.springframework.context.ApplicationContext)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.ResolvableType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.aspectj.bridge.MessageUtil$5: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeByteFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.nio.CharBuffer: char charAt(int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.lang.Enum: int compareTo(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.security.Provider: java.util.Set entrySet()>
<org.springframework.security.authentication.RememberMeAuthenticationToken: void <init>(java.lang.String,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeObjectFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: int getInt(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.support.NullBean: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.util.Set entrySet()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.security.oauth2.provider.BaseRequest: void setScope(java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<springfox.documentation.spring.web.readers.operation.DefaultOperationReader: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.lettuce.core.internal.AbstractInvocationHandler: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: java.lang.Object getAttribute(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.validation.FieldError: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.sql.Timestamp: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.oauth2.provider.client.BaseClientDetails: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.spel.SpelParserConfiguration: org.springframework.expression.spel.SpelCompilerMode getCompilerMode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.data.util.Pair: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.text.ParsePosition: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void setLong(java.lang.Object,long)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void preDeregisterInvoke(javax.management.MBeanRegistration)>-><com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: void preDeregister()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: void initializeAdvisorChain()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.time.YearMonth: int compareTo(java.lang.Object)>
<java.time.format.DateTimeTextProvider$LocaleStore: java.util.Iterator getTextIterator(java.time.format.TextStyle)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setNull(java.sql.PreparedStatement,int,int,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyConnection: java.sql.DatabaseMetaData getMetaData()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: java.lang.String lambda$afterPropertiesSet$0()>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: java.lang.Class getSecureObjectClass()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><ch.qos.logback.classic.spi.ClassPackagingData: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.InetSocketAddress: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.node.BinaryNode: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$3: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider doCreateConnectionProvider(io.lettuce.core.AbstractRedisClient,io.lettuce.core.codec.RedisCodec)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: java.util.Queue discardingQueue()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: int getInt(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Throwable: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: int getInt(java.lang.Object)>
<sun.reflect.UnsafeDoubleFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector: void _addFieldMixIns(java.lang.Class,java.lang.Class,java.util.Map)>-><java.lang.reflect.Field: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.oauth2.provider.client.BaseClientDetails: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNClob(int,java.io.Reader,long)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setNClob(int,java.io.Reader,long)>
<java.util.AbstractSet: int hashCode()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.invoke.MethodType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.node.TextNode: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Type: java.lang.String toString()>
<org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter build()>
<org.springframework.session.PrincipalNameIndexResolver: java.lang.String resolveIndexValueFor(org.springframework.session.Session)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void setInt(java.lang.Object,int)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<cn.hutool.http.HttpConnection: cn.hutool.http.HttpConnection header(java.util.Map,boolean)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration: void <init>()>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.ClassKey: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<javax.management.StandardMBean: void postDeregister()>-><com.sun.jmx.mbeanserver.StandardMBeanSupport: void unregister()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.lang.String: int compareTo(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.springframework.boot.SpringBootExceptionHandler: boolean isLogConfigurationMessage(java.lang.Throwable)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.Collections$SingletonSet: int size()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.core.publisher.FluxHide$SuppressFuseableSubscriber: int size()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<cn.hutool.core.map.CustomKeyMap: void putAll(java.util.Map)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.info.ProjectInfoProperties)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration$HikariPoolDataSourceMetadataProviderConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.google.common.cache.CacheBuilder$OneWeigher: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.apache.catalina.connector.CoyoteOutputStream: void close()>-><org.apache.catalina.connector.OutputBuffer: void close()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: void setLong(java.lang.Object,long)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$1: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.type.ArrayType: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>-><org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.commons.pool2.impl.BaseGenericObjectPool$IdentityWrapper: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setAccessDecisionManager(org.springframework.security.access.AccessDecisionManager)>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.core.AttributeAccessorSupport: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: int size()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<sun.reflect.UnsafeShortFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeShortFieldAccessorImpl: short getShort(java.lang.Object)>
<org.springframework.boot.actuate.health.Status: void <init>(java.lang.String)>-><org.springframework.boot.actuate.health.Status: void <init>(java.lang.String,java.lang.String)>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date parseAsISO8601(java.lang.String,java.text.ParsePosition)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler getDefaultAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.AccessDeniedHandlerImpl: void <init>()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeStaticFloatFieldAccessorImpl: int getInt(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.lang.Iterable,java.lang.CharSequence)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.http.HttpStatus getStatus(javax.servlet.http.HttpServletRequest)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.boot.ansi.Ansi8BitColor: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.aspectj.weaver.patterns.ThrowsPattern: void <clinit>()>-><org.aspectj.weaver.patterns.ThrowsPattern: void <init>(org.aspectj.weaver.patterns.TypePatternList,org.aspectj.weaver.patterns.TypePatternList)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.ThreadGroup: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTimestamp(int,java.sql.Timestamp)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTimestamp(int,java.sql.Timestamp)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMetricsAutoConfiguration: void <init>()>
<org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: void <init>(java.lang.String,int)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.access.expression.AbstractSecurityExpressionHandler: void setPermissionEvaluator(org.springframework.security.access.PermissionEvaluator)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.IdentityHashMap: java.util.Set entrySet()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><java.lang.reflect.Field: int hashCode()>
<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource freshTargetSource()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Hashtable$Enumerator: java.lang.Object nextElement()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Long: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doUnsubscribe(boolean,byte[][])>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>
<javax.print.MimeType$LexicalAnalyzer: void <init>(java.lang.String)>-><java.lang.String: int length()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$8: void <init>(java.lang.String,int)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.MonthDay: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.security.core.userdetails.User$UserBuilder: java.lang.String lambda$roles$1(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.thymeleaf.util.ClassLoaderUtils: java.lang.ClassLoader getSystemClassLoader()>-><java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.util.Properties: void load(java.io.InputStream)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.lang.ProcessEnvironment$StringKeySet: boolean isEmpty()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet: boolean equals(java.lang.Object)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: void checkWeightWithWeigher()>
<org.springframework.web.cors.CorsConfiguration: void <clinit>()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.reactive.ReactiveManagementContextAutoConfiguration: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.node.ObjectNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setClob(int,java.io.Reader,long)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setClob(int,java.io.Reader,long)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.google.common.base.Joiner$3: int size()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.text.FieldPosition: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>
<org.springframework.web.method.HandlerMethod: org.springframework.core.MethodParameter[] initMethodParameters()>-><org.springframework.web.method.HandlerMethod$HandlerMethodParameter: void <init>(org.springframework.web.method.HandlerMethod,int)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Arrays$ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardContext: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration: void <init>()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.util.ClassUtil: java.lang.reflect.Constructor findConstructor(java.lang.Class,boolean)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.springframework.session.MapSession: java.util.Set getAttributeNames()>-><java.util.HashMap: java.util.Set keySet()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.reflect.Field getField(java.lang.Class,java.lang.String,java.lang.reflect.Field[])>-><java.lang.reflect.Field: java.lang.String getName()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.Object: java.lang.Class getClass()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,boolean,boolean)>-><java.lang.Object: void <init>()>
<org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>-><org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: java.lang.String wrapExpression(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.sql.Date: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.LocalTime: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.LinkedHashMap$LinkedKeySet: boolean remove(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.serializer.GuavaCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<net.logstash.logback.encoder.com.lmax.disruptor.Sequence: boolean compareAndSet(long,long)>-><sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>
<org.springframework.boot.actuate.trace.http.HttpExchangeTracer: java.lang.Long lambda$sendingResponse$0(org.springframework.boot.actuate.trace.http.HttpTrace)>-><java.lang.Long: java.lang.Long valueOf(long)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntrySet: void forEach(java.util.function.Consumer)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.util.concurrent.SpscArrayQueue: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: void <init>(java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.reflect.Field: java.lang.Class getType()>
<com.google.common.collect.Maps$Values: boolean remove(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: int getInt(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.MutablePropertyValues: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: boolean isRegistered(javax.management.ObjectName)>-><javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.pool.HikariPool: org.slf4j.Logger access$300(com.zaxxer.hikari.pool.HikariPool)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.sql.Timestamp: int compareTo(java.lang.Object)>
<org.apache.http.protocol.ImmutableHttpProcessor: void <init>(org.apache.http.protocol.HttpRequestInterceptorList,org.apache.http.protocol.HttpResponseInterceptorList)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.EnumMap$1: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.Clock$SystemClock: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy[] values()>-><java.lang.Object: java.lang.Object clone()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Boolean: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.DiscoveredOperationsFactory: org.springframework.boot.actuate.endpoint.Operation lambda$createOperation$1(org.springframework.boot.actuate.endpoint.EndpointId,java.lang.Object,java.lang.reflect.Method,java.util.Map$Entry)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.github.xiaoymin.knife4j.spring.model.MarkdownFiles: void <clinit>()>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.net.SocketImpl: java.lang.String toString()>
<com.alibaba.fastjson.serializer.GuavaCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.time.OffsetDateTime: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <init>(java.lang.String,int,java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer removeConfigurer(java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <clinit>()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList$COWIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore: void removeRefreshToken(org.springframework.security.oauth2.common.OAuth2RefreshToken)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String getValue()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeStaticByteFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<java.util.ArrayList$Itr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UEncoder$SafeCharsSet: void <init>(java.lang.String,int,java.lang.String)>-><org.apache.tomcat.util.buf.UEncoder: java.util.BitSet access$000()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.OptionalLong: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.RedisReactiveSessionConfiguration: void <init>()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean remove(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.net.SocketPermission: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer removeConfigurer(java.lang.Class)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.util.LifecycleBase: void init()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.web.servlet.function.RouterFunctions$DefaultRouterFunction: void <init>(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)>-><org.springframework.web.servlet.function.RouterFunctions$AbstractRouterFunction: void <init>(org.springframework.web.servlet.function.RouterFunctions$1)>
<java.io.ObjectStreamClass$FieldReflector: void setObjFieldValues(java.lang.Object,java.lang.Object[])>-><java.lang.reflect.Field: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.font.AttributeValues: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<org.springframework.boot.actuate.system.DiskSpaceHealthIndicator: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><com.google.common.collect.Maps$Values: boolean remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Long: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Clock$SystemClock: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.aspectj.weaver.ResolvedPointcutDefinition: void <init>(org.aspectj.weaver.UnresolvedType,int,java.lang.String,org.aspectj.weaver.UnresolvedType[],org.aspectj.weaver.patterns.Pointcut)>-><org.aspectj.weaver.ResolvedPointcutDefinition: void <init>(org.aspectj.weaver.UnresolvedType,int,java.lang.String,org.aspectj.weaver.UnresolvedType[],org.aspectj.weaver.UnresolvedType,org.aspectj.weaver.patterns.Pointcut)>
<cn.hutool.http.HttpConnection: cn.hutool.http.HttpConnection header(java.util.Map,boolean)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.context.annotation.AnnotationBeanNameGenerator: boolean isStereotypeWithNameValue(java.lang.String,java.util.Set,java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean contains(java.lang.Object)>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$EntrySet: java.lang.Object[] toArray()>
<org.thymeleaf.util.ClassLoaderUtils: void <clinit>()>-><org.thymeleaf.util.ClassLoaderUtils: boolean isKnownClassLoaderAccessibleFrom(java.lang.ClassLoader,java.lang.ClassLoader)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<java.util.Collections$SynchronizedCollection: java.util.Spliterator spliterator()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Spliterator spliterator()>
<org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind,boolean,java.lang.String)>-><java.lang.Object: void <init>()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore$TokenExpiry: void <init>(java.lang.String,java.util.Date)>-><java.util.Date: long getTime()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.Collections$SetFromMap: boolean remove(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<sun.reflect.UnsafeFloatFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.codehaus.jackson.map.deser.std.StdValueInstantiator: org.codehaus.jackson.map.JsonMappingException wrapException(java.lang.Throwable)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.validation.beanvalidation.SpringValidatorAdapter: void <clinit>()>-><java.util.HashSet: void <init>(int)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.thymeleaf.spring5.util.SpringVersionUtils: void <clinit>()>-><java.lang.Integer: int parseInt(java.lang.String)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.apache.tomcat.util.modeler.NoDescriptorRegistry: void <init>()>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry$NoJmxMBeanServer: void <init>(org.apache.tomcat.util.modeler.NoDescriptorRegistry$1)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.metrics.http.Outcome: void <clinit>()>-><org.springframework.boot.actuate.metrics.http.Outcome: void <init>(java.lang.String,int)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>
<com.sun.jmx.mbeanserver.MBeanSupport: void postRegister(java.lang.Boolean)>-><org.apache.catalina.util.LifecycleMBeanBase: void postRegister(java.lang.Boolean)>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder customizers(java.util.Collection)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.DelegateServiceScheduler: java.lang.String toString()>
<com.google.common.cache.LocalCache$LocalLoadingCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache$LocalManualCache: void <init>(com.google.common.cache.LocalCache,com.google.common.cache.LocalCache$1)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<sun.awt.DebugSettings: void loadNativeSettings()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.boot.actuate.health.Status: void <init>(java.lang.String,java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.p6spy.engine.common.P6Util: java.util.Map getPropertiesMap(java.util.Properties)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.apache.tomcat.util.buf.UEncoder: java.util.BitSet initialSafeChars()>-><java.util.BitSet: void <init>(int)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<sun.text.normalizer.NormalizerImpl: void <clinit>()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: long getLong(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.Predicates$NotPredicate: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection: java.lang.Object lambda$getClosedConnection$0(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.authentication.ProviderManager: void <init>(java.util.List,org.springframework.security.authentication.AuthenticationManager)>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: java.lang.Object[] toArray()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: java.lang.String getApprovalKey(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: java.lang.String getApprovalKey(java.lang.String,java.lang.String)>
<java.io.ObjectStreamClass: java.lang.Long getDeclaredSUID(java.lang.Class)>-><java.lang.reflect.Field: long getLong(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.apache.catalina.core.ApplicationContextFacade: void <init>(org.apache.catalina.core.ApplicationContext)>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.http.HttpStatus)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.aspectj.weaver.Shadow: void <clinit>()>-><org.aspectj.weaver.Shadow$Kind: void <init>(java.lang.String,int,boolean)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<org.apache.catalina.util.ContextName: java.lang.String getDisplayName()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.springframework.security.web.firewall.RequestWrapper: java.lang.String strip(java.lang.String)>-><java.util.StringTokenizer: java.lang.String nextToken()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.net.SocketPermission: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<org.springframework.web.util.HtmlCharacterEntityReferences: java.lang.String lambda$new$0(int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: void initializeAdvisorChain()>-><java.lang.String: int length()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: char charAt(int)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: short getShort(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ParameterNameReader: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: int hashCode()>-><java.lang.reflect.Field: java.lang.String getName()>
<cn.hutool.http.HttpConnection: cn.hutool.http.HttpConnection header(java.util.Map,boolean)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.xml.bind.JAXBException: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.SubList$1: boolean hasNext()>
<org.apache.tomcat.util.buf.StringCache: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<cn.hutool.core.map.CustomKeyMap: void putAll(java.util.Map)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<sun.reflect.UnsafeObjectFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.io.ObjectStreamField: void <init>(java.lang.reflect.Field,boolean,boolean)>-><java.lang.Class: boolean isPrimitive()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void <clinit>()>-><io.prometheus.client.CollectorRegistry: void <init>(boolean)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.aspectj.weaver.World: void <clinit>()>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.lang.Object getAttribute(java.lang.String)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Locale: java.lang.String toString()>
<org.aspectj.weaver.patterns.AnnotationTypePattern: void <clinit>()>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: void <init>()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setString(int,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setString(int,java.lang.String)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.apache.http.util.TextUtils: boolean containsBlanks(java.lang.CharSequence)>-><java.lang.String: char charAt(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<org.springframework.boot.autoconfigure.AutoConfigurationPackages: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.SessionAutoConfiguration: void <init>()>
<org.springframework.aop.framework.ProxyFactoryBean: void addAdvisorOnChainCreation(java.lang.Object,java.lang.String)>-><org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.Advisor namedBeanToAdvisor(java.lang.Object)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: void setInt(java.lang.Object,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.web.util.pattern.PathPattern: void <clinit>()>-><org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer parsePath(java.lang.String)>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><org.apache.catalina.core.StandardPipeline: org.apache.catalina.Valve[] getValves()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Locale: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.DefaultTokenServices: org.springframework.security.oauth2.common.OAuth2AccessToken createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.util.Date: long getTime()>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<org.springframework.aop.framework.AdvisedSupport: void addAdvisorInternal(int,org.springframework.aop.Advisor)>-><org.springframework.aop.framework.ProxyFactoryBean: void adviceChanged()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><io.netty.buffer.SwappedByteBuf: int compareTo(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.Hashtable$ValueCollection: int size()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: void addNode(java.lang.String,int)>-><org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: void addNode(org.springframework.data.redis.connection.RedisStandaloneConfiguration)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: int compareTo(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter: org.springframework.security.oauth2.provider.OAuth2Authentication extractAuthentication(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object,java.lang.Throwable)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.http.HttpHeaders: java.lang.Object remove(java.lang.Object)>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><java.util.concurrent.atomic.AtomicBoolean: void <init>()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: int compareTo(java.lang.Object)>
<org.springframework.util.CollectionUtils: void lambda$unmodifiableMultiValueMap$0(java.util.Map,java.lang.Object,java.util.List)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: byte getByte(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><cn.hutool.core.io.resource.UrlResource: java.lang.String toString()>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress,int)>-><org.apache.http.HttpHost: void <init>(java.net.InetAddress,int,java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERIA5String: java.lang.String toString()>
<org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.URL: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider doCreateConnectionProvider(io.lettuce.core.AbstractRedisClient,io.lettuce.core.codec.RedisCodec)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getReadFrom()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.config.RuntimeBeanReference: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: short getShort(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.event.Level: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<sun.reflect.UnsafeLongFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeLongFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.POJONode: boolean equals(java.lang.Object)>
<org.springframework.web.client.RestTemplate: void <init>(java.util.List)>-><org.springframework.web.client.RestTemplate: org.springframework.web.util.DefaultUriBuilderFactory initUriTemplateHandler()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.hazelcast.HazelcastServerConfiguration: void <init>()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.thymeleaf.messageresolver.AbstractMessageResolver: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONArray: com.alibaba.fastjson.JSONObject getJSONObject(int)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanInfo: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.pubsub.StatefulRedisPubSubConnection switchToPubSub()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider: io.lettuce.core.api.StatefulConnection getConnection(java.lang.Class)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><java.lang.Long: java.lang.Long valueOf(long)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.aspectj.weaver.tools.DefaultTraceFactory: org.aspectj.weaver.tools.Trace getTrace(java.lang.Class)>-><org.aspectj.weaver.tools.DefaultTrace: void <init>(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.concurrent.ConcurrentSkipListMap: void buildFromSorted(java.util.SortedMap)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.CodeSigner: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.type.SimpleType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.AttributeEntry: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.ArrayList$SubList: int size()>
<org.codehaus.jackson.map.ser.std.IndexedStringListSerializer: void serializeContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: java.lang.String toString()>
<com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector: boolean _isIncludableField(java.lang.reflect.Field)>-><java.lang.reflect.Field: boolean isSynthetic()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.SpringfoxWebMvcConfiguration: void <init>()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.DefaultTokenServices: org.springframework.security.oauth2.common.OAuth2AccessToken createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeRefreshToken(org.springframework.security.oauth2.common.OAuth2RefreshToken)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.Provider: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><java.lang.Object: void <init>()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: org.springframework.security.oauth2.provider.OAuth2Authentication readAuthentication(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.io.ObjectStreamClass$FieldReflector: void <init>(java.io.ObjectStreamField[])>-><java.lang.reflect.Field: java.lang.Class getType()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeBooleanFieldAccessorImpl: void setLong(java.lang.Object,long)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.AbstractCollection: boolean add(java.lang.Object)>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.HashSet: void <init>()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Vector: java.lang.Object set(int,java.lang.Object)>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedList: void add(int,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: void add(int,java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeContentsUsing(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.apache.tomcat.util.http.FastHttpDateFormat: void <clinit>()>-><java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
<org.aspectj.bridge.MessageUtil$3: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.serializer.JSONSerializer: void writeWithFormat(java.lang.Object,java.lang.String)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.bouncycastle.asn1.ASN1Primitive: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.Color: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool: boolean softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)>-><com.zaxxer.hikari.pool.PoolEntry: void markEvicted()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.springframework.util.CollectionUtils$MultiValueMapAdapter: boolean containsValue(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: boolean containsValue(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.type.ClassKey: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.slf4j.helpers.SubstituteLogger: boolean equals(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.DelayQueue: boolean offer(java.util.concurrent.Delayed)>-><java.util.PriorityQueue: boolean offer(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.context.annotation.MBeanExportConfiguration: void <init>()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.thymeleaf.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String)>-><org.thymeleaf.util.ClassLoaderUtils: boolean isKnownLeafClassLoader(java.lang.ClassLoader)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><reactor.util.context.ContextN: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$SynchronizedMap: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.apache.catalina.core.ApplicationContext: void <init>(org.apache.catalina.core.StandardContext)>-><org.apache.catalina.core.ApplicationSessionCookieConfig: void <init>(org.apache.catalina.core.StandardContext)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: long getExpireAfterWriteNanos()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<cn.hutool.core.map.CustomKeyMap: void putAll(java.util.Map)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<com.xkcoding.justauth.JustAuthAutoConfiguration: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: long getLong(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundryActuatorAutoConfiguration: void <init>()>
<springfox.documentation.spring.web.scanners.ApiListingReferenceScanner: void <init>()>-><java.lang.Object: void <init>()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.concurrent.DelayQueue: boolean offer(java.util.concurrent.Delayed)>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.RenderingHints$Key: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.BinaryNode: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<org.springframework.security.oauth2.provider.endpoint.TokenKeyEndpoint: void <init>(org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.alibaba.fastjson.serializer.JSONSerializer: void writeWithFormat(java.lang.Object,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.HikariConfig: java.lang.String getCatalog()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.Object getLast(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: byte getByte(java.lang.Object)>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.io.StringWriter: void close()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><cn.hutool.core.date.DateTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: boolean equals(java.lang.Object)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<io.micrometer.prometheus.PrometheusMeterRegistry: void onMeterRemoved(io.micrometer.core.instrument.Meter)>-><io.micrometer.prometheus.PrometheusMeterRegistry: java.util.List tagValues(io.micrometer.core.instrument.Meter$Id)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: boolean equals(java.lang.Object)>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientName()>
<javax.servlet.DispatcherType: javax.servlet.DispatcherType valueOf(java.lang.String)>-><java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean isFilterMatch(java.lang.Class,org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean)>-><org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointDiscoverer: boolean isEndpointExposed(java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<reactor.core.scheduler.SchedulerTask: void setFuture(java.util.concurrent.Future)>-><java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: boolean cancel(boolean)>
<com.google.common.collect.TransformedIterator: void remove()>-><io.micrometer.core.instrument.Tags$ArrayIterator: void remove()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.AbstractMap$1: int size()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void add(org.springframework.security.config.annotation.SecurityConfigurer)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><java.lang.reflect.AccessibleObject: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry$UrlMapping: org.springframework.security.web.util.matcher.RequestMatcher getRequestMatcher()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.ObjectProvider)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><reactor.core.Fuseable$QueueSubscription: boolean add(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.node.BinaryNode: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.asm.Type: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: void unregisterMBean(javax.management.ObjectName)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.IdentityHashMap$EntrySet: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: void <init>()>
<springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.alibaba.fastjson.parser.ParserConfig: java.lang.Class checkAutoType(java.lang.String,java.lang.Class,int)>-><java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration$ReactiveTraceFilterConfiguration: void <init>()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.aspectj.bridge.IMessageHandler: void <clinit>()>-><java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.JsonMappingException instantiationException(java.lang.Class,java.lang.Throwable)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.DoubleNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.ClassKey: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed poll()>-><java.util.PriorityQueue: java.lang.Object peek()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getSingletonInstance()>-><org.springframework.aop.framework.AdvisedSupport: java.lang.Class getTargetClass()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: java.lang.String lambda$encode$2(java.nio.charset.Charset,java.lang.String,org.springframework.web.util.HierarchicalUriComponents$Type)>-><org.springframework.web.util.HierarchicalUriComponents: java.lang.String encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.util.Calendar: int compareTo(java.lang.Object)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardContext: void <init>()>-><org.apache.catalina.util.ErrorPageSupport: void <init>()>
<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addFieldMixIns(java.lang.Class,java.lang.Class,java.util.Map)>-><java.lang.reflect.Field: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.http.pool.RouteSpecificPool: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.HashSet: int size()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: void initInternal()>-><org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object,java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setDate(int,java.sql.Date,java.util.Calendar)>
<org.apache.catalina.util.ErrorPageSupport: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.wf.captcha.utils.GifEncoder: void writePalette()>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.ui.freemarker.FreeMarkerConfigurationFactory: freemarker.template.Configuration createConfiguration()>-><freemarker.template.Configuration: freemarker.template.ObjectWrapper getObjectWrapper()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><java.util.AbstractList$Itr: boolean hasNext()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: void setInt(java.lang.Object,int)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.cglib.core.MethodInfo: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.codehaus.jackson.util.ByteArrayBuilder: byte[] toByteArray()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<com.p6spy.engine.spy.P6ModuleManager: void <init>()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setBoolean(int,boolean)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setBoolean(int,boolean)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><javax.management.ObjectName: int compareTo(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<org.apache.tomcat.util.http.FastHttpDateFormat: void <clinit>()>-><org.apache.tomcat.util.http.ConcurrentDateFormat: void <init>(java.lang.String,java.util.Locale,java.util.TimeZone)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.EnumMap$Values: boolean remove(java.lang.Object)>
<org.apache.catalina.core.StandardContext: void <init>()>-><javax.management.NotificationBroadcasterSupport: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection: java.util.Spliterator spliterator()>-><java.util.concurrent.LinkedBlockingQueue: java.util.Spliterator spliterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.util.Pair: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERUniversalString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<cn.hutool.http.HttpConnection: cn.hutool.http.HttpConnection header(java.util.Map,boolean)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.net.InMemoryCookieStore: void getInternal2(java.util.List,java.util.Map,java.lang.Comparable,boolean)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.apache.catalina.core.StandardContext: void <init>()>-><org.apache.catalina.core.ContainerBase: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber: int size()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.EnumMap: int entryHashCode(int)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: java.lang.String getPoolName()>
<org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager: void checkClientDetails(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.client.resource.OAuth2AccessDeniedException: void <init>(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.springframework.web.servlet.function.RequestPredicates$HeadersPredicate: void <init>(java.util.function.Predicate)>-><java.lang.Object: void <init>()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries: java.util.Iterator iterator()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.introspect.POJOPropertyBuilder: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.aop.framework.AdvisedSupport: void copyConfigurationFrom(org.springframework.aop.framework.AdvisedSupport,org.springframework.aop.TargetSource,java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.text.DigitList: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<com.p6spy.engine.common.P6Util: java.lang.String joinNullSafe(java.util.Collection,java.lang.String)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.jar.Attributes: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.apache.catalina.connector.Response: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.util.concurrent.Queues$ZeroQueue: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap: void <init>(java.util.Map)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.aspectj.weaver.patterns.AnyAnnotationTypePattern: void <init>()>-><org.aspectj.weaver.patterns.AnnotationTypePattern: void <init>()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.lang.StringBuilder: void <init>()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.core.Fuseable$QueueSubscription: java.lang.Object[] toArray(java.lang.Object[])>
<org.thymeleaf.util.ClassLoaderUtils: boolean isKnownClassLoaderAccessibleFrom(java.lang.ClassLoader,java.lang.ClassLoader)>-><java.lang.ClassLoader: java.lang.ClassLoader getParent()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.FieldPosition: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$Values: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><cn.hutool.core.io.resource.UrlResource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.MonoCallableOnAssembly: java.lang.String toString()>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object remove(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.catalina.LifecycleException: void <init>()>
<springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiListingScanner getApiListingScanner()>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.node.ArrayNode: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<ch.qos.logback.core.joran.action.AppenderAction: void begin(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String,org.xml.sax.Attributes)>-><org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><io.netty.util.AbstractConstant: int compareTo(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.ClockSource$Factory: com.zaxxer.hikari.util.ClockSource create()>-><com.zaxxer.hikari.util.ClockSource$MillisecondClockSource: void <init>()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.x509.Extension: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer getConfigurer(java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.util.stream.Stream orderedStream()>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.util.stream.Stream resolveStream(boolean)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$SynchronizedCollection: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.time.LocalDate: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.OptionalLong: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.LegacyHealthEndpointAdaptersConfiguration: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.util.MimeType: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeIntegerFieldAccessorImpl: int getInt(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer: org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey createOperationKey(org.springframework.boot.actuate.endpoint.Operation)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERUTF8String: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroupMember: int compareTo(java.lang.Object)>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<org.springframework.security.web.firewall.RequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>-><java.lang.String: int length()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String getClassName(javax.management.DynamicMBean)>-><com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: javax.management.MBeanInfo getMBeanInfo()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.lang.ProcessEnvironment$StringKeySet: boolean remove(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.Font: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.lang.NullPointerException: void <init>()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.Message: void <init>(java.lang.String,org.aspectj.bridge.IMessage$Kind,java.lang.Throwable,org.aspectj.bridge.ISourceLocation)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.ConstraintHelper: void assertValidationAppliesToParameterSetUpCorrectly(java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap)>-><java.lang.Object: void <init>()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>
<org.apache.tomcat.util.http.FastHttpDateFormat: void <clinit>()>-><java.util.concurrent.ConcurrentHashMap: void <init>(int)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$ResourceChainCustomizerConfiguration: void <init>()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$11: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanSupport: void postDeregister()>-><org.apache.catalina.util.LifecycleMBeanBase: void postDeregister()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: long getLong(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.SessionAutoConfiguration$ReactiveSessionConfiguration$ReactiveSessionRepositoryConfiguration: void <init>()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.MBeanNotificationInfo: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.introspect.POJOPropertyBuilder: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isStartTls()>
<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.Advisor namedBeanToAdvisor(java.lang.Object)>-><org.springframework.aop.framework.AopConfigException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.aspectj.weaver.patterns.AnyTypePattern: void <init>()>-><org.aspectj.weaver.patterns.TypePattern: void <init>(boolean,boolean,org.aspectj.weaver.patterns.TypePatternList)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><com.alibaba.fastjson.JSONObject: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.session.InvalidSessionStrategy getInvalidSessionStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.web.server.header.CacheControlServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter build()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache: void <clinit>()>-><java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeStaticObjectFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<com.fasterxml.jackson.databind.type.CollectionType: void <init>(com.fasterxml.jackson.databind.type.TypeBase,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: void <init>(com.fasterxml.jackson.databind.type.TypeBase,com.fasterxml.jackson.databind.JavaType)>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.String: int length()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.OptionalLong: boolean equals(java.lang.Object)>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.Predicates$AndPredicate: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><com.p6spy.engine.common.CustomHashedHashSet: boolean remove(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.web.client.RestTemplate: void <init>(java.util.List)>-><org.springframework.web.client.RestTemplate$HeadersExtractor: void <init>(org.springframework.web.client.RestTemplate$1)>
<org.springframework.objenesis.instantiator.util.UnsafeUtils: void <clinit>()>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object remove(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration: void <init>(java.util.Map,org.springframework.beans.factory.ObjectProvider)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.google.common.base.Suppliers$SupplierOfInstance: void <init>(java.lang.Object)>-><java.lang.Object: void <init>()>
<java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$4: java.lang.String toString()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: long getLong(java.lang.Object)>
<cn.hutool.core.lang.Console: void log(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.aspectj.weaver.BCException: void printStackTrace()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object,java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: boolean supports(java.lang.Class)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.lang.String lambda$processMap$0(org.springframework.security.web.util.matcher.RequestMatcher)>-><java.lang.StringBuilder: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.util.List split(java.lang.CharSequence,char,int,boolean,boolean)>-><java.nio.CharBuffer: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.config.annotation.web.configuration.OAuth2ClientConfiguration$OAuth2ClientContextConfiguration: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.HashMap$EntrySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.xml.bind.JAXBException: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.ui.freemarker.FreeMarkerConfigurationFactory: freemarker.template.Configuration createConfiguration()>-><freemarker.template.Configuration: void setSettings(java.util.Properties)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Collections$SynchronizedList: java.lang.Object set(int,java.lang.Object)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void setAllowCredentials(java.lang.Boolean)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: int getInt(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: long getLong(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<reactor.util.function.Tuple2: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.Font: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.awt.SunHints$Key: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.DoubleNode: boolean equals(java.lang.Object)>
<io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField: void <clinit>()>-><sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: void <init>()>-><java.util.Hashtable: void <init>()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: void setInt(java.lang.Object,int)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.OffsetDateTime: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.Enhancer: java.lang.Object wrapCachedClass(java.lang.Class)>-><java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
<com.google.common.collect.TransformedIterator: void remove()>-><javax.print.MimeType$ParameterMapEntrySetIterator: void remove()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: void setInt(java.lang.Object,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.HttpCookie: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress)>-><org.apache.http.HttpHost: void <init>(java.net.InetAddress,int,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.MonthDay: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setDate(int,java.sql.Date,java.util.Calendar)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setDate(int,java.sql.Date,java.util.Calendar)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.SessionAutoConfiguration$ReactiveSessionConfiguration: void <init>()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.CloudFoundrySecurityInterceptor: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><org.apache.tomcat.util.modeler.AttributeInfo: void <init>()>
<com.google.common.cache.CacheBuilder$1: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource freshTargetSource()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Vector: int size()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: int compareTo(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.HashMap$EntrySet: int size()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: long getLong(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.aop.framework.ProxyCreatorSupport: void adviceChanged()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.google.common.cache.LocalCache: boolean recordsWrite()>-><com.google.common.cache.LocalCache: boolean refreshes()>
<org.springframework.boot.actuate.web.trace.reactive.HttpTraceWebFilter: void <clinit>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.context.support.ApplicationListenerDetector: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.List toImmutableList(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.core.publisher.FluxIterable$IterableSubscription: int size()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: void initInternal()>-><org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: int getUpdateCount()>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: int getUpdateCount()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Character$Subset: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.nio.charset.Charset: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.BitSet: boolean equals(java.lang.Object)>
<com.google.common.base.Equivalence$Equals: void <init>()>-><com.google.common.base.Equivalence: void <init>()>
<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext: void checkUnresolvedObjectId()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.RedisSessionConfiguration: void <init>()>
<register-finalize <org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.JvmMetricsAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.lang.Boolean: int compareTo(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes: void <clinit>()>-><org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes: void <init>(java.lang.String[])>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1UTCTime: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: java.lang.Object getAttribute(java.lang.String)>-><javax.management.MBeanException: void <init>(java.lang.Exception,java.lang.String)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<register-finalize <com.google.common.cache.LocalCache$Strength: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.util.UriComponentsBuilder: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration: void <init>()>
<io.micrometer.core.instrument.MeterRegistry: java.lang.String getConventionName(io.micrometer.core.instrument.Meter$Id)>-><io.micrometer.core.instrument.MeterRegistry: io.micrometer.core.instrument.MeterRegistry$Config config()>
<org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases: boolean lambda$getNameForAlias$1(org.springframework.boot.context.properties.source.ConfigurationPropertyName,java.util.Map$Entry)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<reactor.util.function.Tuple2: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><java.util.HashSet: void <init>()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.springframework.boot.actuate.health.HealthComponent: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void addClassIfExists(java.util.List,java.lang.String)>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.ZoneId: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void removeListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void initialize()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.commons.pool2.BaseObject: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<java.net.InMemoryCookieStore: void getInternal2(java.util.List,java.util.Map,java.lang.Comparable,boolean)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.www.BasicAuthenticationFilter: void setAuthenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.servlet.WebMvcMetricsAutoConfiguration: void <init>(org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<org.apache.catalina.core.ApplicationSessionCookieConfig: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getSingletonInstance()>-><org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource freshTargetSource()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.imageio.ImageTypeSpecifier$Interleaved: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setBigDecimal(int,java.math.BigDecimal)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.session.DelegatingIndexResolver: java.util.Map resolveIndexesFor(org.springframework.session.Session)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)>-><java.lang.StringBuilder: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String,org.springframework.expression.ParserContext)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: long getLong(java.lang.Object)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeIntegerFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<reactor.core.scheduler.Schedulers: java.lang.Object scanExecutor(java.util.concurrent.Executor,reactor.core.Scannable$Attr)>-><java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.base.Suppliers$SupplierOfInstance: java.lang.Object get()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.boot.actuate.metrics.http.Outcome: void <init>(java.lang.String,int)>-><java.lang.Enum: java.lang.String name()>
<com.google.common.cache.CacheBuilder$NullListener: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeCharacterFieldAccessorImpl: int getInt(java.lang.Object)>
<org.aspectj.bridge.MessageUtil$11: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.aspectj.bridge.IMessage$Kind: void <init>(java.lang.String,int)>-><java.lang.Object: void <init>()>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.aspectj.weaver.UnresolvedType: void <clinit>()>-><org.aspectj.weaver.UnresolvedType: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore$TokenExpiry: void <init>(java.lang.String,java.util.Date)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.util.DerValue: java.lang.String toString()>
<cn.hutool.core.bean.BeanDesc$PropDesc: java.lang.String getFieldName()>-><java.lang.reflect.Field: java.lang.String getName()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void doAcquireShared(int)>-><java.util.concurrent.Semaphore$FairSync: int tryAcquireShared(int)>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: void seal()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet: boolean remove(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.objenesis.instantiator.util.UnsafeUtils: void <clinit>()>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.alibaba.fastjson.JSONObject: java.util.Set entrySet()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeRefreshToken(org.springframework.security.oauth2.common.OAuth2RefreshToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String getValue()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterDefaultReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeDoubleFieldAccessorImpl: int getInt(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERT61String: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getObject()>-><org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getSingletonInstance()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><com.alibaba.fastjson.JSONArray: boolean add(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.aspectj.bridge.MessageUtil$9: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.springframework.core.annotation.MergedAnnotationCollectors: void lambda$toAnnotationSet$0(java.util.ArrayList,org.springframework.core.annotation.MergedAnnotation)>-><org.springframework.core.annotation.AbstractMergedAnnotation: java.lang.annotation.Annotation synthesize()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Vector$Itr: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.type.JavaType modifySecondaryTypesByAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><org.springframework.boot.actuate.health.Health$Builder: org.springframework.boot.actuate.health.Status access$000(org.springframework.boot.actuate.health.Health$Builder)>
<reactor.core.publisher.FluxIterable: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: java.lang.String toString()>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: java.util.Set addCandidateComponentsFromIndex(org.springframework.context.index.CandidateComponentsIndex,java.lang.String)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<io.netty.util.internal.ReflectionUtil: java.lang.Throwable trySetAccessible(java.lang.reflect.AccessibleObject,boolean)>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<org.aspectj.util.FuzzyBoolean: void <clinit>()>-><org.aspectj.util.FuzzyBoolean$NoFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><org.springframework.util.MimeType: java.lang.String getSubtype()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.modules.ModelerSource getModelerSource(java.lang.String)>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object,java.lang.Object,int,int[])>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeDoubleFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.HashMap$EntrySet: boolean remove(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeShortFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeShortFieldAccessorImpl: short getShort(java.lang.Object)>
<org.springframework.boot.actuate.context.ShutdownEndpoint: void <clinit>()>-><java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext$1: void unregistered()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.util.MimeType: java.lang.String toString()>
<java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><org.apache.tomcat.util.modeler.AttributeInfo: void setWriteable(boolean)>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<org.codehaus.jackson.map.deser.SettableBeanProperty: void _throwAsIOE(java.lang.Exception,java.lang.Object)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.String: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractCollection: java.lang.String toString()>
<org.apache.catalina.security.SecurityUtil: void <clinit>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.lang.Enum: int compareTo(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeySet: void forEach(java.util.function.Consumer)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$EntrySet: int size()>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>-><org.springframework.data.redis.connection.lettuce.LettucePoolingConnectionProvider: void release(io.lettuce.core.api.StatefulConnection)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Arrays$ArrayList: int size()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder maximumExpectedValue(java.lang.Long)>
<reactor.util.function.Tuple2: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.ConnectableFluxOnAssembly: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.time.Duration: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyResultSet: java.lang.String getString(int)>-><com.zaxxer.hikari.pool.ProxyResultSet: java.sql.SQLException checkException(java.sql.SQLException)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>-><java.util.ArrayList: boolean isEmpty()>
<sun.reflect.UnsafeDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void ensureObj(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.String)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void initialize()>-><com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: void addClassLoader(java.lang.ClassLoader)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaultLogoutSuccessHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler: void <init>(org.springframework.http.HttpStatus)>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: boolean isCandidateComponent(org.springframework.core.type.classreading.MetadataReader)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><java.lang.reflect.Field: java.lang.String getName()>
<org.springframework.aop.framework.JdkDynamicAopProxy: int hashCode()>-><org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: int hashCode()>
<java.util.concurrent.Executors$RunnableAdapter: java.lang.Object call()>-><com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber: int size()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: void <init>()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><io.netty.buffer.AbstractByteBuf: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.math.BigInteger: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory getDefaultFactory()>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: void <clinit>()>-><org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker: org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer getDataSourceInitializer()>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfUnique()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<cn.hutool.core.map.CustomKeyMap: void putAll(java.util.Map)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.data.util.TypeVariableTypeInformation: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.util.ReflectionUtils: boolean isPublicStaticFinal(java.lang.reflect.Field)>-><java.lang.reflect.Field: int getModifiers()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.LinkedList: java.lang.Object get(int)>
<org.apache.catalina.core.StandardPipeline: org.apache.catalina.Valve[] getValves()>-><org.apache.catalina.valves.ValveBase: org.apache.catalina.Valve getNext()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSON: java.lang.String toString()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><java.util.concurrent.locks.ReentrantLock: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$EmptyList: java.lang.Object[] toArray(java.lang.Object[])>
<org.aspectj.weaver.ResolvedType$FieldGetter: void <init>(org.aspectj.weaver.ResolvedType$1)>-><org.aspectj.weaver.ResolvedType$FieldGetter: void <init>()>
<com.zaxxer.hikari.util.ConcurrentBag: boolean reserve(com.zaxxer.hikari.util.ConcurrentBag$IConcurrentBagEntry)>-><com.zaxxer.hikari.pool.PoolEntry: boolean compareAndSet(int,int)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache$LocalLoadingCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.mapping.model.Property: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionPresentCondition: boolean passes()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getPatterns()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.AbstractCollection: boolean remove(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void transfer(byte,java.nio.ByteBuffer)>-><org.apache.catalina.connector.OutputBuffer: void toReadMode(java.nio.Buffer)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.MBeanConstructorInfo: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(boolean)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder percentilePrecision(java.lang.Integer)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$RequestMappingInfoHandlerMappingDescriptionProvider: void <init>(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.ArrayNode: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriberRegistrar: java.util.Map getContextAttributes()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletResponse getResponse()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer removeConfigurer(java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><com.google.common.base.Joiner$3: int size()>
<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: int hashCode()>-><org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>-><io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><org.springframework.boot.web.servlet.support.ErrorPageFilter: void addClassIfPresent(java.util.Collection,java.lang.String)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Date: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Null: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.PropertyValue: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.Hashtable$EntrySet: boolean add(java.lang.Object)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeLongFieldAccessorImpl: void setLong(java.lang.Object,long)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.OffsetTime: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<io.micrometer.prometheus.PrometheusMeterRegistry: java.util.List tagValues(io.micrometer.core.instrument.Meter$Id)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.invoke.LambdaForm: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource freshTargetSource()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.util.ClassTypeInformation: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.JsonMappingException$Reference: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.LinkedHashMap$LinkedValues: int size()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Calendar: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.LocalDate: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.WeakHashMap: boolean isEmpty()>
<java.util.stream.Streams$ConcatSpliterator: long estimateSize()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: long estimateSize()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<io.micrometer.core.util.internal.logging.JdkLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>-><java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><com.google.common.base.Joiner$3: int size()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: void setInt(java.lang.Object,int)>
<org.springframework.data.util.TypeDiscoverer: java.util.Optional getPropertyInformation(java.lang.String)>-><java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<io.micrometer.prometheus.PrometheusMeterRegistry: java.util.List tagValues(io.micrometer.core.instrument.Meter$Id)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeStaticByteFieldAccessorImpl: long getLong(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.StringBuffer: java.lang.String toString()>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.catalina.LifecycleState: boolean isAvailable()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.calendar.Era: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline getPipeline()>
<reactor.util.Loggers$ConsoleLogger: void warn(java.lang.String,java.lang.Throwable)>-><org.aspectj.weaver.BCException: void printStackTrace(java.io.PrintStream)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.aspectj.bridge.IMessageHandler: void <clinit>()>-><org.aspectj.bridge.MessageWriter: void <init>(java.io.PrintWriter,boolean)>
<me.zhyd.oauth.request.AuthDefaultRequest: me.zhyd.oauth.model.AuthResponse responseError(java.lang.Exception)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: boolean supports(java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.aspectj.bridge.IMessage$Kind$1: void <init>()>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.cache.LocalCache: boolean usesAccessQueue()>-><com.google.common.cache.LocalCache: boolean evictsBySize()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfacesForClass(java.lang.Class,java.lang.ClassLoader)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void unregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeLongFieldAccessorImpl: void setInt(java.lang.Object,int)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: void forEach(java.util.function.Consumer)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTime(int,java.sql.Time,java.util.Calendar)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setTime(int,java.sql.Time,java.util.Calendar)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.csrf.CsrfFilter: void setRequireCsrfProtectionMatcher(org.springframework.security.web.util.matcher.RequestMatcher)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeByteFieldAccessorImpl: long getLong(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.StringJoiner: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.zaxxer.hikari.pool.HikariPool: void fillPool()>-><com.zaxxer.hikari.pool.HikariPool: int getTotalConnections()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.apache.http.util.TextUtils: boolean containsBlanks(java.lang.CharSequence)>-><java.lang.String: int length()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<sun.reflect.UnsafeStaticByteFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><com.alibaba.fastjson.JSONObject: int size()>
<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$ByteDeser: byte[] handleSingleElementUnwrapped(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.fasterxml.jackson.databind.JsonDeserializer: java.lang.Object getNullValue(com.fasterxml.jackson.databind.DeserializationContext)>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.modeler.Registry: void <init>()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.aspectj.weaver.UnresolvedType$TypeKind: void <clinit>()>-><org.aspectj.weaver.UnresolvedType$TypeKind: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.OffsetDateTime: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.time.OffsetTime: int compareTo(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration: void <init>()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean remove(java.lang.Object)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider: void release(io.lettuce.core.api.StatefulConnection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.font.AttributeValues: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1ObjectIdentifier: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Year: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTime(int,java.sql.Time)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: boolean equals(java.lang.Object)>
<org.springframework.web.filter.ForwardedHeaderFilter: void <clinit>()>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.Point: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.nio.charset.Charset: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.PermissionCollection: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jms.artemis.ArtemisConnectionFactoryConfiguration: void <init>()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerByLookup(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.time.Year: int compareTo(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><io.micrometer.core.instrument.Tag: int compareTo(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.time.LocalDateTime: int compareTo(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<com.google.common.cache.LocalCache: boolean recordsAccess()>-><com.google.common.cache.LocalCache: boolean expiresAfterAccess()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><java.lang.String: int length()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getObject()>-><org.springframework.aop.framework.ProxyFactoryBean: boolean isSingleton()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: void remove()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: void remove()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder expiry(java.time.Duration)>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig: java.time.Duration access$602(io.micrometer.core.instrument.distribution.DistributionStatisticConfig,java.time.Duration)>
<java.util.AbstractSet: int hashCode()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.MiscCodec: void writeIterator(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.SerializeWriter,java.util.Iterator)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.boot.context.properties.source.SystemEnvironmentPropertyMapper: java.lang.CharSequence processElementValue(java.lang.CharSequence)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.spel.SpelEvaluationException: void <init>(java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.ArrayList$Itr: boolean hasNext()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>-><org.slf4j.helpers.SubstituteLogger: java.lang.String getName()>
<org.springframework.web.servlet.FrameworkServlet: void <init>(org.springframework.web.context.WebApplicationContext)>-><java.util.ArrayList: void <init>()>
<com.zaxxer.hikari.pool.ProxyResultSet: java.sql.SQLException checkException(java.sql.SQLException)>-><com.zaxxer.hikari.pool.ProxyConnection: java.sql.SQLException checkException(java.sql.SQLException)>
<org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: int compareTo(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<org.springframework.boot.validation.MessageInterpolatorFactory: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>
<de.codecentric.boot.admin.client.registration.ServletApplicationFactory: void <init>(de.codecentric.boot.admin.client.config.InstanceProperties,org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties,org.springframework.boot.autoconfigure.web.ServerProperties,javax.servlet.ServletContext,org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints,org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties,de.codecentric.boot.admin.client.registration.metadata.MetadataContributor,org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath)>-><de.codecentric.boot.admin.client.registration.DefaultApplicationFactory: void <init>(de.codecentric.boot.admin.client.config.InstanceProperties,org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties,org.springframework.boot.autoconfigure.web.ServerProperties,org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints,org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties,de.codecentric.boot.admin.client.registration.metadata.MetadataContributor)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><reactor.util.concurrent.SpscArrayQueue: boolean add(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.TreeSet: int size()>
<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.HikariConfig: long getLeakDetectionThreshold()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setNull(java.sql.PreparedStatement,int,int,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNull(int,int,java.lang.String)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind)>-><org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind,boolean)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setDate(int,java.sql.Date)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setDate(int,java.sql.Date)>
<org.thymeleaf.TemplateEngine: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<sun.reflect.UnsafeIntegerFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoDefaultConfiguration: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeShortFieldAccessorImpl: void setInt(java.lang.Object,int)>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$1: void <init>(java.lang.String,int)>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.MonthDay: java.lang.String toString()>
<springfox.documentation.spring.web.paths.PathMappingDecorator: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.security.web.access.AccessDeniedHandlerImpl: void <init>()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object,int)>
<org.aspectj.weaver.World: void <clinit>()>-><org.aspectj.weaver.BCException: void printStackTrace()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: int getInt(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeByteFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.ProcessEnvironment$StringValues: int size()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.redis.connection.RedisNode: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void unregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: javax.management.ObjectName cloneObjectName(javax.management.ObjectName)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.apache.catalina.util.LifecycleBase: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.google.common.cache.CacheBuilder$NullListener: void <clinit>()>-><com.google.common.cache.CacheBuilder$NullListener: void <init>(java.lang.String,int)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeStaticByteFieldAccessorImpl: int getInt(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.springframework.boot.jta.bitronix.PoolingDataSourceBean: void <init>()>-><bitronix.tm.resource.jdbc.PoolingDataSource: void setAllowLocalTransactions(boolean)>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><com.google.common.base.Joiner$3: int size()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.aspectj.weaver.Member: void <clinit>()>-><org.aspectj.weaver.MemberKind: void <init>(java.lang.String,int)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: int compareTo(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void ensureObj(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.UnresolvedPermission: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple4: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.MethodParameter: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<java.util.TreeMap$Entry: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder builder()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.CodeSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.base.Joiner$3: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.Point: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.http.ResponseEntity: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$EntrySet: java.lang.Object[] toArray()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory getDefaultFactory()>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<javax.print.MimeType: void parse(java.lang.String)>-><javax.print.MimeType$LexicalAnalyzer: java.lang.String getLexeme()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.reflect.Field: int getModifiers()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.fasterxml.jackson.module.paramnames.PackageVersion: void <clinit>()>-><com.fasterxml.jackson.core.util.VersionUtil: com.fasterxml.jackson.core.Version parseVersion(java.lang.String,java.lang.String,java.lang.String)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeByteFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMeterBinderProvidersConfiguration: void <init>()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.OAuth2Request: java.lang.String getClientId()>
<com.baomidou.dynamic.datasource.DynamicDataSourceClassResolver: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.Parsed: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.ZoneId: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor: void <init>()>-><java.lang.Object: void <init>()>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$3(java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField: void <clinit>()>-><sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<org.springframework.web.method.HandlerMethod$HandlerMethodParameter: void <init>(org.springframework.web.method.HandlerMethod,int)>-><org.springframework.web.method.HandlerMethod: java.lang.reflect.Method access$000(org.springframework.web.method.HandlerMethod)>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager: void checkClientDetails(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.lang.StringBuilder: void <init>()>
<org.apache.catalina.valves.ValveBase: void startInternal()>-><org.apache.catalina.util.LifecycleBase: void setState(org.apache.catalina.LifecycleState)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<sun.reflect.UnsafeCharacterFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeCharacterFieldAccessorImpl: char getChar(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: java.lang.String lambda$encodeTemplate$1(java.nio.charset.Charset,java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents: java.lang.String encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><java.lang.reflect.Field: int getModifiers()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONPObject: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder,org.springframework.boot.actuate.health.Health$1)>-><org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration: void <init>()>
<org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.misc.Signal: java.lang.String toString()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,boolean,boolean)>-><com.sun.jmx.mbeanserver.Repository: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<ch.qos.logback.core.joran.action.ConversionRuleAction: void begin(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String,org.xml.sax.Attributes)>-><org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><org.aspectj.weaver.tools.TraceFactory: boolean getBoolean(java.lang.String,boolean)>
<org.apache.catalina.core.ApplicationContext: void populateSessionTrackingModes()>-><java.util.RegularEnumSet: boolean add(java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: void setLong(java.lang.Object,long)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection: java.sql.Connection getClosedConnection()>-><java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeStaticLongFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.security.web.csrf.CsrfLogoutHandler: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object resolveMultipleBeans(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)>-><java.util.concurrent.CopyOnWriteArrayList: void sort(java.util.Comparator)>
<register-finalize <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>
<sun.awt.DebugSettings: java.lang.String toString()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Hashtable$ValueCollection: int size()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>
<com.sun.jmx.mbeanserver.MBeanSupport: void postDeregister()>-><com.sun.jmx.mbeanserver.StandardMBeanSupport: void unregister()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.pubsub.StatefulRedisPubSubConnection switchToPubSub()>-><org.springframework.data.redis.connection.lettuce.StaticMasterReplicaConnectionProvider: io.lettuce.core.api.StatefulConnection getConnection(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthEndpointReactiveWebExtensionConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: boolean remove(javax.management.ObjectName,java.lang.ClassLoader)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<register-finalize <org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.calendar.Era: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean equals(java.lang.Object)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>-><java.lang.Object: java.lang.Class getClass()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<com.fasterxml.jackson.core.util.JsonParserSequence: com.fasterxml.jackson.core.JsonToken switchAndReturnNext()>-><com.fasterxml.jackson.core.util.JsonParserDelegate: com.fasterxml.jackson.core.JsonToken nextToken()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.http.client.support.InterceptingHttpAccessor: void setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)>-><org.springframework.http.client.support.HttpAccessor: void setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeShortFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<org.springframework.util.ReflectionUtils: void setField(java.lang.reflect.Field,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
<org.aspectj.weaver.UnresolvedType: void <clinit>()>-><org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forSignature(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.http.ReadOnlyHttpHeaders: java.util.Set entrySet()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.Reflection: java.lang.Class getCallerClass()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<com.p6spy.engine.spy.P6ModuleManager: void loadDriversExplicitly(com.p6spy.engine.spy.P6SpyLoadableOptions)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl createComposingConstraintDescriptor(org.hibernate.validator.internal.metadata.core.ConstraintHelper,java.lang.reflect.Member,java.util.Map,int,java.lang.annotation.Annotation,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ConstraintType)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.List toImmutableList(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.thymeleaf.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String)>-><org.thymeleaf.util.ClassLoaderUtils: java.lang.ClassLoader getThreadContextClassLoader()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeByteFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMetricsRegistrarConfiguration: void <init>(io.micrometer.core.instrument.MeterRegistry,java.util.Collection,java.util.Map)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl createComposingConstraintDescriptor(org.hibernate.validator.internal.metadata.core.ConstraintHelper,java.lang.reflect.Member,java.util.Map,int,java.lang.annotation.Annotation,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ConstraintType)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.Collections: java.util.Set singleton(java.lang.Object)>
<com.p6spy.engine.common.P6Util: java.util.Map getPropertiesMap(java.util.Properties)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.RemovalListener getRemovalListener()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<javax.management.ObjectName: void <init>(java.lang.String,java.util.Hashtable)>-><java.lang.Object: void <init>()>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.springframework.core.task.SimpleAsyncTaskExecutor: void <init>(java.lang.String)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.wf.captcha.utils.GifEncoder: boolean finish()>-><org.apache.catalina.connector.CoyoteOutputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<org.springframework.security.web.access.DelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>-><org.springframework.util.Assert: void notEmpty(java.util.Map,java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.session.DelegatingIndexResolver: java.util.Map resolveIndexesFor(org.springframework.session.Session)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.IdentityHashMap: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Currency: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNull(int,int,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNull(int,int,java.lang.String)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$EmptyList: int size()>
<org.springframework.security.oauth2.provider.token.DefaultTokenServices: int getAccessTokenValiditySeconds(org.springframework.security.oauth2.provider.OAuth2Request)>-><org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>
<org.springframework.web.client.RestTemplate: void <init>(org.springframework.http.client.ClientHttpRequestFactory)>-><org.springframework.http.client.support.InterceptingHttpAccessor: void setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)>
<org.springframework.boot.SpringBootExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>-><reactor.core.scheduler.ReactorThreadFactory: void uncaughtException(java.lang.Thread,java.lang.Throwable)>
<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.reflect.Method: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.Provider$UString: java.lang.String toString()>
<org.aspectj.weaver.ResolvedType$FieldGetter: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.catalina.core.StandardContextValve: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.aspectj.weaver.patterns.TypePattern: void <clinit>()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Boolean: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander getModelAttributeParameterExpander()>
<com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory: void _loadAndSet(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context,com.alibaba.fastjson.asm.MethodVisitor,com.alibaba.fastjson.util.FieldInfo)>-><java.lang.reflect.Field: java.lang.String getName()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.GregorianCalendar: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<java.util.TreeMap: java.util.TreeMap$Entry getEntryUsingComparator(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$2: int compare(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.lang.System: long currentTimeMillis()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$3(java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void init()>-><org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.ParameterizedTypeInformation: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: int compareTo(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundrySecurityService$1: void <init>()>-><org.springframework.core.ParameterizedTypeReference: void <init>()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap: void buildFromSorted(java.util.SortedMap)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.springframework.web.util.HierarchicalUriComponents: void verifyUriComponent(java.lang.String,org.springframework.web.util.HierarchicalUriComponents$Type)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.Point: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.springframework.util.MimeType: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.FluxCreate$DropAsyncSink: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.crypto.CryptoPermission: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(boolean)>-><java.lang.Boolean: java.lang.String toString(boolean)>
<springfox.documentation.spring.web.scanners.ApiDescriptionLookup: void <init>()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: void <init>(java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.reflect.Field: int getModifiers()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.util.Assert: void isTrue(boolean,java.util.function.Supplier)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>
<java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: void <init>(java.lang.String,int)>-><java.util.ArrayList: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: short getShort(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore: void removeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: java.lang.String getValue()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerOpaqueTokenConfiguration$OpaqueTokenIntrospectionClientConfiguration: void <init>()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager createDefaultAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.access.vote.AffirmativeBased: void <init>(java.util.List)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<org.thymeleaf.util.ClassLoaderUtils: java.lang.ClassLoader getThreadContextClassLoader()>-><java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<java.util.Spliterators$ArraySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Type: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection: java.sql.Connection getClosedConnection()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.core.ApplicationContext: void <init>(org.apache.catalina.core.StandardContext)>-><org.apache.catalina.core.ApplicationContext: void populateSessionTrackingModes()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.KeyspaceEventMessageListener: void init()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisConnection getConnection()>
<org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Locale)>-><org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String getAttribute()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Object)>
<java.net.InMemoryCookieStore: void getInternal1(java.util.List,java.util.Map,java.lang.String,boolean)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.net.URI: int compareTo(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext makeResourceContextFor(java.lang.Object,javax.management.ObjectName)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<reactor.util.function.Tuple4: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.logging.log4j.spi.Provider: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeByteFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><com.google.common.base.Joiner$3: int size()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: javax.management.ObjectName cloneObjectName(javax.management.ObjectName)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object castToJavaBean(java.util.Map,java.lang.Class,com.alibaba.fastjson.parser.ParserConfig)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.support.GenericBeanDefinition: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress,java.lang.String,int,java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.core.ContainerBase: java.lang.String getLogName()>-><org.apache.catalina.core.ContainerBase: java.lang.String getName()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<reactor.util.function.Tuple4: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<cn.hutool.http.HttpBase: java.lang.Object header(java.lang.String,java.lang.String,boolean)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.NoOpReactiveSessionConfiguration: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.BasicPermission: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><org.aspectj.weaver.tools.TraceFactory: boolean getBoolean(java.lang.String,boolean)>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,boolean,boolean)>-><com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>-><java.lang.StringBuilder: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.math.BigInteger: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.ResolvableType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: org.springframework.security.oauth2.common.OAuth2AccessToken getAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.token.DefaultAuthenticationKeyGenerator: java.lang.String extractKey(org.springframework.security.oauth2.provider.OAuth2Authentication)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.x509.RDN: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: int getPropagationBehavior()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.redis.connection.util.ByteArrayWrapper: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<cn.hutool.http.HttpBase: java.lang.Object header(java.util.Map,boolean)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<java.util.stream.Streams$ConcatSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: java.util.Spliterator trySplit()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Locale: java.lang.String toString()>
<com.alibaba.fastjson.serializer.MiscCodec: void writeIterator(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.SerializeWriter,java.util.Iterator)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.math.BigInteger: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<java.net.InMemoryCookieStore: void addIndex(java.util.Map,java.lang.Object,java.net.HttpCookie)>-><java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisSocketURIAndApplySettings(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.time.Duration getCommandTimeout()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource freshTargetSource()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.LatencyUtils.TimeCappedMovingAverageIntervalEstimator: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet: int size()>
<java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings: org.springframework.boot.web.server.MimeMappings unmodifiableMappings(org.springframework.boot.web.server.MimeMappings)>-><org.springframework.boot.web.server.MimeMappings: void <init>(org.springframework.boot.web.server.MimeMappings,boolean)>
<org.aspectj.weaver.World: void <clinit>()>-><java.io.PrintStream: void println(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.AVA: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<java.io.ObjectStreamClass$FieldReflector: void setObjFieldValues(java.lang.Object,java.lang.Object[])>-><java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<cn.hutool.http.HttpBase: java.lang.String header(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><cn.hutool.core.io.resource.UrlResource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void addClassIfPresent(java.util.Collection,java.lang.String)>-><org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: int compareTo(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: void <init>()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.RDN: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.google.common.base.Ticker: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><java.lang.Object: void <init>()>
<org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.common.LiteralExpression: java.lang.String getValue(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.WeakHashMap$KeySet: int size()>
<org.aspectj.weaver.tools.TraceFactory: boolean getBoolean(java.lang.String,boolean)>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<javax.print.MimeType: void parse(java.lang.String)>-><javax.print.MimeType$LexicalAnalyzer: int getLexemeType()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy()>
<com.fasterxml.classmate.TypeResolver: void <init>(com.fasterxml.classmate.util.ResolvedTypeCache)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.lang.String lambda$processMap$0(org.springframework.security.web.util.matcher.RequestMatcher)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<com.google.common.cache.LocalCache$WriteQueue: void <init>()>-><java.util.AbstractQueue: void <init>()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.buffer.SwappedByteBuf: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<org.springframework.boot.actuate.health.Status: void <clinit>()>-><org.springframework.boot.actuate.health.Status: void <init>(java.lang.String)>
<com.p6spy.engine.common.P6Util: java.util.Map getPropertiesMap(java.util.Properties)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.LatencyUtils.TimeCappedMovingAverageIntervalEstimator: java.lang.String toString()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(double)>-><java.lang.Double: java.lang.String toString(double)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void <init>(int)>-><java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.catalina.util.LifecycleBase: void stop()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.util.context.Context0: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.IdentityHashMap: boolean isEmpty()>
<com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator: void <init>(java.util.concurrent.ScheduledExecutorService)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.font.AttributeValues: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.math.BigInteger: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.Permission: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger wrapLogger(org.slf4j.Logger)>-><io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void <init>(org.slf4j.spi.LocationAwareLogger)>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><java.lang.StringBuilder: void <init>()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyLeakTask: void <clinit>()>-><com.zaxxer.hikari.pool.ProxyLeakTask$1: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$1: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>-><com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.cert.Certificate: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.HashSet: void <init>()>
<sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<javax.print.MimeType$LexicalAnalyzer: void nextLexeme()>-><java.lang.Character: boolean isWhitespace(char)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.aop.framework.AdvisedSupport: void addInterface(java.lang.Class)>-><org.springframework.aop.framework.ProxyFactoryBean: void adviceChanged()>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$6: void <init>()>
<org.springframework.session.web.http.SessionRepositoryFilter: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration: void <init>()>-><org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>()>
<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.alibaba.fastjson.JSONArray: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.LegacyHealthEndpointCompatibilityConfiguration$LegacyReactiveHealthEndpointCompatibilityConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.misc.Unsafe: void putDouble(java.lang.Object,long,double)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.lettuce.core.event.metrics.CommandLatencyEvent: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>-><java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: int length()>
<com.google.common.collect.Maps$Values: boolean remove(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.boot.BeanDefinitionLoader: int load(java.lang.CharSequence)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.OffsetTime: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.security.x509.Extension: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.awt.image.ComponentColorModel: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>-><com.google.common.cache.CacheBuilder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><java.nio.CharBuffer: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.TreeMap$EntrySet: boolean remove(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object,java.lang.Throwable)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.regex.Pattern: java.lang.String toString()>
<org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <init>()>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration: void <init>(org.springframework.core.env.Environment)>-><org.springframework.web.context.support.StandardServletEnvironment: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<java.util.PriorityQueue: boolean offer(java.lang.Object)>-><java.lang.NullPointerException: void <init>()>
<org.thymeleaf.spring5.util.SpringVersionUtils: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.image.ColorModel: boolean equals(java.lang.Object)>
<com.google.common.cache.CacheBuilder: void checkWeightWithWeigher()>-><java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.util.HashMap$Node: java.lang.Object getValue()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.util.ParameterizedTypeInformation: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.DecimalFormat: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.ResourceLeakDetector$Record: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void unregisterComponent(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: boolean isRegistered(javax.management.ObjectName)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><com.alibaba.fastjson.util.FieldInfo: int compareTo(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<org.apache.catalina.valves.ValveBase: void initInternal()>-><org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log getLogger()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.aspectj.weaver.ResolvedPointcutDefinition: void <init>(org.aspectj.weaver.UnresolvedType,int,java.lang.String,org.aspectj.weaver.UnresolvedType[],org.aspectj.weaver.UnresolvedType,org.aspectj.weaver.patterns.Pointcut)>-><org.aspectj.weaver.ResolvedMemberImpl: void <init>(org.aspectj.weaver.MemberKind,org.aspectj.weaver.UnresolvedType,int,org.aspectj.weaver.UnresolvedType,java.lang.String,org.aspectj.weaver.UnresolvedType[])>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.Provider$UString: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><javax.security.auth.Subject$SecureSet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<javax.print.MimeType: java.lang.String toUnicodeLowerCase(java.lang.String)>-><java.lang.String: int length()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache: boolean usesWriteQueue()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.AbstractSet: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><org.springframework.web.servlet.handler.MappedInterceptor: void <init>(java.lang.String[],java.lang.String[],org.springframework.web.servlet.HandlerInterceptor)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.LinkedHashMap: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration$ServletConfiguration: void <init>()>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Object: boolean equals(java.lang.Object)>
<reactor.core.scheduler.ParallelScheduler: void <clinit>()>-><java.util.concurrent.atomic.AtomicLong: void <init>()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.math.BigDecimal: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFloatFieldAccessorImpl: int getInt(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.MonoOnAssembly: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isQueueing()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<org.thymeleaf.TemplateEngine: void addDialect(org.thymeleaf.dialect.IDialect)>-><org.thymeleaf.util.Validate: void notNull(java.lang.Object,java.lang.String)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: int getMaxTotal()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.SubList$1: boolean hasNext()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.aop.TruePointcut: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.EnumMap$EntrySet: int size()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(float)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object)>
<org.springframework.data.redis.cache.CacheKeyPrefix: java.lang.String lambda$simple$0(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<register-finalize <io.micrometer.core.instrument.Meter$Type: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.google.common.cache.CacheBuilder: void <clinit>()>-><com.google.common.cache.CacheBuilder$1: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getResource(javax.management.DynamicMBean)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void ensureObj(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void beforeInit()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.LocalTime: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.map.type.SimpleType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.CollectionType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object remove(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>
<org.apache.catalina.connector.OutputBuffer: void transfer(byte,java.nio.ByteBuffer)>-><org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>
<org.springframework.web.util.HierarchicalUriComponents$Type$7: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><java.lang.reflect.Field: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.DigitList: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$1: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.UUID: java.lang.String toString()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<com.google.common.cache.LocalCache$EntryFactory$2: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean addAll(java.util.Collection)>
<springfox.documentation.spring.web.DescriptionResolver: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<com.alibaba.fastjson.serializer.GuavaCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.beans.factory.config.DependencyDescriptor: boolean isRequired()>-><java.lang.reflect.Field: java.lang.Class getType()>
<org.aspectj.bridge.MessageUtil$6: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><org.springframework.http.HttpMethod: org.springframework.http.HttpMethod resolve(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>
<org.springframework.boot.validation.MessageInterpolatorFactory: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: void setInt(java.lang.Object,int)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: void initializeAdvisorChain()>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.ClassTypeInformation: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.lettuce.core.metrics.CommandMetrics: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.DigitList: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.pool.HikariProxyStatement: java.sql.SQLWarning getWarnings()>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><java.util.HashSet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.codehaus.jackson.map.util.ClassUtil: void throwAsIAE(java.lang.Throwable)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void lambda$new$0(org.springframework.security.core.userdetails.UserDetails)>-><org.springframework.security.authentication.DisabledException: void <init>(java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer removeConfigurer(java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Vector: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.HikariConfig: int getMinimumIdle()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration: void <init>()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERBMPString: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.net.URL: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.view.ContentNegotiatingViewResolver$1: void <init>()>-><java.lang.Object: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Object: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterNameReader: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.NullNode: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.aop.framework.AdvisedSupport: void copyConfigurationFrom(org.springframework.aop.framework.AdvisedSupport,org.springframework.aop.TargetSource,java.util.List)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: int hashCode()>-><java.lang.String: int hashCode()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerTokenServicesConfiguration$JwtTokenServicesConfiguration: void <init>(org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<org.apache.catalina.LifecycleException: void <init>(java.lang.String)>-><java.lang.Exception: void <init>(java.lang.String)>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: int getConcurrencyLevel()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: int getMinIdle()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.type.CollectionType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$ErrorAsyncSink: java.lang.String toString()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl createComposingConstraintDescriptor(org.hibernate.validator.internal.metadata.core.ConstraintHelper,java.lang.reflect.Member,java.util.Map,int,java.lang.annotation.Annotation,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ConstraintType)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.context.ShutdownEndpointAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.io.ObjectStreamClass$FieldReflector: void setObjFieldValues(java.lang.Object,java.lang.Object[])>-><java.lang.Class: java.lang.String getName()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.http.ResponseEntity: void <init>(org.springframework.http.HttpStatus)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.awt.RenderingHints$Key: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.math.BigDecimal: int compareTo(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<com.p6spy.engine.common.P6Util: java.util.Map getPropertiesMap(java.util.Properties)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.imageio.ImageTypeSpecifier: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration$SessionCleanupConfiguration: void <init>(org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration,org.springframework.session.data.redis.RedisIndexedSessionRepository)>-><synthetic.method.SingletonFactory: org.springframework.boot.autoconfigure.session.RedisSessionConfiguration$SpringBootRedisHttpSessionConfiguration getRedisSessionConfiguration$SpringBootRedisHttpSessionConfiguration()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.Rectangle: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object,java.lang.Object,int,int[])>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<org.springframework.session.MapSession: void <init>()>-><org.springframework.session.MapSession: void <init>(java.lang.String)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.type.CollectionLikeType: boolean equals(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.SubList$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERNumericString: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.awt.AppContext: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><java.lang.reflect.Field: int hashCode()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.time.Instant getLastAccessedTime()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.zaxxer.hikari.pool.ProxyLeakTask: void run()>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Object[])>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<sun.reflect.UnsafeCharacterFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.dao.DataAccessException convertLettuceAccessException(java.lang.Exception)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.ResolvableType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.alibaba.fastjson.util.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.util.Pair: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.support.GenericBeanDefinition: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<org.springframework.core.annotation.MergedAnnotationCollectors: void lambda$toAnnotationSet$0(java.util.ArrayList,org.springframework.core.annotation.MergedAnnotation)>-><io.netty.util.internal.RecyclableArrayList: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.util.GenericArrayTypeImpl: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<io.lettuce.core.masterslave.SentinelConnector: reactor.core.publisher.Mono lambda$connectAsync$0(io.lettuce.core.masterslave.SentinelTopologyRefresh,io.lettuce.core.masterslave.MasterSlaveConnectionProvider,java.lang.Runnable,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UEncoder: void <init>(org.apache.tomcat.util.buf.UEncoder$SafeCharsSet)>-><org.apache.tomcat.util.buf.UEncoder$SafeCharsSet: java.util.BitSet access$100(org.apache.tomcat.util.buf.UEncoder$SafeCharsSet)>
<org.hibernate.validator.internal.engine.path.PathImpl: void <init>(java.util.List)>-><com.google.common.base.Joiner$3: int size()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><com.google.common.base.Joiner$3: int size()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$KeySet: java.lang.Object[] toArray()>
<org.apache.tomcat.util.http.parser.SkipResult: void <clinit>()>-><org.apache.tomcat.util.http.parser.SkipResult: void <init>(java.lang.String,int)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.aspectj.weaver.tools.AbstractTrace: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<com.google.common.collect.AbstractMultimap: boolean putAll(java.lang.Object,java.lang.Iterable)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.apache.logging.log4j.spi.Provider: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: int getInt(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.StringBuffer: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<sun.reflect.UnsafeStaticShortFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeStaticShortFieldAccessorImpl: short getShort(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache$EntryFactory: com.google.common.cache.LocalCache$EntryFactory getFactory(com.google.common.cache.LocalCache$Strength,boolean,boolean)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.validation.ObjectError: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.apache.tomcat.util.http.ConcurrentDateFormat: void <init>(java.lang.String,java.util.Locale,java.util.TimeZone)>-><org.apache.tomcat.util.http.ConcurrentDateFormat: java.text.SimpleDateFormat createInstance()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeStaticShortFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.TabularType: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.apache.catalina.util.LifecycleMBeanBase: void destroyInternal()>-><org.apache.catalina.util.LifecycleMBeanBase: void unregister(javax.management.ObjectName)>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.property.bean.AccessorsProvider getAccessorsProvider()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>
<sun.net.httpserver.ContextList: sun.net.httpserver.HttpContextImpl findContext(java.lang.String,java.lang.String,boolean)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.util.Objects: int hashCode(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeBooleanFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.time.LocalTime: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.springframework.session.MapSession: java.lang.Object getAttribute(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.security.web.firewall.RequestWrapper: java.lang.String strip(java.lang.String)>-><java.lang.StringBuilder: void <init>(int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache: boolean usesWriteEntries()>-><com.google.common.cache.LocalCache: boolean usesWriteQueue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type$9: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><javax.management.ObjectName: java.lang.String getCanonicalName()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.logging.log4j.Level: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.introspect.MemberKey: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.web.ResourceProperties)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.nio.charset.Charset: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.security.CodeSigner: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.lettuce.core.RedisURI: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>-><java.lang.Double: java.lang.String toString(double)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.invoke.LambdaForm$Name: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.time.MonthDay: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>()>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicLongArray: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.springframework.data.redis.cache.RedisCacheConfiguration: byte[] lambda$registerDefaultConverters$2(java.lang.String)>-><java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.LocalTime: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type$6: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.aspectj.weaver.World: void <clinit>()>-><java.lang.Throwable: void printStackTrace()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.AbstractRedisClient createClient()>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientResources()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><springfox.documentation.spring.web.plugins.DefaultConfiguration: void <init>(springfox.documentation.spi.service.contexts.Defaults,com.fasterxml.classmate.TypeResolver,javax.servlet.ServletContext)>
<org.aspectj.weaver.RuntimeVersion: void <init>(java.lang.String,int,java.lang.String[])>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.apache.catalina.connector.OutputBuffer: void close()>-><org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.TreeMap$KeySet: boolean isEmpty()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.BasicPermission: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.security.Provider: java.lang.Object remove(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$ErrorAsyncSink: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Currency: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyConnection: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.util.function.Tuple2: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.introspect.POJOPropertyBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.PathSanitizer: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.SubList: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.JumboEnumSet: boolean isEmpty()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeSet: java.util.Iterator iterator()>
<org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration: void <init>()>-><org.springframework.security.authentication.ProviderManager$NullEventPublisher: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<org.springframework.security.web.savedrequest.SavedRequestAwareWrapper: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.ArrayList$SubList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.http.pool.RouteSpecificPool: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.io.File: java.lang.String toString()>
<sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: char getChar(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.commons.pool2.impl.BaseGenericObjectPool$IdentityWrapper: java.lang.String toString()>
<java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: void setLong(java.lang.Object,long)>
<javax.imageio.stream.FileCacheImageOutputStream: void flushBefore(long)>-><org.apache.catalina.connector.CoyoteOutputStream: void flush()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.AttributeEntry: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher[])>-><org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>
<java.util.logging.Handler: void reportError(java.lang.String,java.lang.Exception,int)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.zone.ZoneOffsetTransitionRule: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><javax.management.RuntimeErrorException: void <init>(java.lang.Error,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.util.concurrent.atomic.AtomicInteger: void set(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.asm.Handle: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setNull(java.sql.PreparedStatement,int,int,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNull(int,int)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiDescriptionLookup: void <init>()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<com.alibaba.fastjson.serializer.JSONSerializer: void writeWithFormat(java.lang.Object,java.lang.String)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.Advisor namedBeanToAdvisor(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.boot.autoconfigure.http.HttpProperties$Encoding$Type: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.lettuce.core.metrics.CommandMetrics: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.http.HttpHeaders: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean addAll(java.util.Collection)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNString(int,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNString(int,java.lang.String)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.springframework.data.util.Pair: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getDeclaredSerialFields(java.lang.Class)>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.health.Health$Builder: void <init>(org.springframework.boot.actuate.health.Status)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeStaticObjectFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$EmptyMap: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void start()>-><java.lang.Enum: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.TextNode: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.util.ClassKey: void <init>(java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><org.apache.tomcat.util.modeler.ManagedBean: void addAttribute(org.apache.tomcat.util.modeler.AttributeInfo)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.HikariConfig: int getMaximumPoolSize()>
<org.springframework.web.util.HierarchicalUriComponents$Type$8: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.catalina.connector.Response: void <init>(int)>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,org.codehaus.jackson.map.JsonMappingException$Reference)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Long: long parseLong(java.lang.String)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.data.redis.listener.KeyspaceEventMessageListener: void init()>-><org.springframework.data.redis.connection.DefaultedRedisConnection: java.util.Properties getConfig(java.lang.String)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsManager: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.HikariConfig: void <init>(java.lang.String)>-><com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>
<sun.reflect.UnsafeBooleanFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$BufferAsyncSink: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeObjectFieldAccessorImpl: void setInt(java.lang.Object,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource: void <clinit>()>-><java.util.Collections: java.util.List emptyList()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.AbstractList$Itr: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyResultSet: void close()>-><com.p6spy.engine.wrapper.ResultSetWrapper: void close()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer apply(org.springframework.security.config.annotation.SecurityConfigurer)>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void add(org.springframework.security.config.annotation.SecurityConfigurer)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><org.springframework.http.server.DefaultPathContainer$DefaultSeparator: void <init>(char,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$4: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type$4: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.io.ClassPathResource: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.BaseRequest: void setScope(java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.lang.Short: int compareTo(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Date: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.util.context.ContextN: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.JsonMappingException$Reference: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.util.Comparators$NullComparator: void <init>(boolean,java.util.Comparator)>-><java.lang.Object: void <init>()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: int compareTo(java.lang.Object)>
<reactor.util.function.Tuple4: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiDocumentationScanner getApiDocumentationScanner()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration: void <init>()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.AttributeAccessorSupport: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<sun.security.x509.X500Name$1: java.lang.Object[] run()>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void removeListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress,java.lang.String,int,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.math.BigDecimal: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.Tag: int compareTo(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.springframework.boot.actuate.metrics.AutoTimer: io.micrometer.core.instrument.Timer$Builder lambda$builder$1(java.lang.String)>-><io.micrometer.core.instrument.Timer: io.micrometer.core.instrument.Timer$Builder builder(java.lang.String)>
<java.util.EnumMap: int entryHashCode(int)>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<com.zaxxer.hikari.pool.ProxyLeakTask$1: void <init>()>-><com.zaxxer.hikari.pool.ProxyLeakTask: void <init>(com.zaxxer.hikari.pool.ProxyLeakTask$1)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><org.apache.juli.logging.DirectJDKLog: boolean isTraceEnabled()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.apache.catalina.core.StandardPipeline: void <init>(org.apache.catalina.Container)>-><org.apache.catalina.util.LifecycleBase: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.locale.Extension: java.lang.String toString()>
<org.springframework.validation.DataBinder: void <init>(java.lang.Object,java.lang.String)>-><java.util.ArrayList: void <init>()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.modules.ModelerSource getModelerSource(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.BooleanNode: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: void addAdvisorOnChainCreation(java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.Vector: boolean addAll(java.util.Collection)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer getConfigurer(java.lang.Class)>-><com.google.common.base.Joiner$3: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.StringBuilder: int length()>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.catalina.util.LifecycleBase: org.apache.catalina.LifecycleState getState()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<reactor.util.function.Tuple2: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>
<reactor.util.function.Tuple3: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<reactor.core.scheduler.Schedulers: java.lang.Object scanExecutor(java.util.concurrent.Executor,reactor.core.Scannable$Attr)>-><java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>
<com.alibaba.fastjson.serializer.MiscCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<javax.print.MimeType: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<net.logstash.logback.encoder.com.lmax.disruptor.MultiProducerSequencer: boolean isAvailable(long)>-><sun.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>
<org.springframework.session.MapSession: java.lang.String generateId()>-><java.util.UUID: java.util.UUID randomUUID()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: boolean isRegistered(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.lettuce.core.event.metrics.CommandLatencyEvent: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI lambda$doCreateConnectionProvider$0(org.springframework.data.redis.connection.RedisStandaloneConfiguration)>-><org.springframework.data.redis.connection.RedisStandaloneConfiguration: int getPort()>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isVerifyPeer()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Integer: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.aspectj.weaver.WeaverMessages: void <clinit>()>-><java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.thymeleaf.cache.StandardCacheManager: void <clinit>()>-><org.thymeleaf.cache.StandardParsedTemplateEntryValidator: void <init>()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<javax.print.MimeType$ParameterMapEntrySet: void <init>(javax.print.MimeType)>-><java.util.AbstractSet: void <init>()>
<org.apache.catalina.core.StandardPipeline: org.apache.catalina.Valve[] getValves()>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.reactive.WebFluxMetricsAutoConfiguration: void <init>(org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Field: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><cn.hutool.http.Header: java.lang.String toString()>
<com.google.common.cache.CacheBuilder$3: void <init>()>-><com.google.common.base.Ticker: void <init>()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><org.springframework.security.web.access.expression.WebExpressionVoter: boolean supports(java.lang.Class)>
<com.p6spy.engine.common.P6Util: java.lang.String joinNullSafe(java.util.Collection,java.lang.String)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.awt.AppContext: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getProxy(org.springframework.aop.framework.AopProxy)>-><org.springframework.aop.framework.CglibAopProxy: java.lang.Object getProxy(java.lang.ClassLoader)>
<sun.reflect.UnsafeIntegerFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.collect.ArrayListMultimap: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.function.RequestPredicates$ContentTypePredicate: void <init>(org.springframework.http.MediaType[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.pubsub.StatefulRedisPubSubConnection switchToPubSub()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection$LettucePoolConnectionProvider: io.lettuce.core.api.StatefulConnection getConnection(java.lang.Class)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.ArrayListMultimap: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.plugins.DocumentationPluginsManager: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNull(int,int)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNull(int,int)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<net.logstash.logback.encoder.com.lmax.disruptor.RingBufferFields: java.lang.Object elementAt(long)>-><sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyDatabaseMetaData: java.lang.String getDatabaseProductName()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$NotPredicate: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Date: java.lang.String toString()>
<org.springframework.session.web.http.SessionRepositoryFilter: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void ensureObj(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.x509.AVA: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver copy()>-><com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver copy()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.awt.image.ColorModel: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.EnumMap$1: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.misc.Unsafe: void putDoubleVolatile(java.lang.Object,long,double)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.LocalCache$Strength getValueStrength()>
<org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.node.POJONode: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.Scannable$Attr$2: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.invoke.MemberName: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.util.FieldInfo: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Hashtable$EntrySet: boolean remove(java.lang.Object)>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.io.FileInputStream: void <init>(java.io.File)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.alibaba.fastjson.serializer.MiscCodec: void writeIterator(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.SerializeWriter,java.util.Iterator)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.zaxxer.hikari.HikariConfig: void <init>(java.lang.String)>-><com.zaxxer.hikari.HikariConfig: void <init>()>
<com.sun.jmx.mbeanserver.JmxMBeanServer$1: void <init>(com.sun.jmx.mbeanserver.JmxMBeanServer,com.sun.jmx.mbeanserver.MBeanInstantiator)>-><java.lang.Object: void <init>()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.io.UrlResource: boolean equals(java.lang.Object)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><javax.management.MBeanServerFactory: java.util.ArrayList findMBeanServer(java.lang.String)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.node.TextNode: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Set: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.apache.catalina.util.LifecycleMBeanBase: void initInternal()>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry: javax.management.MBeanServer getMBeanServer()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: java.lang.Object getAttribute(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.ObjectInstance: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.net.InMemoryCookieStore: void getInternal1(java.util.List,java.util.Map,java.lang.String,boolean)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.LocalDate: java.lang.String toString()>
<org.aspectj.weaver.patterns.TypePattern: void <clinit>()>-><org.aspectj.weaver.patterns.AnyTypePattern: void <init>()>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.util.ArrayList: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$JdkDynamicAutoProxyConfiguration: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.io.UrlResource: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void <init>(java.util.concurrent.ExecutorService)>-><com.google.common.util.concurrent.AbstractListeningExecutorService: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.lettuce.core.internal.AbstractInvocationHandler: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<java.util.EnumMap: int entryHashCode(int)>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.OffsetTime: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Character$Subset: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.approval.ApprovalStoreUserApprovalHandler: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration: void <init>()>
<com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getValueEquivalence()>-><com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: int size()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.WeakHashMap$EntrySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.aop.framework.ProxyCreatorSupport: void <init>(org.springframework.aop.framework.AopProxyFactory)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties: java.lang.String lambda$setPath$0(java.io.File)>-><java.lang.StringBuilder: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Hashtable: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.P6ModuleManager: void <init>()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries: boolean remove(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeUsingCustom(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.OffsetDateTime: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.BitSet: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.awt.Rectangle: java.lang.String toString()>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean remove(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$1: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<net.logstash.logback.encoder.com.lmax.disruptor.util.Util$1: sun.misc.Unsafe run()>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl createComposingConstraintDescriptor(org.hibernate.validator.internal.metadata.core.ConstraintHelper,java.lang.reflect.Member,java.util.Map,int,java.lang.annotation.Annotation,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ConstraintType)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$9: void <init>(java.lang.String,int)>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.google.common.cache.LocalCache$Strength$2: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$Strength: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: boolean equals(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeDoubleFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.apache.tomcat.util.buf.StringCache: void <clinit>()>-><java.util.HashMap: void <init>(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeObjectFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field locateField(java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void setDefaultRolePrefix(java.lang.String)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.jdbc.datasource.init.ScriptUtils: void executeSqlScript(java.sql.Connection,org.springframework.core.io.support.EncodedResource,boolean,boolean,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyStatement: boolean execute(java.lang.String)>
<com.alibaba.fastjson.serializer.JSONSerializer: void writeWithFormat(java.lang.Object,java.lang.String)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.misc.Signal: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.DecimalFormat: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><java.util.WeakHashMap: int size()>
<org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: void addNode(org.springframework.data.redis.connection.RedisStandaloneConfiguration)>-><org.springframework.data.redis.connection.RedisStandaloneConfiguration: void setPassword(org.springframework.data.redis.connection.RedisPassword)>
<register-finalize <com.zaxxer.hikari.util.UtilityElf: java.util.concurrent.ThreadPoolExecutor createThreadPoolExecutor(int,java.lang.String,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.invoke.LambdaFormEditor$Transform: boolean equals(java.lang.Object)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.stream.Streams$ConcatSpliterator: void <init>(java.util.Spliterator,java.util.Spliterator)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: long estimateSize()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.ResolvableType: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$2: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig build()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: void addOperations(org.springframework.util.MultiValueMap,org.springframework.boot.actuate.endpoint.EndpointId,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointDiscoverer: org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey createOperationKey(org.springframework.boot.actuate.endpoint.Operation)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.metrics.web.servlet.WebMvcTags: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.springframework.security.crypto.password.LdapShaPasswordEncoder: void <clinit>()>-><java.lang.String: java.lang.String toLowerCase()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.FindOps$FindSink: void accept(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.springframework.aop.framework.AdvisedSupport: void copyConfigurationFrom(org.springframework.aop.framework.AdvisedSupport,org.springframework.aop.TargetSource,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Vector$Itr: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.security.oauth2.provider.approval.Approval: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void setInt(java.lang.Object,int)>
<java.util.PriorityQueue: void siftUp(int,java.lang.Object)>-><java.util.PriorityQueue: void siftUpUsingComparator(int,java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<reactor.util.function.Tuple2: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.Year: boolean equals(java.lang.Object)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.MBeanSupport: void postDeregister()>-><com.sun.jmx.mbeanserver.MXBeanSupport: void unregister()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void subscribeChannel(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getSingletonInstance()>-><org.springframework.beans.factory.FactoryBeanNotInitializedException: void <init>(java.lang.String)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$EntryFactory$7: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object,java.lang.Throwable)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: void <init>(org.springframework.boot.autoconfigure.orm.jpa.JpaProperties)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><java.lang.reflect.AccessibleObject: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.misc.Unsafe: void putBooleanVolatile(java.lang.Object,long,boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.String: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<org.springframework.security.web.access.DelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>-><java.lang.Object: void <init>()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber: int size()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.Hashtable$EntrySet: int size()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.util.stream.ReferencePipeline: void forEachWithCancel(java.util.Spliterator,java.util.stream.Sink)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.http.HttpStatus getStatus(javax.servlet.http.HttpServletRequest)>-><org.springframework.http.HttpStatus: org.springframework.http.HttpStatus valueOf(int)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.core.env.PropertySource: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Object: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><java.time.Duration: long getSeconds()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<java.util.concurrent.DelayQueue: boolean remove(java.lang.Object)>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<java.util.Currency$1: java.lang.Void run()>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void checkSubscription()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isSubscribed()>
<com.google.common.cache.LocalCache: boolean usesWriteEntries()>-><com.google.common.cache.LocalCache: boolean recordsWrite()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<com.sun.net.httpserver.Filter$Chain: void doFilter(com.sun.net.httpserver.HttpExchange)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><javax.security.auth.Subject$SecureSet: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>-><java.util.ArrayList: void <init>(int)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: int compareTo(java.lang.Object)>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: java.lang.Object[] toArray()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.p6spy.engine.spy.option.P6OptionsRepository$DelayedOptionChange: boolean equals(java.lang.Object)>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.security.Provider$UString: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<org.springframework.http.client.support.HttpAccessor: void setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.GregorianCalendar: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration: void <init>()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>
<org.codehaus.jackson.map.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.pubsub.StatefulRedisPubSubConnection switchToPubSub()>-><org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider: io.lettuce.core.api.StatefulConnection getConnection(java.lang.Class)>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.util.ClassTypeInformation: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.RegularEnumSet: boolean isEmpty()>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>-><org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getReadFrom()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getReadFrom()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.apache.tomcat.util.buf.UEncoder$SafeCharsSet: void <clinit>()>-><org.apache.tomcat.util.buf.UEncoder$SafeCharsSet: void <init>(java.lang.String,int,java.lang.String)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><ch.qos.logback.core.joran.spi.ElementSelector: boolean equals(java.lang.Object)>
<org.aspectj.weaver.ResolvedType$MethodGetterIncludingItds: void <init>(org.aspectj.weaver.ResolvedType$1)>-><org.aspectj.weaver.ResolvedType$MethodGetterIncludingItds: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<io.micrometer.prometheus.PrometheusMeterRegistry: void onMeterRemoved(io.micrometer.core.instrument.Meter)>-><io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.Object: void <init>()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: org.springframework.security.oauth2.common.OAuth2AccessToken getAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: java.lang.String getValue()>
<org.apache.juli.logging.DirectJDKLog: void fatal(java.lang.Object,java.lang.Throwable)>-><org.apache.juli.logging.DirectJDKLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.cglib.core.Signature: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.aspectj.weaver.patterns.ModifiersPattern: void <clinit>()>-><java.util.HashMap: void <init>()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.p6spy.engine.logging.Category: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<sun.reflect.UnsafeStaticLongFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(long)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.invoke.LambdaForm$Name: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.EnumDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiModelReader getApiModelReader()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.math.BigInteger: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientOptions()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientOptions()>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeContentsUsing(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<de.codecentric.boot.admin.client.registration.ApplicationRegistrator: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptySet: java.lang.Object[] toArray()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.LogbackMetricsAutoConfiguration: void <init>()>
<org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$DifferentManagementContextConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.actuate.autoconfigure.web.ManagementContextFactory)>-><org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.validation.ObjectError: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.lang.Short: int compareTo(java.lang.Object)>
<sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.core.publisher.Operators$MonoSubscriber: int size()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeByteFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.apache.catalina.util.LifecycleMBeanBase: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object,java.lang.Object,int,int[])>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.aspectj.weaver.ResolvedPointcutDefinition: void <clinit>()>-><org.aspectj.weaver.ResolvedPointcutDefinition: void <init>(org.aspectj.weaver.UnresolvedType,int,java.lang.String,org.aspectj.weaver.UnresolvedType[],org.aspectj.weaver.patterns.Pointcut)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.font.AttributeValues: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: void removeClassLoader(javax.management.ObjectName)>-><java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.method.OAuth2MethodSecurityConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: void setLong(java.lang.Object,long)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setNull(java.sql.PreparedStatement,int,int,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyDatabaseMetaData: java.lang.String getDriverName()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERGeneralString: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: void <init>()>-><java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean add(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Show: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Hashtable$Enumerator: boolean hasMoreElements()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.lettuce.core.RedisURI: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><java.lang.reflect.Field: void setDouble(java.lang.Object,double)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.Flux: java.lang.String toString()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.lang.Object getAttribute(java.lang.String)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.HashMap$Node: boolean equals(java.lang.Object)>
<com.google.common.collect.TransformedIterator: void remove()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: void remove()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.alibaba.fastjson.serializer.SerialContext: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getDeclaredSerialFields(java.lang.Class)>-><java.io.ObjectStreamField: java.lang.Class getType()>
<java.util.stream.ReferencePipeline$11: void <init>(java.util.stream.ReferencePipeline,java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int,java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$StatelessOp: void <init>(java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: java.lang.String lambda$setDatabase$0(int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.fasterxml.classmate.TypeBindings: void <clinit>()>-><com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>
<javax.imageio.stream.FileCacheImageOutputStream: void flushBefore(long)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.JumboEnumSet: boolean add(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><java.lang.String: char[] toCharArray()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.sql.Time: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<org.springframework.session.SingleIndexResolver: java.util.Map resolveIndexesFor(org.springframework.session.Session)>-><org.springframework.session.PrincipalNameIndexResolver: java.lang.String resolveIndexValueFor(org.springframework.session.Session)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: void initializeAdvisorChain()>-><org.springframework.aop.framework.ProxyFactoryBean: void addAdvisorOnChainCreation(java.lang.Object,java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: java.util.Spliterator trySplit()>
<sun.reflect.UnsafeFloatFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegate: void <clinit>()>-><java.net.URLClassLoader: void <init>(java.net.URL[])>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.session.InvalidSessionAccessDeniedHandler: void <init>(org.springframework.security.web.session.InvalidSessionStrategy)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean remove(java.lang.Object)>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory getDefaultFactory()>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<java.util.Currency$1: java.lang.Void run()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<javax.print.MimeType$ParameterMapEntrySet: void <init>(javax.print.MimeType,javax.print.MimeType$1)>-><javax.print.MimeType$ParameterMapEntrySet: void <init>(javax.print.MimeType)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Period: java.lang.String toString()>
<sun.reflect.UnsafeBooleanFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.data.util.ClassTypeInformation: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.aspectj.weaver.patterns.Bindings: void <clinit>()>-><org.aspectj.weaver.patterns.Bindings: void <init>(int)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyResultSet: java.lang.String getString(int)>-><com.zaxxer.hikari.pool.HikariProxyResultSet: java.lang.String getString(int)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeStaticObjectFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<javax.print.MimeType: void parse(java.lang.String)>-><javax.print.MimeType$LexicalAnalyzer: void <init>(java.lang.String)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Spliterators$1Adapter: boolean hasNext()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><io.netty.buffer.AbstractByteBuf: int compareTo(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeBooleanFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.Scannable$Attr$2: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.redis.listener.PatternTopic: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Class: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl createComposingConstraintDescriptor(org.hibernate.validator.internal.metadata.core.ConstraintHelper,java.lang.reflect.Member,java.util.Map,int,java.lang.annotation.Annotation,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ConstraintType)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ThreadFactory lambda$initializeHouseKeepingExecutorService$3()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Spliterator spliterator()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Spliterator spliterator()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.DecimalNode: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<javax.management.MBeanServerFactory: java.lang.String mBeanServerId(javax.management.MBeanServer)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: void <init>()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.openmbean.TabularType: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.ArrayNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.io.File: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.StackTraceElement: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.validation.ObjectError: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getSingletonInstance()>-><org.springframework.aop.framework.ProxyCreatorSupport: org.springframework.aop.framework.AopProxy createAopProxy()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: void setInt(java.lang.Object,int)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.Color: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.IdentityHashMap$Values: int size()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.util.DerValue: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<com.google.common.cache.LocalCache$AccessQueue: void <init>()>-><java.util.AbstractQueue: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.MBeanParameterInfo: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field locateField(java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.reflect.Field: java.lang.Class getType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Character$Subset: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log getLogger()>-><org.apache.catalina.core.ContainerBase: java.lang.String getLogName()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.DelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: int compareTo(java.lang.Object)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><java.lang.Math: int min(int,int)>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.StringBuffer: java.lang.String toString()>
<javax.print.MimeType: void parse(java.lang.String)>-><javax.print.MimeType$LexicalAnalyzer: char getLexemeFirstCharacter()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void flush()>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore$TokenExpiry: java.lang.String getValue()>
<org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerSecurityConfiguration: void <init>()>-><io.micrometer.shaded.org.pcollections.ConsPStack: void <init>()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Null: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.access.expression.AbstractSecurityExpressionHandler: void setRoleHierarchy(org.springframework.security.access.hierarchicalroles.RoleHierarchy)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: java.lang.String wrapExpression(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><com.google.common.base.Joiner$3: int size()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><org.apache.tomcat.util.modeler.FeatureInfo: void setName(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.Collections$UnmodifiableCollection: boolean remove(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.node.BigIntegerNode: boolean equals(java.lang.Object)>
<org.aspectj.bridge.context.CompilationAndWeavingContext: void <clinit>()>-><java.util.HashMap: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.ZoneOffset: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.introspect.AnnotatedConstructor: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.base.Predicates$AndPredicate: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI lambda$doCreateConnectionProvider$0(org.springframework.data.redis.connection.RedisStandaloneConfiguration)>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.alibaba.fastjson.JSONObject: java.lang.Object remove(java.lang.Object)>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress,java.lang.String,int,java.lang.String)>-><org.apache.http.util.Args: java.lang.Object notNull(java.lang.Object,java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<net.logstash.logback.appender.AbstractLogstashTcpSocketAppender$TcpSendingEventHandler: void onEvent(net.logstash.logback.appender.AsyncDisruptorAppender$LogEvent,long,boolean)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <clinit>()>-><org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <init>(java.lang.String,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder: void <init>(com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap)>-><java.lang.Object: java.lang.Class getClass()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer getConfigurer(java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader,boolean)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.ThreadGroup: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.pool.HikariPool: void access$600(com.zaxxer.hikari.pool.HikariPool)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<com.p6spy.engine.common.P6Util: java.util.Map getPropertiesMap(java.util.Properties)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.LinkedList$ListItr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.session.data.redis.RedisIndexedSessionRepository: java.lang.String getSessionAttrNameKey(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.EnumMap$EntrySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.Object lazyBean(java.lang.Class)>-><org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getObject()>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.baomidou.dynamic.datasource.DynamicDataSourceCreator: void <clinit>()>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Enum: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafWebMvcConfiguration: void <init>()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.OptionalLong: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.Tags: void <clinit>()>-><io.micrometer.core.instrument.Tags: void <init>(io.micrometer.core.instrument.Tag[])>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: int getInitialCapacity()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.Color: java.lang.String toString()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>
<org.apache.catalina.util.LifecycleMBeanBase: void initInternal()>-><org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String[])>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getValue()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><com.alibaba.fastjson.util.FieldInfo: int compareTo(java.lang.Object)>
<org.aspectj.weaver.tools.AbstractTrace: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerOpaqueTokenConfiguration: void <init>()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><com.alibaba.fastjson.JSONArray: boolean add(java.lang.Object)>
<reactor.core.scheduler.ParallelScheduler: void <clinit>()>-><java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>
<javax.print.MimeType$LexicalAnalyzer: char getLexemeFirstCharacter()>-><java.lang.String: char charAt(int)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<com.google.common.collect.TransformedIterator: void remove()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: void remove()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void closeConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>
<org.springframework.aop.framework.ProxyCreatorSupport: void adviceChanged()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.GuavaCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.DigitList: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.management.HeapDumpWebEndpointAutoConfiguration: void <init>()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.std.IndexedStringListSerializer: void serializeUsingCustom(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.font.EAttribute: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Thread: java.lang.String toString()>
<com.google.common.collect.Maps$Values: boolean remove(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeContentsUsing(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.HikariConfig: long getIdleTimeout()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.core.publisher.FluxHide$SuppressFuseableSubscriber: int size()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.POJONode: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><java.util.HashMap: int size()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind,boolean)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Long: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>(java.lang.String[])>-><org.springframework.beans.factory.xml.XmlBeanDefinitionReader: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.MessageDigest: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><ch.qos.logback.core.joran.spi.ElementSelector: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><java.lang.reflect.Field: java.lang.Class getType()>
<org.apache.tomcat.util.modeler.Registry: void <init>()>-><java.lang.Object: void <init>()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$7: void <init>()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.UUID: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.TreeMap: java.util.Set entrySet()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.deser.SettableBeanProperty: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder maximumSize(long)>-><com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.apache.catalina.core.StandardContext: void <init>()>-><org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>
<org.springframework.security.web.firewall.RequestWrapper: java.lang.String strip(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><ch.qos.logback.core.subst.Node: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Integer: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.WeakHashMap$EntrySet: boolean remove(java.lang.Object)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>
<org.aspectj.bridge.context.CompilationAndWeavingContext: void <clinit>()>-><org.aspectj.bridge.context.CompilationAndWeavingContext$DefaultFormatter: void <init>(org.aspectj.bridge.context.CompilationAndWeavingContext$1)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>
<com.zaxxer.hikari.HikariDataSource: void <init>()>-><com.zaxxer.hikari.HikariConfig: void <init>()>
<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Object: void <init>()>
<java.time.format.ZoneName: void <clinit>()>-><org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ThreadFactory lambda$initializeHouseKeepingExecutorService$3()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeLongFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.node.ValueNode: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>(java.lang.Class,java.lang.String[])>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void <init>()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.WeakHashMap$KeySet: boolean remove(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptySet: void forEach(java.util.function.Consumer)>
<org.aspectj.weaver.AdviceKind: void <init>(java.lang.String,int,int,boolean,boolean)>-><org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void removeListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.String: int length()>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.MethodParameter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.naming.NamingException: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.aspectj.weaver.patterns.WithinCodeAnnotationPointcut: void <clinit>()>-><org.aspectj.weaver.Shadow$Kind: boolean isEnclosingKind()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$2: int compare(java.lang.Object,java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.nio.charset.Charset: int compareTo(java.lang.Object)>
<ch.qos.logback.core.util.EnvUtil: boolean isJaninoAvailable()>-><java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.nio.ByteBuffer: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void handleErrorInObjectToString(java.lang.Object,java.lang.StringBuilder,java.lang.Throwable)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Sequence: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Character: java.lang.String toString()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: void forEach(java.util.function.Consumer)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.function.RequestPredicates$ContentTypePredicate: void <init>(org.springframework.http.MediaType[])>-><java.util.HashSet: void <init>(java.util.Collection)>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray(java.lang.Object[])>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.p6spy.engine.logging.Category: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.cert.Certificate: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.Instant: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<org.apache.catalina.core.StandardPipeline: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.lettuce.core.masterslave.MasterSlaveConnectionProvider$ConnectionKey: boolean equals(java.lang.Object)>
<org.aspectj.bridge.IMessage$Kind: void <clinit>()>-><org.aspectj.bridge.IMessage$Kind$1: void <init>()>
<java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.util.DerValue: java.lang.String toString()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.Collections$EmptyList: int size()>
<org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>-><org.springframework.aop.framework.ProxyFactoryBean: void addAdvisorOnChainCreation(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><com.alibaba.fastjson.JSONArray: boolean addAll(java.util.Collection)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaultEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: int indexOf(int,int)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: boolean isDebugEnabled()>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<org.springframework.web.servlet.view.InternalResourceViewResolver: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><java.lang.Object: void <init>()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeObjectFieldAccessorImpl: int getInt(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.cglib.core.Signature: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>-><org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.aspectj.bridge.ISourceLocation: void <clinit>()>-><java.io.File: void <init>(java.lang.String)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void setInt(java.lang.Object,int)>
<org.springframework.http.HttpStatus$Series: void <init>(java.lang.String,int,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.asm.ConstantDynamic: boolean equals(java.lang.Object)>
<org.springframework.cache.jcache.JCacheCacheManager: java.util.Collection loadCaches()>-><javax.cache.CacheManager: javax.cache.Cache getCache(java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.aspectj.weaver.patterns.TypePattern: void <clinit>()>-><org.aspectj.weaver.patterns.TypePattern$MatchKind: void <init>(java.lang.String)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.ZonedDateTime: java.lang.String toString()>
<org.springframework.aop.framework.CglibAopProxy: org.springframework.cglib.proxy.Callback[] getCallbacks(java.lang.Class)>-><org.springframework.aop.target.LazyInitTargetSource: java.lang.Object getTarget()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.Character: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: boolean isRegistered(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName nonDefaultDomain(javax.management.ObjectName)>
<org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <init>(java.lang.String[])>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String getMimeType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.nio.ByteBuffer: java.lang.String toString()>
<sun.awt.DebugSettings: void loadSystemProperties()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.security.web.FilterInvocation: void lambda$static$0(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.MonoOnAssembly: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void <init>()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: java.lang.String getName()>
<javax.management.MBeanServerDelegate: java.lang.String getImplementationVersion()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.ser.BeanSerializer: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.catalina.core.ContainerBase: void <init>()>-><java.util.HashMap: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void setUseEquals(boolean)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: java.sql.ParameterMetaData getParameterMetaData()>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: java.sql.ParameterMetaData getParameterMetaData()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><java.util.HashMap: void <init>(int)>
<org.aspectj.weaver.Shadow$Kind: void <init>(java.lang.String,int,boolean)>-><org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$5: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionPresentCondition: boolean passes()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<org.apache.tomcat.jni.SSL: void <clinit>()>-><org.apache.tomcat.jni.SSL: int version()>
<sun.awt.DebugSettings: java.lang.String toString()>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.MiscCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.base.Predicates$NotPredicate: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>-><java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.catalina.util.LifecycleBase: void start()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.ProxyLeakTask: void run()>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMultimap: boolean putAll(java.lang.Object,java.lang.Iterable)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Hashtable: java.util.Set entrySet()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardPipeline: org.apache.catalina.Valve[] getValves()>-><java.util.ArrayList: void <init>()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.crypto.CryptoPermission: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.util.ClassUtils: java.lang.Class getUserClass(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.schema.TypeNameExtractor: void <init>(com.fasterxml.classmate.TypeResolver,org.springframework.plugin.core.PluginRegistry,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxCreate$BufferAsyncSink: java.lang.String toString()>
<org.codehaus.jackson.map.introspect.AnnotatedClass: boolean _isIncludableField(java.lang.reflect.Field)>-><java.lang.reflect.Field: boolean isSynthetic()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERIA5String: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.ObjectInstance: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Long: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.apache.http.protocol.ImmutableHttpProcessor: void <init>(org.apache.http.HttpResponseInterceptor[])>-><org.apache.http.protocol.ImmutableHttpProcessor: void <init>(org.apache.http.HttpRequestInterceptor[],org.apache.http.HttpResponseInterceptor[])>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><org.springframework.util.MimeType: java.lang.String getType()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.ObjectName: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.boot.web.embedded.tomcat.TldSkipPatterns: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.UUID: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Instant: java.lang.String toString()>
<org.springframework.beans.factory.config.DependencyDescriptor: boolean isRequired()>-><java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.awt.SunHints$Key: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyResultSet: boolean next()>-><com.zaxxer.hikari.pool.ProxyResultSet: java.sql.SQLException checkException(java.sql.SQLException)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$UnmodifiableMap: java.lang.Object remove(java.lang.Object)>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.apache.commons.pool2.impl.BaseGenericObjectPool$IdentityWrapper: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest$LinksRequestMatcher: void <init>()>-><org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest$AbstractRequestMatcher: void <init>()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: java.sql.Connection getConnection()>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache$AccessQueue: void <init>()>
<java.util.concurrent.DelayQueue: boolean remove(java.lang.Object)>-><java.util.PriorityQueue: boolean remove(java.lang.Object)>
<org.springframework.http.server.PathContainer$Options: org.springframework.http.server.PathContainer$Options create(char,boolean)>-><org.springframework.http.server.PathContainer$Options: void <init>(char,boolean)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: void _sortProperties()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.google.common.base.Joiner$3: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getKeyEquivalence()>-><com.google.common.cache.CacheBuilder: com.google.common.cache.LocalCache$Strength getKeyStrength()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.Period: boolean equals(java.lang.Object)>
<org.springframework.session.data.redis.config.ConfigureNotifyKeyspaceEventsAction: java.lang.String getNotifyOptions(org.springframework.data.redis.connection.RedisConnection)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeStaticShortFieldAccessorImpl: void setInt(java.lang.Object,int)>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.jar.Attributes: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.node.BinaryNode: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.security.authentication.RememberMeAuthenticationToken: void <init>(java.lang.String,java.lang.Object,java.util.Collection)>-><java.lang.String: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.base.Predicates$NotPredicate: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields: void <clinit>()>-><sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.web.util.UriComponents: java.lang.String expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.aspectj.weaver.patterns.ModifiersPattern: void <clinit>()>-><org.aspectj.weaver.patterns.ModifiersPattern: void <init>(int,int)>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<ch.qos.logback.core.joran.action.AbstractEventEvaluatorAction: void end(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String)>-><org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.LocalDateTime: boolean equals(java.lang.Object)>
<sun.net.httpserver.ContextList: sun.net.httpserver.HttpContextImpl findContext(java.lang.String,java.lang.String,boolean)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: java.lang.String wrapExpression(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean addAll(java.util.Collection)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.Object lazyBean(java.lang.Class)>-><org.springframework.aop.framework.AdvisedSupport: void setTargetSource(org.springframework.aop.TargetSource)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.aspectj.weaver.SourceContextImpl$1: void <init>()>-><java.lang.Object: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type$5: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Hashtable: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.CopyOnWriteArraySet: java.lang.Object[] toArray(java.lang.Object[])>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.ObjectName: java.lang.String getCanonicalKeyPropertyListString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.ParsePosition: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.context.support.ApplicationListenerDetector: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.JsonMappingException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.MethodParameter: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: int compareTo(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><java.util.HashSet: boolean remove(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><com.alibaba.fastjson.JSONArray: int size()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.util.MimeType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.Meter$Type: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.UUID: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void lambda$new$0(org.springframework.security.core.userdetails.UserDetails)>-><org.springframework.security.authentication.AccountExpiredException: void <init>(java.lang.String)>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.awt.SunHints$Key: java.lang.String toString()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.OptionalDouble: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<org.springframework.web.servlet.FrameworkServlet: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.io.SerializedString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeUsingCustom(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.springframework.security.web.reactive.result.view.CsrfRequestDataValueProcessor: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<sun.security.provider.PolicyFile: java.lang.String[][] getPrincipalInfo(sun.security.provider.PolicyParser$PrincipalEntry,java.security.Principal[])>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Short: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void init()>-><org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.TypedValue: void <init>(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.MonoOnAssembly: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.lang.Object getAttribute(java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.JmxMBeanServer: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.util.MimeType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: void initializeAdvisorChain()>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundrySecurityService: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundrySecurityService$1: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.lang.ProcessEnvironment$StringKeySet: boolean remove(java.lang.Object)>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementChildContextConfiguration: void <init>()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.TreeMap$Entry: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.text.FieldPosition: java.lang.String toString()>
<com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><java.lang.Object: void <init>()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<reactor.util.function.Tuple4: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>
<org.springframework.security.web.csrf.CsrfFilter: void setAccessDeniedHandler(org.springframework.security.web.access.AccessDeniedHandler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.util.concurrent.DelayQueue: boolean remove(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.ConcurrentDateFormat: void <init>(java.lang.String,java.util.Locale,java.util.TimeZone)>-><java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.IdentityHashMap$KeySet: boolean remove(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.ArrayList$Itr: boolean hasNext()>
<springfox.documentation.spring.web.readers.parameter.ParameterRequiredReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><springfox.documentation.spring.web.DescriptionResolver: void <init>(org.springframework.core.env.Environment)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>
<java.util.Collections: void swap(java.util.List,int,int)>-><org.springframework.core.io.buffer.LimitedDataBufferList: java.lang.Object set(int,java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: int compareTo(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration: void <init>()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object,java.lang.Throwable)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.lang.Double: int compareTo(java.lang.Object)>
<springfox.documentation.spring.web.paths.QueryStringUriTemplateDecorator: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.bouncycastle.asn1.ASN1Primitive: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERT61String: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: long getLong(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><java.util.IdentityHashMap: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer: void serializeContents(java.util.Iterator,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<com.google.common.collect.Maps$Values: boolean remove(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.alibaba.fastjson.JSONObject: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.MonthDay: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$2: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.validation.FieldError: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.EnumMap$1: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: int compare(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.Tag: int compareTo(java.lang.Object)>
<com.wf.captcha.utils.GifEncoder: void writeString(java.lang.String)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.io.PrintStream: void println(java.lang.String)>
<org.aspectj.bridge.context.CompilationAndWeavingContext: void <clinit>()>-><java.util.Stack: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Long: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.String toString()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getKeyEquivalence()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<org.apache.catalina.core.ContainerBase: java.lang.String getDomainInternal()>-><org.apache.catalina.core.ContainerBase: org.apache.catalina.Container getParent()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.MessageDigest: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.client.JdbcClientDetailsService$ClientDetailsRowMapper: org.springframework.security.oauth2.provider.ClientDetails mapRow(java.sql.ResultSet,int)>-><com.zaxxer.hikari.pool.HikariProxyResultSet: java.lang.String getString(int)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.aspectj.weaver.Iterators$ResolvedTypeArrayIterator: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityConfigurerAdapter: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.LinkedHashMap$LinkedEntrySet: boolean remove(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.buffer.AbstractByteBuf: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>
<net.logstash.logback.encoder.com.lmax.disruptor.Sequence: void <clinit>()>-><sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.audit.AuditEventsEndpointAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Object[])>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.www.BasicAuthenticationFilter: void setRememberMeServices(org.springframework.security.web.authentication.RememberMeServices)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>-><org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceEndpointAutoConfiguration: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.security.x509.AVA: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<cn.hutool.core.map.CustomKeyMap: void putAll(java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.springframework.boot.context.properties.PropertyMapper: void <clinit>()>-><org.springframework.boot.context.properties.PropertyMapper: void <init>(org.springframework.boot.context.properties.PropertyMapper,org.springframework.boot.context.properties.PropertyMapper$SourceOperator)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeIntegerFieldAccessorImpl: void setLong(java.lang.Object,long)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationDeprecatedReader: void <init>()>-><java.lang.Object: void <init>()>
<sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: char getChar(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.Color: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Double: java.lang.String toString()>
<sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<org.apache.catalina.connector.OutputBuffer: void close()>-><java.nio.Buffer: int remaining()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.aspectj.weaver.patterns.ExactTypePattern: void <clinit>()>-><java.util.HashMap: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean remove(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.Provider$Service: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.EmbeddedDataSourceConfiguration: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.image.PackedColorModel: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>
<org.aspectj.bridge.context.CompilationAndWeavingContext: void <clinit>()>-><java.lang.ThreadLocal: void <init>()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <clinit>()>-><io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <init>()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<org.springframework.web.client.RestTemplate: void validateConverters(java.util.List)>-><org.springframework.util.Assert: void noNullElements(java.util.Collection,java.lang.String)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: void setLong(java.lang.Object,long)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthContributorAutoConfiguration: void <init>()>
<org.codehaus.jackson.map.util.ClassUtil: java.lang.reflect.Constructor findConstructor(java.lang.Class,boolean)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.security.authentication.ProviderManager: void setAuthenticationEventPublisher(org.springframework.security.authentication.AuthenticationEventPublisher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(long)>
<org.springframework.boot.actuate.health.Health: org.springframework.boot.actuate.health.Health$Builder up()>-><org.springframework.boot.actuate.health.Health: org.springframework.boot.actuate.health.Health$Builder status(org.springframework.boot.actuate.health.Status)>
<org.apache.http.client.config.RequestConfig: void <init>()>-><org.apache.http.client.config.RequestConfig: void <init>(boolean,org.apache.http.HttpHost,java.net.InetAddress,boolean,java.lang.String,boolean,boolean,boolean,int,boolean,java.util.Collection,java.util.Collection,int,int,int,boolean,boolean)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.util.ResourceLeakDetector$Record: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.SubList: java.lang.Object get(int)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>
<java.security.Security: void initialize()>-><org.aspectj.weaver.BCException: void printStackTrace()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.codehaus.jackson.map.deser.SettableAnyProperty: void _throwAsIOE(java.lang.Exception,java.lang.String,java.lang.Object)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerTokenServicesConfiguration$JwtTokenServicesConfiguration: void <init>(org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties)>-><org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Character$Subset: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forPrimitiveType(java.lang.String)>-><org.aspectj.weaver.UnresolvedType: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getChannels()>
<javax.xml.datatype.FactoryFinder: java.lang.String which(java.lang.Class)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.lang.Iterable,java.lang.CharSequence,java.lang.String,java.lang.String)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><java.util.concurrent.ConcurrentLinkedQueue: void <init>()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari: void <init>()>
<javax.print.MimeType: void parse(java.lang.String)>-><javax.print.MimeType: java.lang.String removeBackslashes(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.aspectj.weaver.patterns.ExactTypePattern: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.aspectj.util.FuzzyBoolean: void <clinit>()>-><org.aspectj.util.FuzzyBoolean$YesFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<org.aspectj.weaver.ResolvedType$MethodGetter: void <init>()>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.invoke.MemberName: boolean equals(java.lang.Object)>
<org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.springframework.beans.factory.InjectionPoint: java.lang.annotation.Annotation[] getAnnotations()>-><java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint$ConfigurationPropertiesAnnotationIntrospector: void <init>()>-><com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.util.concurrent.PromiseTask: boolean equals(java.lang.Object)>
<javax.management.MBeanServerDelegate: java.lang.String getMBeanServerId()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.Short: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.aspectj.weaver.ResolvedType$MethodGetter: void <init>(org.aspectj.weaver.ResolvedType$1)>-><org.aspectj.weaver.ResolvedType$MethodGetter: void <init>()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,boolean,boolean)>-><com.sun.jmx.mbeanserver.JmxMBeanServer$1: void <init>(com.sun.jmx.mbeanserver.JmxMBeanServer,com.sun.jmx.mbeanserver.MBeanInstantiator)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isVerifyPeer()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isVerifyPeer()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.lettuce.core.event.metrics.CommandLatencyEvent: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.springframework.util.MimeTypeUtils: org.springframework.util.MimeType parseMimeTypeInternal(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.hateoas.HypermediaHttpMessageConverterConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.validation.FieldError: java.lang.String toString()>
<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field locateField(java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.reflect.Field: java.lang.String getName()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.concurrent.ThreadPoolExecutor$Worker: boolean isLocked()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$1: java.lang.Object next()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.RegularEnumSet: int size()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArraySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<javax.print.MimeType$LexicalAnalyzer: void <init>(java.lang.String)>-><javax.print.MimeType$LexicalAnalyzer: void nextLexeme()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafDefaultConfiguration: void <init>()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.aspectj.weaver.patterns.Pointcut: void <clinit>()>-><org.aspectj.weaver.patterns.Pointcut$State: void <init>(java.lang.String,int)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<cn.hutool.core.map.CustomKeyMap: void putAll(java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.Vector: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<reactor.util.function.Tuple2: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.imageio.ImageTypeSpecifier$Interleaved: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<org.springframework.web.servlet.FrameworkServlet: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.aspectj.util.LangUtil$StringChecker: void <clinit>()>-><org.aspectj.util.LangUtil$StringChecker: void <init>(java.lang.String[])>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$WriteQueue$1: void <init>(com.google.common.cache.LocalCache$WriteQueue)>-><com.google.common.cache.LocalCache$AbstractReferenceEntry: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<sun.reflect.UnsafeStaticObjectFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>-><java.util.ArrayList: boolean isEmpty()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.JsonProcessingException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<java.net.InMemoryCookieStore: void getInternal2(java.util.List,java.util.Map,java.lang.Comparable,boolean)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: void remove()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Short: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.reflect.Type getGenericPropertyType()>-><java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiDescriptionReader getApiDescriptionReader()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><java.lang.reflect.Field: void setFloat(java.lang.Object,float)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.springframework.web.context.request.async.TimeoutDeferredResultProcessingInterceptor: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.CompositeType: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.aspectj.bridge.IMessageHandler$1: void <init>()>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.env.PropertySource: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,boolean,boolean)>-><com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: void <init>()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Character: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getSingletonInstance()>-><org.springframework.aop.framework.ProxyConfig: void setFrozen(boolean)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.p6spy.engine.spy.P6ModuleManager: void <init>()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.util.context.Context0: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: void <init>()>
<org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: void <init>(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.web.context.support.ServletContextResource: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.MutablePropertyValues: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeRefreshToken(org.springframework.security.oauth2.common.OAuth2RefreshToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.wf.captcha.utils.GifEncoder: boolean finish()>-><org.apache.catalina.connector.CoyoteOutputStream: void flush()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.font.AttributeValues: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Clock$SystemClock: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.ErrorProperties: org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace getIncludeStacktrace()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.security.web.firewall.RequestWrapper: java.lang.String strip(java.lang.String)>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.springframework.expression.common.CompositeStringExpression: java.lang.String getValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.ZoneOffset: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.aspectj.util.FuzzyBoolean$NoFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>-><org.aspectj.util.FuzzyBoolean$NoFuzzyBoolean: void <init>()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration: void <init>(org.springframework.core.env.Environment)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.CodeSource: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object,int)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setObject(int,java.lang.Object,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<org.springframework.security.web.authentication.rememberme.InvalidCookieException: void <init>(java.lang.String)>-><org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException: void <init>(java.lang.String)>
<org.springframework.security.web.access.expression.WebExpressionVoter: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>
<com.wf.captcha.utils.GifEncoder: void writeShort(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<org.aspectj.weaver.patterns.Pointcut$State: void <init>(java.lang.String,int)>-><org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>
<com.google.common.cache.CacheBuilder: com.google.common.base.Ticker getTicker(boolean)>-><com.google.common.base.Ticker: com.google.common.base.Ticker systemTicker()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.springframework.core.SpringProperties: void <clinit>()>-><java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.JsonMappingException: java.lang.String toString()>
<com.baomidou.dynamic.datasource.plugin.DbHealthIndicator: void <clinit>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><ch.qos.logback.core.status.StatusBase: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository: java.lang.String getSessionAttrNameKey(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.util.TypeDiscoverer: org.springframework.data.util.TypeInformation getProperty(java.lang.String)>-><java.lang.String: int indexOf(int)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.alibaba.fastjson.JSONArray: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><java.lang.Object: java.lang.Class getClass()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.ObjectName: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.Collections$EmptySet: int size()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.apache.catalina.core.ApplicationContext: void populateSessionTrackingModes()>-><java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeContentsUsing(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><com.google.common.base.Joiner$3: int size()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.Extension: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder percentilePrecision(java.lang.Integer)>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig: java.lang.Integer access$202(io.micrometer.core.instrument.distribution.DistributionStatisticConfig,java.lang.Integer)>
<org.springframework.boot.actuate.metrics.http.Outcome: void <init>(java.lang.String,int)>-><io.micrometer.core.instrument.Tag: io.micrometer.core.instrument.Tag of(java.lang.String,java.lang.String)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void add(java.util.Collection,byte[][])>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<sun.awt.DebugSettings: java.lang.String toString()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.IntNode: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.Object getLast(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<java.net.InMemoryCookieStore: void getInternal1(java.util.List,java.util.Map,java.lang.String,boolean)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: boolean isRegistered(javax.management.ObjectName)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.StackTraceElement: java.lang.String toString()>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.concurrent.CopyOnWriteArrayList: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.PatternParseException$PatternMessage: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.alibaba.fastjson.util.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<sun.awt.DebugSettings: void loadSystemProperties()>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.StackTraceElement: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.DelegateServiceScheduler: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration: void <init>()>-><synthetic.method.SingletonFactory: org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration getAuthorizationServerEndpointsConfiguration()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.TreeMap$Values: boolean remove(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.KeyspaceEventMessageListener: void init()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.OffsetDateTime: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest: javax.servlet.http.HttpServletRequest lambda$new$0()>-><javax.servlet.ServletRequestWrapper: javax.servlet.ServletRequest getRequest()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.commons.pool2.impl.DefaultPooledObject: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.pool.HikariPool: com.zaxxer.hikari.util.ConcurrentBag access$200(com.zaxxer.hikari.pool.HikariPool)>
<com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer: void parseArray(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.util.Collection)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache$Segment: java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>(java.lang.Class,java.lang.String[])>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void refresh()>
<org.springframework.boot.jta.atomikos.AtomikosDataSourceBean: void afterPropertiesSet()>-><com.atomikos.jdbc.AtomikosDataSourceBean: java.lang.String getUniqueResourceName()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties: java.lang.String lambda$setPath$0(java.io.File)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType,java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisSocketURIAndApplySettings(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class getTargetClass()>-><java.lang.StringBuilder: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceInitializationConfiguration: void <init>()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration: void <init>()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.TreeSet: boolean remove(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.thymeleaf.templatemode.TemplateMode: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><org.springframework.util.LinkedMultiValueMap: void add(java.lang.Object,java.lang.Object)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: com.fasterxml.classmate.types.ResolvedPrimitiveType voidType()>
<org.thymeleaf.TemplateEngine: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Object[])>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.text.AttributeEntry: boolean equals(java.lang.Object)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArraySet: void forEach(java.util.function.Consumer)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.p6spy.engine.common.P6Util: java.util.Map getPropertiesMap(java.util.Properties)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.MethodParameter: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: void remove()>-><javax.print.MimeType$ParameterMapEntrySetIterator: void remove()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeShortFieldAccessorImpl: long getLong(java.lang.Object)>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><java.util.AbstractList: java.util.Iterator iterator()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Short: java.lang.String toString()>
<me.zhyd.oauth.log.Log: void writeThrowable(java.lang.Throwable,java.io.PrintStream)>-><org.aspectj.weaver.BCException: void printStackTrace(java.io.PrintStream)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.URI: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Float: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.schema.property.bean.AccessorsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration: void <init>()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<org.springframework.security.web.savedrequest.SavedRequestAwareWrapper: void <clinit>()>-><java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<reactor.util.function.Tuple4: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.aspectj.weaver.JoinPointSignatureIterator: void <clinit>()>-><org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forSignature(java.lang.String)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.awt.image.PackedColorModel: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationTagsReader: void <init>(springfox.documentation.spring.web.readers.operation.DefaultTagsProvider)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.regex.Pattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.jsontype.NamedType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.google.common.base.Predicates$AndPredicate: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.ClockSource$Factory: com.zaxxer.hikari.util.ClockSource create()>-><com.zaxxer.hikari.util.ClockSource$NanosecondClockSource: void <init>()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.filter.ForwardedHeaderFilter: void <clinit>()>-><org.springframework.util.LinkedCaseInsensitiveMap: void <init>(int,java.util.Locale)>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.alibaba.fastjson.JSONArray: int size()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap: java.lang.Object remove(java.lang.Object)>
<me.zhyd.oauth.log.Log: void writeThrowable(java.lang.Throwable,java.io.PrintStream)>-><org.aspectj.bridge.AbortException: void printStackTrace(java.io.PrintStream)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<sun.text.normalizer.UCharacter: void <clinit>()>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.apache.tomcat.util.modeler.ManagedBean: void addAttribute(org.apache.tomcat.util.modeler.AttributeInfo)>-><org.apache.tomcat.util.modeler.FeatureInfo: java.lang.String getName()>
<org.springframework.web.client.RestTemplate: void validateConverters(java.util.List)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: java.lang.String wrapExpression(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$2: void unregistered()>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void access$100(com.sun.jmx.interceptor.DefaultMBeanServerInterceptor,java.lang.ClassLoader,javax.management.ObjectName)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.cache.transaction.TransactionAwareCacheDecorator: java.lang.String getName()>-><org.springframework.cache.concurrent.ConcurrentMapCache: java.lang.String getName()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress,int,java.lang.String)>-><java.net.InetAddress: java.lang.String getHostName()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.net.URI: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.nio.ByteBuffer: int compareTo(java.lang.Object)>
<org.aspectj.weaver.tools.DefaultTraceFactory: org.aspectj.weaver.tools.Trace getTrace(java.lang.Class)>-><org.aspectj.weaver.tools.DefaultTrace: void setTraceEnabled(boolean)>
<org.springframework.security.web.firewall.RequestWrapper: java.lang.String strip(java.lang.String)>-><java.lang.StringBuilder: int length()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.deser.SettableBeanProperty: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.thymeleaf.util.ClassLoaderUtils: java.lang.ClassLoader getClassClassLoader(java.lang.Class)>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Vector: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<org.springframework.validation.DataBinder: void <init>(java.lang.Object)>-><org.springframework.validation.DataBinder: void <init>(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Byte: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><cn.hutool.http.ContentType: java.lang.String toString()>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object[])>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>-><java.lang.Object: void <init>()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><java.lang.StringBuilder: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.springframework.boot.web.client.ClientHttpRequestFactorySupplier: void <clinit>()>-><java.util.LinkedHashMap: void <init>()>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber,java.util.Iterator,java.lang.Runnable)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<sun.reflect.UnsafeCharacterFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.spel.standard.SpelExpression: void checkCompile(org.springframework.expression.spel.ExpressionState)>
<org.springframework.web.util.HtmlCharacterEntityReferences: java.lang.String lambda$new$0(int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.OptionalLong: java.lang.String toString()>
<org.apache.catalina.core.ApplicationContextFacade: void <init>(org.apache.catalina.core.ApplicationContext)>-><java.lang.Object: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.Parsed: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: void _renameProperties()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.awt.AppContext: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Properties: java.util.Enumeration propertyNames()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<org.thymeleaf.spring5.SpringWebFluxTemplateEngine: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<org.thymeleaf.extras.java8time.dialect.Java8TimeExpressionFactory: void <clinit>()>-><java.util.HashSet: void <init>(java.util.Collection)>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <clinit>()>-><org.springframework.core.Constants: void <init>(java.lang.Class)>
<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<com.p6spy.engine.common.P6Util: java.lang.String joinNullSafe(java.util.Collection,java.lang.String)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.provider.endpoint.TokenKeyEndpoint: void <init>(org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter)>
<register-finalize <com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ScheduledExecutorService initializeHouseKeepingExecutorService()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder: void <init>(com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<com.google.common.cache.LocalCache$EntryFactory$5: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<java.util.AbstractSet: int hashCode()>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.redis.RedisHealthContributorAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.OptionalDouble: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.lang.Iterable,java.lang.CharSequence,java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.web.annotation.DiscoveredServletEndpoint: java.lang.String lambda$new$0(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.AllPermission: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$3: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.util.function.Tuple2: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$EmptySet: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void checkSubscription()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.image.PackedColorModel: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<org.springframework.data.redis.connection.RedisStandaloneConfiguration: java.lang.String lambda$setDatabase$1(int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerJwtConfiguration$JwtDecoderConfiguration: void <init>(org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties)>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.ArrayList$SubList: java.lang.Object set(int,java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.misc.Unsafe: void putFloatVolatile(java.lang.Object,long,float)>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><com.google.common.base.Joiner$3: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.font.AttributeValues: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.JumboEnumSet: boolean equals(java.lang.Object)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.data.redis.connection.RedisNode: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.springframework.aop.framework.ProxyCreatorSupport: void <init>(org.springframework.aop.framework.AopProxyFactory)>-><java.util.LinkedList: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: int getInt(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.ArrayList$SubList: int size()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.aop.target.EmptyTargetSource: java.lang.Class getTargetClass()>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeTypedContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean contains(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void stop()>-><java.lang.Enum: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.AbstractMap$1: boolean isEmpty()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: void <init>(java.lang.String,int)>-><org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: void addNode(java.lang.String,int)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<org.apache.tomcat.util.http.FastHttpDateFormat: void <clinit>()>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><org.aspectj.weaver.tools.TraceFactory: void <init>()>
<sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean add(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERVisibleString: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean equals(java.lang.Object)>
<org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.BaseObjectPoolConfig: boolean getTestOnBorrow()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<cn.hutool.http.HttpConnection: cn.hutool.http.HttpConnection header(java.util.Map,boolean)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.wf.captcha.utils.GifEncoder: void writeGraphicCtrlExt()>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<org.springframework.session.MapSession: java.lang.String generateId()>-><java.util.UUID: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.www.BasicAuthenticationFilter: void <init>(org.springframework.security.authentication.AuthenticationManager,org.springframework.security.web.AuthenticationEntryPoint)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1BitString: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.misc.Signal: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.Duration: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.temporal.WeekFields: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.beans.PropertyValue: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$8: void <init>(java.lang.String,int)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.cglib.core.MethodInfo: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
<sun.reflect.UnsafeStaticShortFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.ObjectName: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.io.SerializedString: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeByteFieldAccessorImpl: void setInt(java.lang.Object,int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.apache.catalina.core.ApplicationContext: void <init>(org.apache.catalina.core.StandardContext)>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.boot.autoconfigure.http.HttpProperties$Encoding$Type: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<org.springframework.core.annotation.MergedAnnotationCollectors: void lambda$toAnnotationSet$0(java.util.ArrayList,org.springframework.core.annotation.MergedAnnotation)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$SetFromMap: boolean remove(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean remove(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.core.publisher.FluxDoFinally$DoFinallyFuseableSubscriber: int size()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.ZoneId: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><java.util.AbstractMap: void <init>()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Vector$Itr: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><ch.qos.logback.core.status.StatusBase: boolean equals(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: java.lang.Object getAttribute(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.io.StringWriter: java.lang.StringBuffer getBuffer()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERBMPString: java.lang.String toString()>
<org.springframework.boot.logging.LoggerGroups: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: void removeClassLoader(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: boolean remove(javax.management.ObjectName,java.lang.ClassLoader)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.annotation.TypeMappedAnnotation: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.io.ObjectStreamField: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.CacheControlServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder header(java.lang.String,java.lang.String[])>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.ProtectionDomain: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><java.util.concurrent.atomic.AtomicInteger: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.locale.provider.RuleBasedBreakIterator: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1TaggedObject: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>-><java.lang.Object: void <init>()>
<org.aspectj.util.FuzzyBoolean$NeverFuzzyBoolean: void <init>()>-><org.aspectj.util.FuzzyBoolean: void <init>()>
<net.logstash.logback.encoder.com.lmax.disruptor.RingBufferFields: void <clinit>()>-><sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.MediaTypeReader: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.util.Properties: void <init>()>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isUseSsl()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isUseSsl()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.Maps$KeySet: void forEach(java.util.function.Consumer)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings: void <clinit>()>-><org.springframework.boot.web.server.MimeMappings: void <init>()>
<cn.hutool.core.lang.Console: void error(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.aspectj.bridge.AbortException: void printStackTrace(java.io.PrintStream)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.sql.Timestamp: java.lang.String toString()>
<org.apache.catalina.valves.ValveBase: void <init>(boolean)>-><org.apache.catalina.util.LifecycleMBeanBase: void <init>()>
<org.springframework.data.redis.listener.KeyspaceEventMessageListener: void init()>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: com.google.common.cache.LocalCache$Segment[] newSegmentArray(int)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.web.bind.annotation.RequestMethod: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.asm.Handle: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.String: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<com.p6spy.engine.spy.P6ModuleManager: void loadDriversExplicitly(com.p6spy.engine.spy.P6SpyLoadableOptions)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.aspectj.bridge.MessageUtil$2: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<org.apache.tomcat.util.modeler.ManagedBean: void addAttribute(org.apache.tomcat.util.modeler.AttributeInfo)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultUserInfoRestTemplateFactory: org.springframework.security.oauth2.client.OAuth2RestTemplate getUserInfoRestTemplate()>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.TextNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.TreeSet: boolean isEmpty()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.core.MethodParameter: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeIntegerFieldAccessorImpl: void setInt(java.lang.Object,int)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: int getInt(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.String getName()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeBooleanFieldAccessorImpl: void setInt(java.lang.Object,int)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.MBeanParameterInfo: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeByteFieldAccessorImpl: int getInt(java.lang.Object)>
<io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess: void <clinit>()>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: int size()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.calendar.Era: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: int compare(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.Advisor namedBeanToAdvisor(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.github.xiaoymin.knife4j.spring.configuration.Knife4jProperties: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.boot.ansi.Ansi8BitColor: boolean equals(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.zaxxer.hikari.util.ClockSource: void <clinit>()>-><com.zaxxer.hikari.util.ClockSource$Factory: com.zaxxer.hikari.util.ClockSource access$000()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.util.Set getAttributeNames()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<cn.hutool.http.HttpUtil: java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<sun.reflect.UnsafeShortFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.DefaultOperationReader: void <init>()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.LinkedList: boolean add(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.LifecycleEvent: java.lang.String getType()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void removeClassLoader(java.lang.ClassLoader,javax.management.ObjectName)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<sun.awt.DebugSettings: void loadSystemProperties()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ThreadFactory lambda$initializeHouseKeepingExecutorService$3()>-><com.zaxxer.hikari.util.UtilityElf$DefaultThreadFactory: void <init>(java.lang.String,boolean)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.io.StringWriter: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>
<org.apache.catalina.core.ApplicationContext: void <init>(org.apache.catalina.core.StandardContext)>-><org.apache.catalina.core.ApplicationContextFacade: void <init>(org.apache.catalina.core.ApplicationContext)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<reactor.util.function.Tuple2: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$RequestMappingInfoHandlerMappingDescriptionProvider: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,org.springframework.http.MediaType[])>
<org.aspectj.weaver.patterns.ThisOrTargetAnnotationPointcut: void <clinit>()>-><org.aspectj.weaver.Shadow$Kind: boolean neverHasTarget()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Currency: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.IdentityHashMap$KeySet: java.lang.Object[] toArray(java.lang.Object[])>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.web.context.support.ServletContextResource: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.GuavaCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.jsontype.NamedType: boolean equals(java.lang.Object)>
<org.springframework.util.Assert: void noNullElements(java.util.Collection,java.lang.String)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.ArrayNode: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl createComposingConstraintDescriptor(org.hibernate.validator.internal.metadata.core.ConstraintHelper,java.lang.reflect.Member,java.util.Map,int,java.lang.annotation.Annotation,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ConstraintType)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleServiceProviderPool: java.util.List findProviders(java.util.Locale)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.io.File: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.RegularEnumSet: boolean add(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getSingletonInstance()>-><org.springframework.aop.framework.ProxyConfig: boolean isProxyTargetClass()>
<org.springframework.beans.factory.support.SimpleAutowireCandidateResolver: boolean isRequired(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider$2: boolean isRequired()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setBoolean(int,boolean)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.Year: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.net.HttpCookie: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.io.ObjectStreamClass: java.lang.Long getDeclaredSUID(java.lang.Class)>-><java.lang.reflect.Field: int getModifiers()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$EmbeddedDatabaseConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Byte: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.MonthDay: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeTypedContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.apache.tomcat.util.http.FastHttpDateFormat: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.FloatNode: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultUserInfoRestTemplateFactory: org.springframework.security.oauth2.client.OAuth2RestTemplate getUserInfoRestTemplate()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus.PrometheusMetricsExportAutoConfiguration$PrometheusScrapeEndpointConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.ArrayList$SubList: boolean addAll(java.util.Collection)>
<com.p6spy.engine.spy.P6ModuleManager: void <init>()>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$SynchronizedCollection: boolean remove(java.lang.Object)>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.util.ArrayList: java.lang.Object get(int)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.LocalDateTime: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<org.aspectj.weaver.AdviceKind: void <clinit>()>-><org.aspectj.weaver.AdviceKind: void <init>(java.lang.String,int,int,boolean,boolean)>
<java.util.Collections: void swap(java.util.List,int,int)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedList: java.lang.Object get(int)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.JSON: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<com.zaxxer.hikari.HikariConfig: void <clinit>()>-><java.util.concurrent.TimeUnit$4: long toMillis(long)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: void setLong(java.lang.Object,long)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.MBeanAttributeInfo: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.security.BasicPermission: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.reflect.Modifier: boolean isFinal(int)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.redis.listener.PatternTopic: boolean equals(java.lang.Object)>
<org.thymeleaf.spring5.view.reactive.ThymeleafReactiveViewResolver: org.springframework.web.reactive.result.view.RedirectView lambda$new$0(java.lang.String)>-><org.springframework.web.reactive.result.view.RedirectView: void <init>(java.lang.String)>
<org.springframework.web.util.NestedServletException: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><java.util.ArrayList: void <init>(int)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintWriter: void close()>-><org.apache.catalina.connector.OutputBuffer: void close()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.http.HttpHeaders: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<register-finalize <org.aspectj.weaver.RuntimeVersion: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><com.google.common.base.Joiner$3: int size()>
<sun.reflect.UnsafeStaticByteFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$1Adapter: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.util.GenericArrayTypeImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void _checkImplicitlyNamedConstructors(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider doCreateConnectionProvider(io.lettuce.core.AbstractRedisClient,io.lettuce.core.codec.RedisCodec)>-><org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: java.util.List getNodes()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: void forEach(java.util.function.Consumer)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Hashtable$KeySet: boolean remove(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider doCreateConnectionProvider(io.lettuce.core.AbstractRedisClient,io.lettuce.core.codec.RedisCodec)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getReadFrom()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void unsubscribePattern(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.JumboEnumSet: boolean remove(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Throwable: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties: java.lang.String lambda$setPath$0(java.io.File)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager: void checkClientDetails(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Boolean: boolean parseBoolean(java.lang.String)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean add(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties)>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger wrapLogger(org.slf4j.Logger)>
<io.micrometer.core.instrument.Meter$Type: void <clinit>()>-><io.micrometer.core.instrument.Meter$Type: void <init>(java.lang.String,int)>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><org.springframework.web.servlet.handler.MappedInterceptor: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.TypedValue: void <init>(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.http.ResponseEntity: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Hashtable: java.lang.String toString()>
<org.apache.catalina.core.ApplicationContextFacade: void <init>(org.apache.catalina.core.ApplicationContext)>-><java.util.HashMap: void <init>()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<org.springframework.boot.actuate.endpoint.web.annotation.DiscoveredServletEndpoint: java.lang.String lambda$new$0(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.token.DefaultAuthenticationKeyGenerator: java.lang.String extractKey(org.springframework.security.oauth2.provider.OAuth2Authentication)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.session.web.http.HttpSessionAdapter: void <init>(org.springframework.session.Session,javax.servlet.ServletContext)>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.JumboEnumSet: boolean remove(java.lang.Object)>
<com.google.common.collect.Maps$Values: boolean remove(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<reactor.core.scheduler.ParallelScheduler: void <clinit>()>-><java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>
<org.springframework.ui.freemarker.FreeMarkerConfigurationFactory: freemarker.template.Configuration createConfiguration()>-><freemarker.template.Configuration: void setAllSharedVariables(freemarker.template.TemplateHashModelEx)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.atomic.AtomicIntegerArray: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<cn.hutool.http.HttpConnection: cn.hutool.http.HttpConnection header(java.util.Map,boolean)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeStaticLongFieldAccessorImpl: void setLong(java.lang.Object,long)>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.Tag: int compareTo(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.CompositeType: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.IndexedStringListSerializer: void serializeUsingCustom(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.Collections$SingletonList: int size()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setDate(int,java.sql.Date)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.logging.log4j.Level: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.reactive.ReactiveManagementChildContextConfiguration: void <init>()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus.PrometheusMetricsExportAutoConfiguration: void <init>()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.IdentityHashMap: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Throwable: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration: void <init>()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.google.common.cache.CacheBuilder: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.util.CollectionUtils$MultiValueMapAdapter: int hashCode()>-><java.util.Collections$UnmodifiableMap: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.aop.framework.ProxyCreatorSupport: void <init>(org.springframework.aop.framework.AopProxyFactory)>-><org.springframework.aop.framework.AdvisedSupport: void <init>()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.oauth2.client.test.OAuth2ContextSetup: void <init>(org.springframework.security.oauth2.client.test.RestTemplateHolder,org.springframework.security.oauth2.client.test.TestAccounts,org.springframework.core.env.Environment)>-><org.junit.rules.TestWatchman: void <init>()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.URI: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<org.springframework.session.PrincipalNameIndexResolver: java.lang.String resolveIndexValueFor(org.springframework.session.Session)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<javax.xml.datatype.FactoryFinder: java.lang.String which(java.lang.Class)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.alibaba.fastjson.util.GenericArrayTypeImpl: java.lang.String toString()>
<sun.reflect.UnsafeObjectFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.node.ObjectNode: java.lang.String toString()>
<org.springframework.session.security.web.authentication.SpringSessionRememberMeServices: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.OffsetTime: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: short getShort(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String,org.springframework.context.annotation.MBeanExportConfiguration$1)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String)>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.util.ClockSource: long elapsedMillis(long,long)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<org.thymeleaf.spring5.util.SpringVersionUtils: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.catalina.util.LifecycleMBeanBase: void unregister(javax.management.ObjectName)>-><org.apache.tomcat.util.modeler.Registry: void unregisterComponent(javax.management.ObjectName)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.util.context.Context0: java.lang.String toString()>
<org.springframework.aop.framework.CglibAopProxy: org.springframework.cglib.proxy.Callback[] getCallbacks(java.lang.Class)>-><org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: boolean isStatic()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><java.util.jar.Attributes: int size()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: void buildFromSorted(java.util.SortedMap)>-><java.util.TreeMap: java.util.Set entrySet()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$4: void <init>()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer getConfigurer(java.lang.Class)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Character$Subset: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.Extension: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.io.SerializedString: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.security.crypto.password.Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.asm.Handle: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<sun.reflect.UnsafeLongFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultUserInfoRestTemplateFactory: org.springframework.security.oauth2.client.OAuth2RestTemplate getUserInfoRestTemplate()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<org.springframework.boot.actuate.trace.http.HttpExchangeTracer: java.lang.Long lambda$sendingResponse$0(org.springframework.boot.actuate.trace.http.HttpTrace)>-><org.springframework.boot.actuate.trace.http.HttpTrace: java.time.Instant getTimestamp()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.alibaba.fastjson.util.FieldInfo: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><org.springframework.util.CollectionUtils: org.springframework.util.MultiValueMap unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.MutablePropertyValues: java.lang.String toString()>
<org.springframework.aop.framework.AdvisedSupport: void copyConfigurationFrom(org.springframework.aop.framework.AdvisedSupport,org.springframework.aop.TargetSource,java.util.List)>-><org.springframework.aop.framework.AdvisedSupport: void validateIntroductionAdvisor(org.springframework.aop.IntroductionAdvisor)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.CodeSource: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration: void <init>()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTime(int,java.sql.Time,java.util.Calendar)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration: void <init>()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeLongFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder withCacheConfiguration(java.lang.String,org.springframework.data.redis.cache.RedisCacheConfiguration)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.apache.catalina.LifecycleException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.session.data.redis.config.ConfigureNotifyKeyspaceEventsAction: java.lang.String getNotifyOptions(org.springframework.data.redis.connection.RedisConnection)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void initialize()>-><java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.CodeSigner: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.time.OffsetTime: int compareTo(java.lang.Object)>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.node.ArrayNode: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.ResourceLeakDetector$Record: java.lang.String toString()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><com.alibaba.fastjson.JSONArray: boolean addAll(java.util.Collection)>
<org.apache.http.pool.RouteSpecificPool: void shutdown()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.p6spy.engine.spy.option.P6OptionsRepository$DelayedOptionChange: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings: void <clinit>()>-><org.springframework.boot.web.server.MimeMappings: org.springframework.boot.web.server.MimeMappings unmodifiableMappings(org.springframework.boot.web.server.MimeMappings)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.GmtTimeZone: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList: int size()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.TextNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><java.util.Hashtable: int size()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>-><org.springframework.web.method.HandlerMethod: java.lang.annotation.Annotation getMethodAnnotation(java.lang.Class)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.net.www.MimeEntry: java.lang.String toString()>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: long getLong(java.lang.Object)>
<org.codehaus.jackson.map.deser.std.StdValueInstantiator: org.codehaus.jackson.map.JsonMappingException wrapException(java.lang.Throwable)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: void unregister(javax.management.ObjectName)>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry: void unregisterComponent(javax.management.ObjectName)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.HashMap$Node: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><java.lang.reflect.Field: int hashCode()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber: int size()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeContentsUsing(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<org.thymeleaf.spring5.SpringWebFluxTemplateEngine: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$LatestAsyncSink: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.AbstractConstant: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.Provider$Service: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.locale.Extension: java.lang.String toString()>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><java.io.File: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<reactor.core.scheduler.Schedulers: java.lang.Object scanExecutor(java.util.concurrent.Executor,reactor.core.Scannable$Attr)>-><java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<sun.reflect.UnsafeIntegerFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(int)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<org.springframework.ui.freemarker.FreeMarkerConfigurationFactory: freemarker.template.Configuration createConfiguration()>-><freemarker.template.Configuration: void setTemplateLoader(freemarker.cache.TemplateLoader)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<org.springframework.web.util.pattern.PathElement: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.lang.Character: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.AbstractConstant: java.lang.String toString()>
<org.codehaus.jackson.map.deser.SettableBeanProperty: java.io.IOException _throwAsIOE(java.lang.Exception)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: void _sortProperties()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.Reflection: java.lang.Class getCallerClass()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultUserInfoRestTemplateFactory: org.springframework.security.oauth2.client.OAuth2RestTemplate getUserInfoRestTemplate()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<cn.hutool.core.util.TypeUtil: java.lang.Class getClass(java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.Class getType()>
<sun.reflect.UnsafeLongFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(long)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1TaggedObject: java.lang.String toString()>
<sun.reflect.UnsafeFloatFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<sun.reflect.UnsafeBooleanFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void ensureObj(java.lang.Object)>
<org.codehaus.jackson.map.deser.SettableAnyProperty: void _throwAsIOE(java.lang.Exception,java.lang.String,java.lang.Object)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.zone.ZoneRules: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.EventObject: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyStringChecker: boolean equals(java.lang.Object)>-><java.lang.String: int length()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.introspect.MemberKey: java.lang.String toString()>
<org.springframework.web.servlet.function.RouterFunctions$DefaultRouterFunction: void <init>(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.SecureClassLoaderRepository: void <init>(javax.management.loading.ClassLoaderRepository)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.ZoneId: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,boolean,boolean)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.springframework.validation.beanvalidation.SpringValidatorAdapter: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.apache.catalina.core.ApplicationContext: void <init>(org.apache.catalina.core.StandardContext)>-><java.lang.Object: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.ArrayList: int size()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Locale: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: java.lang.String getApprovalKey(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: org.springframework.security.core.Authentication getUserAuthentication()>
<java.text.AttributeEntry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration: void <init>()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getSingletonInstance()>-><org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getProxy(org.springframework.aop.framework.AopProxy)>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>
<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>-><org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: int getIsolationLevel()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration: void <init>()>
<org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Show: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.math.BigInteger: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$4: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$BufferAsyncSink: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: char getChar(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.data.redis.listener.KeyspaceEventMessageListener: void init()>-><org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void close()>
<java.util.Currency$1: java.lang.Void run()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriberRegistrar: java.util.Map getContextAttributes()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.config.BeanExpressionContext: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.aop.framework.AdvisedSupport: void copyConfigurationFrom(org.springframework.aop.framework.AdvisedSupport,org.springframework.aop.TargetSource,java.util.List)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: void initializeAdvisorChain()>-><org.springframework.aop.framework.AopConfigException: void <init>(java.lang.String)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.lang.String lambda$processMap$0(org.springframework.security.web.util.matcher.RequestMatcher)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool: boolean softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)>-><com.zaxxer.hikari.pool.HikariPool: void closeConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTime(int,java.sql.Time)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<java.util.stream.Streams$ConcatSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: void forEachRemaining(java.util.function.Consumer)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean remove(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<org.apache.catalina.LifecycleEvent: void <init>(org.apache.catalina.Lifecycle,java.lang.String,java.lang.Object)>-><java.util.EventObject: void <init>(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,boolean)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,boolean)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<org.apache.tomcat.util.modeler.Registry: void unregisterComponent(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: void unregisterMBean(javax.management.ObjectName)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.Font: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.Rectangle: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.x509.RDN: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.LinkedList: int size()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<org.springframework.security.oauth2.client.test.OAuth2ContextSetup: void <init>(org.springframework.security.oauth2.client.test.RestTemplateHolder,org.springframework.security.oauth2.client.test.TestAccounts,org.springframework.core.env.Environment)>-><java.util.LinkedHashMap: void <init>()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.UUID: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: java.lang.String getLogName()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.Semaphore: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.commons.pool2.impl.BaseGenericObjectPool$IdentityWrapper: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getObject()>-><org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.HikariConfig: long getConnectionTimeout()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Optional: java.lang.String toString()>
<org.springframework.web.util.pattern.PathPatternParser: void <init>()>-><java.lang.Object: void <init>()>
<sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.node.ValueNode: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration$ServletTraceFilterConfiguration: void <init>()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.apache.catalina.connector.CoyoteOutputStream: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.POJONode: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.oauth2.common.exceptions.OAuth2Exception: java.lang.String toString()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><com.alibaba.fastjson.JSONArray: int size()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$DataSourcePoolMetadataMetricsConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<java.net.InMemoryCookieStore: void getInternal2(java.util.List,java.util.Map,java.lang.Comparable,boolean)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<register-finalize <org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void preDeregisterInvoke(javax.management.MBeanRegistration)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void throwMBeanRegistrationException(java.lang.Throwable,java.lang.String)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.google.common.base.Predicates$NotPredicate: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.QueryStringUriTemplateDecorator: void <init>()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.net.URI: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><java.util.Arrays$ArrayList: boolean contains(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler: java.lang.String determineTargetUrl(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><javax.servlet.ServletRequestWrapper: java.lang.String getParameter(java.lang.String)>
<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>-><java.lang.Long: java.lang.String toString(long)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><java.lang.reflect.AccessibleObject: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>
<register-finalize <org.thymeleaf.templatemode.TemplateMode: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.config.DependencyDescriptor: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.util.UUID: int compareTo(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object castToJavaBean(java.util.Map,java.lang.Class,com.alibaba.fastjson.parser.ParserConfig)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.google.common.cache.LocalCache$WriteQueue: void <init>()>-><com.google.common.cache.LocalCache$WriteQueue$1: void <init>(com.google.common.cache.LocalCache$WriteQueue)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.NullNode: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.lang.Double: int compareTo(java.lang.Object)>
<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.JsonMappingException instantiationException(java.lang.Class,java.lang.Throwable)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.support.MethodOverrides: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.util.regex.Pattern: java.lang.String quote(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeIntegerFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.misc.Unsafe: void putInt(java.lang.Object,long,int)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<com.google.common.cache.LocalCache$1: void <init>()>-><java.lang.Object: void <init>()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<org.springframework.security.web.csrf.CsrfFilter: void setRequireCsrfProtectionMatcher(org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.lang.String getId()>-><org.springframework.session.MapSession: java.lang.String getId()>
<sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class getTargetClass()>-><org.springframework.context.support.AbstractApplicationContext: java.lang.Class getType(java.lang.String)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<sun.text.normalizer.NormalizerImpl: void <clinit>()>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<java.text.AttributeEntry: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.internal.CustomizerRegistry: void add(org.springframework.cglib.core.KeyFactoryCustomizer)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>-><java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>
<com.google.common.cache.CacheBuilder: void <clinit>()>-><java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <init>()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<com.google.common.cache.LocalCache$Segment: java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int)>-><java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.ProtectionDomain: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Thread: java.lang.String toString()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.commons.pool2.impl.BaseGenericObjectPool$IdentityWrapper: java.lang.String toString()>
<org.springframework.security.oauth2.client.test.OAuth2ContextSetup$3: void <init>(org.springframework.security.oauth2.client.test.OAuth2ContextSetup)>-><org.springframework.http.client.HttpComponentsClientHttpRequestFactory: void <init>()>
<org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.concurrent.ArrayBlockingQueue: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedCollection: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.node.ArrayNode: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeCharacterFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.SubList$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>-><org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Duration: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.Advisor namedBeanToAdvisor(java.lang.Object)>-><org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry: org.springframework.aop.Advisor wrap(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.jar.Attributes: java.util.Set entrySet()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$IgnoreSink: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: boolean isExpired()>-><java.util.Date: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.HikariConfig: long getValidationTimeout()>
<org.aspectj.weaver.UnresolvedType: void <clinit>()>-><org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forPrimitiveType(java.lang.String)>
<sun.reflect.UnsafeDoubleFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<java.util.stream.ReferencePipeline: java.util.stream.Stream peek(java.util.function.Consumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<org.apache.tomcat.util.http.ConcurrentDateFormat: void <init>(java.lang.String,java.util.Locale,java.util.TimeZone)>-><java.util.concurrent.ConcurrentLinkedQueue: void <init>()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.juli.logging.DirectJDKLog: boolean isInfoEnabled()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isPipelined()>
<org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><org.springframework.boot.actuate.trace.http.Include: void <init>(java.lang.String,int)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doPUnsubscribe(boolean,byte[][])>
<java.util.AbstractSet: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.OffsetDateTime: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.aspectj.util.FuzzyBoolean$NoFuzzyBoolean: void <init>()>-><org.aspectj.util.FuzzyBoolean: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void <init>()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<reactor.util.Loggers$ConsoleLogger: void error(java.lang.String,java.lang.Throwable)>-><org.aspectj.bridge.AbortException: void printStackTrace(java.io.PrintStream)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.springframework.security.authentication.RememberMeAuthenticationToken: void <init>(java.lang.String,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration$EmbeddedTomcat: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><ch.qos.logback.core.status.StatusBase: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeStaticShortFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.alibaba.fastjson.parser.ParserConfig: com.alibaba.fastjson.parser.deserializer.ObjectDeserializer createJavaBeanDeserializer(java.lang.Class,java.lang.reflect.Type)>-><java.lang.reflect.Field: java.lang.String getName()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.p6spy.engine.common.Value: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.modules.ModelerSource getModelerSource(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.redis.connection.RedisNode: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: void assertNoDuplicateOperations(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean,org.springframework.util.MultiValueMap)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><java.lang.reflect.Field: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.Slf4JLogger: void debug(java.lang.String)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.IdentityHashMap$KeySet: int size()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.thymeleaf.spring5.util.SpringVersionUtils: void <clinit>()>-><java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy()>-><org.springframework.security.web.csrf.CsrfAuthenticationStrategy: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.aspectj.weaver.tools.PointcutPrimitive: void <init>(java.lang.String,int)>-><org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><ch.qos.logback.core.subst.Node: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorConfiguration: void <init>()>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.ILoggerFactory getILoggerFactory()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.data.mapping.model.Property: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.misc.Unsafe: void putLongVolatile(java.lang.Object,long,long)>
<org.springframework.scheduling.quartz.SchedulerAccessor: void registerJobsAndTriggers()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Optional: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><org.springframework.util.StringUtils: java.lang.String uriDecode(java.lang.String,java.nio.charset.Charset)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.text.AttributeEntry: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.lang.Integer: int compareTo(java.lang.Object)>
<com.wf.captcha.utils.Encoder: void flush_char(java.io.OutputStream)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<io.micrometer.prometheus.PrometheusNamingConvention: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.util.ArrayList: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<com.sun.net.httpserver.Filter$Chain: void doFilter(com.sun.net.httpserver.HttpExchange)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <init>(org.springframework.security.web.server.csrf.CsrfWebFilter$1)>-><org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Collections$EmptyEnumeration: java.lang.Object nextElement()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.JSONSerializer: void writeWithFormat(java.lang.Object,java.lang.String)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.YearMonth: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.expression.common.CompositeStringExpression: java.lang.String getValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.util.ConcurrentBag: boolean reserve(com.zaxxer.hikari.util.ConcurrentBag$IConcurrentBagEntry)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><org.springframework.security.config.annotation.AbstractSecurityBuilder: java.lang.Object build()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.util.TokenBuffer: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.JdkLogger: void debug(java.lang.String)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.util.ClockSource: long currentTime()>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.scheduling.config.Task: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.HashMap: boolean isEmpty()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.data.redis.listener.PatternTopic: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.logging.LoggersEndpointAutoConfiguration: void <init>()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><reactor.util.concurrent.Queues$ZeroQueue: boolean add(java.lang.Object)>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><cn.hutool.http.ContentType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: void <init>(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.SubList: int size()>
<java.security.Policy$2: java.security.Policy run()>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.math.BigInteger: int compareTo(java.lang.Object)>
<org.aspectj.weaver.MemberKind: void <init>(java.lang.String,int)>-><org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeStaticLongFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeStaticLongFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><org.springframework.data.redis.connection.util.ByteArrayWrapper: byte[] getArray()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object getDefaultValue(java.lang.String,java.lang.reflect.Method,java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.OptionalInt: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.http.HttpStatus$Series: void <clinit>()>-><org.springframework.http.HttpStatus$Series: void <init>(java.lang.String,int,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: void init()>
<sun.reflect.UnsafeDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.misc.Unsafe: void putDouble(java.lang.Object,long,double)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.lang.reflect.Field: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _createAndCache2(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><io.netty.buffer.SwappedByteBuf: int compareTo(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundryActuatorAutoConfiguration: org.springframework.boot.actuate.info.InfoContributor lambda$cloudFoundryInfoEndpointWebExtension$0(org.springframework.boot.info.GitProperties,org.springframework.boot.actuate.info.InfoContributor)>-><org.springframework.boot.actuate.info.GitInfoContributor: void <init>(org.springframework.boot.info.GitProperties,org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.lang.Class: java.lang.String getName()>
<sun.reflect.UnsafeStaticShortFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>(org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$1)>
<org.springframework.objenesis.instantiator.sun.UnsafeFactoryInstantiator: java.lang.Object newInstance()>-><sun.misc.Unsafe: java.lang.Object allocateInstance(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<org.springframework.beans.factory.ObjectProvider: java.lang.Object getIfUnique(java.util.function.Supplier)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfUnique()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber: int size()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>-><java.lang.reflect.Field: java.lang.Class getType()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <init>()>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.temporal.WeekFields: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.BooleanNode: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource freshTargetSource()>-><org.springframework.aop.target.SingletonTargetSource: void <init>(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<sun.reflect.UnsafeLongFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void ensureObj(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<io.netty.util.internal.CleanerJava6: void <clinit>()>-><java.lang.Object: java.lang.Class getClass()>
<io.micrometer.core.instrument.Tags$ArrayIterator: void remove()>-><java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1UTCTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><java.lang.reflect.Field: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.String getDependencyName()>-><java.lang.reflect.Field: java.lang.String getName()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>-><org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void checkSubscription()>-><org.springframework.data.redis.connection.RedisSubscribedConnectionException: void <init>(java.lang.String)>
<org.aspectj.weaver.NameMangler: void <clinit>()>-><java.lang.String: char[] toCharArray()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.apache.tomcat.util.collections.ConcurrentCache: void <init>(int)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$EmptyMap: java.util.Set entrySet()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.MetricsEndpointAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Package: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfiguration: void <init>()>
<sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.apache.commons.pool2.impl.DefaultPooledObject: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.thymeleaf.spring5.dialect.SpringStandardDialect: void <clinit>()>-><java.util.Collections: java.util.Map emptyMap()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.node.ArrayNode: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><sun.security.x509.X509CRLEntryImpl: int compareTo(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.IdentityHashMap$Values: boolean remove(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1UTCTime: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.springframework.util.unit.DataSize: int compareTo(java.lang.Object)>
<org.aspectj.weaver.ResolvedTypeMunger: void <clinit>()>-><org.aspectj.weaver.ResolvedTypeMunger$Kind: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.ThreadGroup: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.imageio.ImageTypeSpecifier: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Integer: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: long getLong(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1BitString: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.node.ArrayNode: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.ResponseMessagesReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.validation.FieldError: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: int getInt(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor$LongTaskTimingContext: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <init>()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>
<javax.print.MimeType: void parse(java.lang.String)>-><javax.print.MimeType$LexicalAnalyzer: void nextLexeme()>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeDoubleFieldAccessorImpl: long getLong(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.regex.Pattern: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.IdentityHashMap$Values: java.lang.Object[] toArray(java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.lang.String toString()>
<org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder$BCryptVersion: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<java.util.concurrent.Executors$RunnableAdapter: java.lang.Object call()>-><io.netty.util.internal.ThreadExecutorMap$2: void run()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeDoubleFieldAccessorImpl: void setInt(java.lang.Object,int)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.MutablePropertyValues: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,boolean)>
<org.springframework.security.oauth2.provider.token.DefaultTokenServices: org.springframework.security.oauth2.common.OAuth2AccessToken createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void setLong(java.lang.Object,long)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.map.jsontype.NamedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: int getUpdateCount()>-><com.p6spy.engine.wrapper.StatementWrapper: int getUpdateCount()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.apache.tomcat.util.collections.ConcurrentCache: void <init>(int)>-><java.util.concurrent.ConcurrentHashMap: void <init>(int)>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.MapType: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.SubList$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.ResourceLeakDetector$Record: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.Collections$SynchronizedCollection: int size()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.JumboEnumSet: int size()>
<springfox.documentation.spring.web.readers.parameter.ParameterDefaultReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><javax.management.ObjectName: int compareTo(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$UnmodifiableCollection: boolean remove(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.ZoneId: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void removeListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: int hashCode()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: int compareTo(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.collect.ArrayListMultimap: java.lang.String toString()>
<sun.reflect.UnsafeDoubleFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.google.common.cache.LocalCache$Strength: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository: java.lang.String getSessionAttrNameKey(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void <clinit>()>-><java.util.concurrent.TimeUnit$5: long toMillis(long)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.ZonedDateTime: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>-><org.aspectj.weaver.BCException: void printStackTrace(java.io.PrintStream)>
<org.springframework.security.web.csrf.CsrfAuthenticationStrategy: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.validation.FieldError: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><java.util.ArrayList: void <init>(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: void <init>()>
<com.google.common.cache.CacheBuilder: void <clinit>()>-><com.google.common.base.Suppliers: com.google.common.base.Supplier ofInstance(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.scheduling.config.ScheduledTask: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.util.List getPrimaryBeanNames(java.lang.String[])>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getPatterns()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<register-finalize <org.springframework.boot.actuate.metrics.http.Outcome: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.util.LifecycleBase: void stop()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$DelegatingHandlerMappingDescriptionProvider: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: java.lang.String toString()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1TaggedObject: java.lang.String toString()>
<register-finalize <org.apache.coyote.ActionCode: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.node.BinaryNode: java.lang.String toString()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.jni.SSL: java.lang.String versionString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<java.util.stream.Streams$ConcatSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Hashtable: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: boolean lambda$verify$1(org.springframework.data.mapping.Alias,org.springframework.data.util.ClassTypeInformation,java.util.Map$Entry)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.MonoCallableOnAssembly: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.reactive.ReactiveOAuth2ClientImportSelector$OAuth2ClientWebFluxSecurityConfiguration: void <init>()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.config.DependencyDescriptor: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber,java.util.Iterator,java.lang.Runnable)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.apache.http.HttpHost: void <init>(java.lang.String,int)>-><org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.p6spy.engine.logging.Category: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: long getLong(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.pool.HikariPool: com.zaxxer.hikari.pool.ProxyLeakTaskFactory access$500(com.zaxxer.hikari.pool.HikariPool)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<de.codecentric.boot.admin.client.registration.BlockingRegistrationClient$1: void <init>()>-><org.springframework.core.ParameterizedTypeReference: void <init>()>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.util.AbstractList: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration: void <init>()>-><org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.csrf.CsrfLogoutHandler: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.util.context.Context1: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object,java.lang.Throwable)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap)>-><java.lang.String: char[] toCharArray()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler: void <init>(org.springframework.http.HttpStatus)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object)>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.reflect.UnsafeBooleanFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>(java.lang.Class,java.lang.String[])>-><org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void load(java.lang.Class,java.lang.String[])>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.node.POJONode: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.DecimalNode: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$UnmodifiableMap: boolean isEmpty()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.xkcoding.justauth.JustAuthAutoConfiguration$AuthStateCacheAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.util.function.Tuple2: java.lang.String toString()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeCharacterFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator getCachingOperationNameGenerator()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.jta.bitronix.PoolingDataSourceBean: void <init>()>-><bitronix.tm.resource.jdbc.PoolingDataSource: void setMaxPoolSize(int)>
<com.sun.imageio.spi.FileImageOutputStreamSpi: javax.imageio.stream.ImageOutputStream createOutputStreamInstance(java.lang.Object,boolean,java.io.File)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<reactor.util.function.Tuple4: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeObjectFieldAccessorImpl: long getLong(java.lang.Object)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.Reflection: java.lang.Class getCallerClass()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Period: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.MonthDay: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Date: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.oauth2.common.exceptions.InvalidTokenException: void <init>(java.lang.String)>-><org.springframework.security.oauth2.common.exceptions.ClientAuthenticationException: void <init>(java.lang.String)>
<org.apache.catalina.util.LifecycleMBeanBase: java.lang.String getDomain()>-><org.apache.catalina.core.ContainerBase: java.lang.String getDomainInternal()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.Period: boolean equals(java.lang.Object)>
<org.springframework.core.env.CommandLineArgs: void addOptionArg(java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.Map getErrorAttributes(javax.servlet.http.HttpServletRequest,boolean)>
<org.apache.tomcat.util.http.parser.HttpParser: void relax(boolean[],java.lang.String)>-><org.apache.tomcat.util.http.parser.HttpParser: boolean isRelaxable(int)>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<org.thymeleaf.spring5.view.reactive.ThymeleafReactiveViewResolver: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>
<org.apache.coyote.ActionCode: void <clinit>()>-><org.apache.coyote.ActionCode: void <init>(java.lang.String,int)>
<org.springframework.core.io.VfsUtils: void <clinit>()>-><java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.web.context.request.AbstractRequestAttributesScope: java.lang.Object resolveContextualObject(java.lang.String)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object resolveReference(java.lang.String)>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.aop.framework.ProxyCreatorSupport: org.springframework.aop.framework.AopProxyFactory getAopProxyFactory()>
<org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: void <init>(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.time.Duration getMaxInactiveInterval()>
<org.apache.catalina.core.ApplicationContext: void <init>(org.apache.catalina.core.StandardContext)>-><org.apache.catalina.core.ContainerBase: org.apache.catalina.Container getParent()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpHeaders: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$WebSecurityConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: java.lang.String toString()>
<com.alibaba.fastjson.serializer.JSONSerializer: void writeWithFormat(java.lang.Object,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.thymeleaf.spring5.util.SpringVersionUtils: void <clinit>()>-><java.lang.String: int indexOf(int,int)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<com.baomidou.dynamic.datasource.DynamicDataSourceClassResolver: void <init>()>-><java.lang.Object: void <init>()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.thymeleaf.util.ClassLoaderUtils: java.lang.Class findClass(java.lang.String)>-><org.thymeleaf.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: java.lang.String toString()>
<register-finalize <com.zaxxer.hikari.util.IsolationLevel: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.util.context.Context0: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.alibaba.fastjson.serializer.JSONSerializer: void writeWithFormat(java.lang.Object,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><org.springframework.session.data.redis.RedisIndexedSessionRepository: org.springframework.session.SaveMode access$600(org.springframework.session.data.redis.RedisIndexedSessionRepository)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.thymeleaf.TemplateEngine: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void add(java.util.Collection,byte[][])>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.util.unit.DataSize: boolean equals(java.lang.Object)>
<org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(float)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration: void <init>()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.Hashtable: boolean isEmpty()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.stream.ReferencePipeline: java.util.stream.Stream peek(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11: void <init>(java.util.stream.ReferencePipeline,java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int,java.util.function.Consumer)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><java.lang.String: java.lang.String substring(int,int)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.ResolvableType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ValuesView: boolean remove(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: java.lang.Object getAttribute(java.lang.String)>-><javax.management.MBeanServerDelegate: java.lang.String getSpecificationVendor()>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.SubList: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: int size()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.WeakHashMap$Values: int size()>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$7: void <init>(java.lang.String,int)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<javax.management.MBeanServerDelegate: java.lang.String getMBeanServerId()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.reflect.UnsafeBooleanFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.thymeleaf.spring5.SpringWebFluxTemplateEngine: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>-><org.apache.catalina.LifecycleEvent: void <init>(org.apache.catalina.Lifecycle,java.lang.String,java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>-><org.springframework.data.redis.connection.util.ByteArrayWrapper: void <init>(byte[])>
<org.aspectj.weaver.MemberImpl: org.aspectj.weaver.MemberImpl method(org.aspectj.weaver.UnresolvedType,int,org.aspectj.weaver.UnresolvedType,java.lang.String,org.aspectj.weaver.UnresolvedType[])>-><java.lang.String: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERT61String: java.lang.String toString()>
<org.aspectj.weaver.reflect.ReflectionWorld: void <clinit>()>-><java.util.HashMap: void <init>()>
<org.springframework.boot.autoconfigure.http.HttpProperties$Encoding$Type: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpProperties$Encoding$Type: void <init>(java.lang.String,int)>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerByLookup(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.springframework.web.util.pattern.RegexPathElement: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.lettuce.core.RedisURI: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.OptionalDouble: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: boolean isRegistered(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: boolean isRegistered(javax.management.ObjectName)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>
<sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: char getChar(java.lang.Object)>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$11: void <init>()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.String: byte[] getBytes()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.sql.Time: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.CodeSource: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.apache.catalina.connector.CoyoteOutputStream: void write(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void checkRegisterForWrite()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<cn.hutool.core.lang.Console: void log(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: long getLong(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration$SpringMvcConfiguration: void <init>()>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.IndexedStringListSerializer: void serializeContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.base.Joiner$3: int size()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<javax.print.MimeType: java.lang.String removeBackslashes(java.lang.String)>-><java.lang.String: int length()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.ZonedDateTime: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.DefaultTagsProvider: void <init>()>-><java.lang.Object: void <init>()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.EnumMap$KeySet: boolean remove(java.lang.Object)>
<cn.hutool.core.bean.BeanDesc: cn.hutool.core.bean.BeanDesc$PropDesc createProp(java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.Class getType()>
<reactor.util.function.Tuple2: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.aspectj.weaver.patterns.ThisOrTargetAnnotationPointcut: void <clinit>()>-><org.aspectj.weaver.Shadow$Kind: boolean neverHasThis()>
<cn.hutool.core.convert.impl.MapConverter: java.util.Map convertInternal(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.GmtTimeZone: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: long getLong(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroupMember: int compareTo(java.lang.Object)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.PriorityQueue: void siftUp(int,java.lang.Object)>-><java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<org.codehaus.jackson.map.deser.SettableBeanProperty: void _throwAsIOE(java.lang.Exception,java.lang.Object)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.security.oauth2.provider.endpoint.TokenKeyEndpoint: void <init>(org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter)>-><java.lang.Object: java.lang.Class getClass()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(double)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.io.SerializedString: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeCharacterFieldAccessorImpl: void setInt(java.lang.Object,int)>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$3: void <init>(java.lang.String,int)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceMessageListener: void <init>(org.springframework.data.redis.connection.MessageListener)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<net.logstash.logback.encoder.com.lmax.disruptor.RingBufferFields: void <clinit>()>-><sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.session.security.web.authentication.SpringSessionRememberMeServices: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties: java.lang.String lambda$setPath$0(java.io.File)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><reactor.util.function.Tuple2: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration: void <init>()>
<org.springframework.security.web.firewall.FirewalledRequest: void <init>(javax.servlet.http.HttpServletRequest)>-><javax.servlet.http.HttpServletRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Hashtable: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><reactor.util.context.Context1: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.lettuce.core.protocol.CommandArgs$CharArrayArgument: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.core.annotation.MergedAnnotationCollectors: void lambda$toAnnotationSet$0(java.util.ArrayList,org.springframework.core.annotation.MergedAnnotation)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.map.type.CollectionLikeType: boolean equals(java.lang.Object)>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTimestamp(int,java.sql.Timestamp)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.core.publisher.Operators$ScalarSubscription: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Period: java.lang.String toString()>
<org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager: void checkClientDetails(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.aspectj.weaver.AjcMemberMaker: void <clinit>()>-><org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forSignature(java.lang.String)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNull(int,int)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setNull(int,int)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.lang.String lambda$processMap$0(org.springframework.security.web.util.matcher.RequestMatcher)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.aspectj.util.FuzzyBoolean$YesFuzzyBoolean: void <init>()>-><org.aspectj.util.FuzzyBoolean: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.thymeleaf.cache.StandardParsedTemplateEntryValidator: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.math.BigInteger: java.lang.String toString()>
<org.aspectj.weaver.patterns.TypePattern$MatchKind: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.BooleanNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.IndexedStringListSerializer: void serializeContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void debug(java.lang.String)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.net.URL: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean equals(java.lang.Object)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.Semaphore: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyStatement: int getUpdateCount()>-><com.p6spy.engine.wrapper.StatementWrapper: int getUpdateCount()>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$UrlHandlerMappingDescriptionProvider: void <init>(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><com.google.common.base.Joiner$3: int size()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.GuavaCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.LocalCache$Strength getKeyStrength()>-><com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.boot.cloud.CloudPlatform$4: void <init>(java.lang.String,int)>-><org.springframework.boot.cloud.CloudPlatform: void <init>(java.lang.String,int,org.springframework.boot.cloud.CloudPlatform$1)>
<com.google.common.cache.LocalCache$Strength: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>-><com.google.common.cache.LocalCache$Strength: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.atomic.AtomicLongArray: java.lang.String toString()>
<org.springframework.boot.actuate.context.ShutdownEndpoint: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.net.URL: java.io.InputStream openStream()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object lambda$invokeInitMethods$5(java.lang.Object)>-><org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider: void afterPropertiesSet()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.openmbean.SimpleType: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.http.HttpStatus$Series: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.security.Policy$2: java.security.Policy run()>-><org.aspectj.weaver.BCException: void printStackTrace()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doPUnsubscribe(boolean,byte[][])>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<sun.text.normalizer.UCharacter: void <clinit>()>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.lang.Boolean: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Long: java.lang.String toString()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.springframework.aop.framework.ProxyFactoryBean: void initializeAdvisorChain()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.http.ResponseEntity: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.JsonProcessingException: java.lang.String toString()>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><org.aspectj.weaver.ResolvedType$PointcutGetter: void <init>(org.aspectj.weaver.ResolvedType$1)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.oauth2.provider.approval.Approval: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<org.springframework.web.util.HtmlCharacterEntityReferences: java.lang.String lambda$new$0(int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.beans.PropertyDescriptor: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$SingletonMap: boolean isEmpty()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.collect.ArrayListMultimap: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.google.common.cache.LocalCache$2: void <init>()>-><java.util.AbstractQueue: void <init>()>
<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.Object get(java.lang.Object,java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.GmtTimeZone: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ParameterMultiplesReader: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.zone.ZoneRules: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.ProcessEnvironment$StringEntrySet: int size()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeCharacterFieldAccessorImpl: long getLong(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.aop.TruePointcut: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>-><org.springframework.core.annotation.AnnotationAwareOrderComparator: void sort(java.util.List)>
<java.util.PriorityQueue: void siftDown(int,java.lang.Object)>-><java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: java.lang.Object getAttribute(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$Values: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>-><org.springframework.security.access.expression.AbstractSecurityExpressionHandler: org.springframework.expression.ExpressionParser getExpressionParser()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache: boolean usesAccessQueue()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<org.springframework.session.PrincipalNameIndexResolver: java.lang.String resolveIndexValueFor(org.springframework.session.Session)>-><org.springframework.session.SingleIndexResolver: java.lang.String getIndexName()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<register-finalize <org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void checkSubscription()>
<com.zaxxer.hikari.pool.HikariProxyResultSet: java.lang.Object getObject(int)>-><com.zaxxer.hikari.pool.ProxyResultSet: java.sql.SQLException checkException(java.sql.SQLException)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.InetSocketAddress: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><java.util.ArrayList: void <init>()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: java.lang.Object performBuild()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: void <init>()>-><com.fasterxml.classmate.TypeResolver: void <init>(com.fasterxml.classmate.util.ResolvedTypeCache)>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.sql.Timestamp: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <init>(java.lang.String[])>-><java.lang.Object: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFloatFieldAccessorImpl: void setInt(java.lang.Object,int)>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean contains(java.lang.Object)>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><io.netty.util.internal.RecyclableArrayList: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.aspectj.weaver.ResolvedPointcutDefinition: void <clinit>()>-><org.aspectj.weaver.patterns.Pointcut: org.aspectj.weaver.patterns.Pointcut makeMatchesNothing(org.aspectj.weaver.patterns.Pointcut$State)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.springframework.web.util.UriComponents: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equals(java.lang.Object)>
<org.aspectj.weaver.tools.TraceFactory: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.wf.captcha.SpecCaptcha: boolean graphicsImage(char[],java.io.OutputStream)>-><org.apache.catalina.connector.CoyoteOutputStream: void close()>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<sun.reflect.UnsafeStaticByteFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<reactor.util.Loggers$ConsoleLogger: void error(java.lang.String,java.lang.Throwable)>-><org.aspectj.weaver.BCException: void printStackTrace(java.io.PrintStream)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Thread: java.lang.String toString()>
<org.springframework.security.web.authentication.www.BasicAuthenticationConverter: void setAuthenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.codehaus.jackson.map.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeStaticObjectFieldAccessorImpl: void setInt(java.lang.Object,int)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.SessionAutoConfiguration$ServletSessionConfiguration: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void setIgnoredMediaTypes(java.util.Set)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.introspect.MemberKey: boolean equals(java.lang.Object)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.JsonProcessingException: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.boot.SpringBootExceptionHandler: boolean isLogConfigurationMessage(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.lang.Byte: int compareTo(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserializeUsingCustom(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection,com.fasterxml.jackson.databind.JsonDeserializer)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean add(java.lang.Object)>
<com.google.common.collect.AbstractMultimap: boolean putAll(java.lang.Object,java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.node.TextNode: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: java.lang.String getApprovalKey(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.OAuth2Request: java.lang.String getClientId()>
<register-finalize <org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiListingReferenceScanner: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.util.unit.DataSize: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<javax.servlet.http.HttpServlet: void <clinit>()>-><java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void <init>(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.reflect.Field: int getModifiers()>
<com.google.common.cache.LocalCache$Strength$3: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$Strength: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<org.springframework.aop.framework.AdvisedSupport: void copyConfigurationFrom(org.springframework.aop.framework.AdvisedSupport,org.springframework.aop.TargetSource,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.pool.HikariPool: long access$400(com.zaxxer.hikari.pool.HikariPool)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: void forEach(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: boolean isReadOnly()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Arrays$ArrayList: int size()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.Character: java.lang.Character valueOf(char)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: void _renameProperties()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><java.time.Instant: long toEpochMilli()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Hashtable: java.lang.String toString()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Collections$SetFromMap: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.RegularEnumSet: boolean add(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Character: boolean equals(java.lang.Object)>
<org.springframework.security.web.FilterChainProxy$VirtualFilterChain: void <init>(org.springframework.security.web.firewall.FirewalledRequest,javax.servlet.FilterChain,java.util.List,org.springframework.security.web.FilterChainProxy$1)>-><org.springframework.security.web.FilterChainProxy$VirtualFilterChain: void <init>(org.springframework.security.web.firewall.FirewalledRequest,javax.servlet.FilterChain,java.util.List)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.type.MapLikeType: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.alibaba.fastjson.JSONObject: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator: void <init>(java.util.concurrent.ScheduledExecutorService)>-><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void <init>(java.util.concurrent.ExecutorService)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.concurrent.DelayQueue: boolean offer(java.util.concurrent.Delayed)>-><java.util.PriorityQueue: java.lang.Object peek()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.sql.Date: java.lang.String toString()>
<net.logstash.logback.encoder.com.lmax.disruptor.util.Util$1: sun.misc.Unsafe run()>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void <init>(java.util.Properties)>-><com.zaxxer.hikari.util.PropertyElf: void setTargetFromProperties(java.lang.Object,java.util.Properties)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,org.codehaus.jackson.map.JsonMappingException$Reference)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void flush()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.kafka.KafkaAnnotationDrivenConfiguration: void <init>(org.springframework.boot.autoconfigure.kafka.KafkaProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfUnique()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.util.unit.DataSize: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: int size()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings emptyBindings()>
<org.springframework.boot.actuate.health.Health$Builder: void <init>(org.springframework.boot.actuate.health.Status)>-><java.lang.Object: void <init>()>
<java.util.AbstractList: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedHeader(java.lang.String)>-><java.util.ArrayList: void <init>(int)>
<org.springframework.boot.web.server.MimeMappings: void <clinit>()>-><org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<java.net.InMemoryCookieStore: void getInternal2(java.util.List,java.util.Map,java.lang.Comparable,boolean)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: void remove()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setString(int,java.lang.String)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setString(int,java.lang.String)>
<org.codehaus.jackson.map.deser.SettableBeanProperty: java.io.IOException _throwAsIOE(java.lang.Exception)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.thymeleaf.spring5.util.SpringVersionUtils: void <clinit>()>-><java.lang.Package: java.lang.String getName()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERUTF8String: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Character: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: int size()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setDate(int,java.sql.Date)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.CharSequence convertElement(java.lang.CharSequence,boolean,org.springframework.boot.context.properties.source.ConfigurationPropertyName$ElementCharPredicate)>-><java.nio.CharBuffer: int length()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.annotation.TypeMappedAnnotation: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.type.ArrayType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void <init>(java.util.concurrent.ExecutorService)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object lambda$destroy$0()>-><org.springframework.web.filter.GenericFilterBean: void destroy()>
<sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: char getChar(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<sun.reflect.UnsafeFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(float)>
<org.springframework.security.web.firewall.RequestWrapper: java.lang.String strip(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<io.micrometer.prometheus.PrometheusMeterRegistry: java.util.List tagValues(io.micrometer.core.instrument.Meter$Id)>-><java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.sun.net.httpserver.Headers: void add(java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.apache.tomcat.util.buf.UEncoder: java.util.BitSet initialSafeChars()>-><java.util.BitSet: void set(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><java.lang.Enum: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><java.lang.Object: void notifyAll()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<java.util.AbstractSet: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration: void <init>()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.thymeleaf.linkbuilder.AbstractLinkBuilder: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.IdentityHashMap$EntrySet: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNull(int,int,java.lang.String)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setNull(int,int,java.lang.String)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.x509.AVA: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicIntegerArray: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.lang.String: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.mapping.model.Property: boolean equals(java.lang.Object)>
<reactor.core.scheduler.DelegateServiceScheduler: boolean isDisposed()>-><java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>
<org.aspectj.util.LangUtil: java.util.List getFirstNumbers(java.lang.String)>-><java.util.ArrayList: void <init>()>
<sun.reflect.UnsafeFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.misc.Unsafe: void putFloat(java.lang.Object,long,float)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.data.util.Pair: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<com.google.common.cache.LocalCache$AccessQueue$1: void <init>(com.google.common.cache.LocalCache$AccessQueue)>-><com.google.common.cache.LocalCache$AbstractReferenceEntry: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.Semaphore: java.lang.String toString()>
<org.springframework.web.servlet.function.RequestPredicates: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.RememberMeAuthenticationToken: void <init>(java.lang.String,java.lang.Object,java.util.Collection)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><com.google.common.base.Joiner$3: int size()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean equals(java.lang.Object)>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.util.function.Tuple2: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap$LinkedValues: int size()>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: int getTimeout()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<cn.hutool.http.HttpConnection: cn.hutool.http.HttpConnection header(java.util.Map,boolean)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<org.springframework.aop.aspectj.AspectJExpressionPointcut: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean remove(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.node.LongNode: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void grow(int)>-><java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.math.BigDecimal: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<cn.hutool.core.bean.BeanDesc: cn.hutool.core.bean.BeanDesc init()>-><java.lang.reflect.Field: java.lang.String getName()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.google.common.collect.ArrayListMultimap: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.time.LocalTime: int compareTo(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><io.netty.util.internal.RecyclableArrayList: boolean addAll(java.util.Collection)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration: void <init>(org.springframework.mail.javamail.JavaMailSenderImpl)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaTypeCache: void <init>(int)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.commons.pool2.impl.DefaultPooledObject: java.lang.String toString()>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.IdentityHashMap$EntrySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.ResponseMessagesReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.TypeNameExtractor getTypeNameExtractor()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeIntegerFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.sun.jmx.mbeanserver.JmxMBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.springframework.boot.jta.atomikos.AtomikosDataSourceBean: void afterPropertiesSet()>-><com.atomikos.jdbc.AtomikosDataSourceBean: void setUniqueResourceName(java.lang.String)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.cglib.core.ClassInfo: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration: void <init>()>
<org.apache.catalina.util.LifecycleBase: void init()>-><org.apache.catalina.valves.ValveBase: void initInternal()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.TextNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: void validate()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder expiry(java.time.Duration)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.annotation.DiscoveredServletEndpoint: java.lang.String lambda$new$0(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.lettuce.core.internal.AbstractInvocationHandler: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String getValue()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Double: boolean equals(java.lang.Object)>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<java.security.Security: void initialize()>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<org.springframework.boot.web.embedded.tomcat.TldSkipPatterns: void <clinit>()>-><java.util.LinkedHashSet: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$DataSourceTransactionManagerConfiguration: void <init>()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.reflect.UnsafeShortFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.validation.ObjectError: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.aspectj.weaver.patterns.AnnotationTypePattern: void <clinit>()>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Optional: boolean equals(java.lang.Object)>
<org.springframework.aop.aspectj.AspectJExpressionPointcut: void <clinit>()>-><java.util.HashSet: void <init>()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection _deserializeWithObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext getEvaluationContext()>-><org.springframework.expression.spel.support.StandardEvaluationContext: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration: void <init>()>
<org.apache.catalina.util.LifecycleMBeanBase: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.thymeleaf.util.ClassLoaderUtils: boolean isClassPresent(java.lang.String)>-><org.thymeleaf.util.ClassLoaderUtils: java.lang.Class findClass(java.lang.String)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.p6spy.engine.spy.P6ModuleManager: void loadDriversExplicitly(com.p6spy.engine.spy.P6SpyLoadableOptions)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap$LinkedEntrySet: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat.TomcatMetricsAutoConfiguration: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.HashMap$Node: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.method.OAuth2MethodSecurityConfiguration: void <init>()>-><org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void removeListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.pubsub.StatefulRedisPubSubConnection switchToPubSub()>-><org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void close()>
<org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.String)>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.LogFactory getFactory()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.Scannable$Attr$1: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint$ConfigurationPropertiesAnnotationIntrospector: void <init>(org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint$1)>-><org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint$ConfigurationPropertiesAnnotationIntrospector: void <init>()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.aspectj.util.LangUtil: java.util.List getFirstNumbers(java.lang.String)>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getChannels()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: int compareTo(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.FieldPosition: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.lettuce.core.internal.AbstractInvocationHandler: java.lang.String toString()>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void removeIfEmpty()>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$DropAsyncSink: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Object: java.lang.Class getClass()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object resolveReference(java.lang.String)>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.math.BigDecimal: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.view.ResourceBundleViewResolver: org.springframework.beans.factory.BeanFactory initFactory(java.util.Locale)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext$1: void done()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: java.util.List getNodes()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.Rectangle: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERGeneralString: java.lang.String toString()>
<org.springframework.security.oauth2.client.resource.OAuth2AccessDeniedException: void <init>(java.lang.String)>-><org.springframework.security.oauth2.common.exceptions.OAuth2Exception: void <init>(java.lang.String)>
<java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArraySet: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaultLogoutSuccessHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<java.util.concurrent.DelayQueue: boolean offer(java.util.concurrent.Delayed)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void signal()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration: void <init>(org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.util.stream.Stream orderedStream()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$Values: void forEach(java.util.function.Consumer)>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean remove(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean remove(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.SynthesizingMethodParameter: void <init>(java.lang.reflect.Method,int)>-><org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.aspectj.weaver.World: void <clinit>()>-><org.aspectj.weaver.tools.DefaultTraceFactory: org.aspectj.weaver.tools.Trace getTrace(java.lang.Class)>
<org.springframework.aop.framework.ProxyFactoryBean: void initializeAdvisorChain()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.core.publisher.Operators$MonoSubscriber: int size()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.context.properties.PropertyMapper$Source: boolean lambda$whenHasText$3(java.lang.Object)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><reactor.util.concurrent.Queues$ZeroQueue: boolean remove(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.Object lazyBean(java.lang.Class)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>
<java.net.URLClassLoader: void close()>-><com.zaxxer.hikari.HikariDataSource: void close()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<java.util.Collections: void swap(java.util.List,int,int)>-><com.alibaba.fastjson.JSONArray: java.lang.Object set(int,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.sun.imageio.spi.RAFImageOutputStreamSpi: javax.imageio.stream.ImageOutputStream createOutputStreamInstance(java.lang.Object,boolean,java.io.File)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<com.p6spy.engine.common.P6Util: java.lang.String joinNullSafe(java.util.Collection,java.lang.String)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: void <init>()>-><org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: void <init>(org.springframework.validation.DataBinder)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.DecimalNode: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void preDeregisterInvoke(javax.management.MBeanRegistration)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxCreate$ErrorAsyncSink: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.core.Constants: void <init>(java.lang.Class)>-><java.lang.reflect.Field: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.SignalType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: java.lang.Object getAttribute(java.lang.String)>-><javax.management.MBeanServerDelegate: java.lang.String getSpecificationName()>
<java.util.stream.Streams$ConcatSpliterator: int characteristics()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: int characteristics()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$8: void <init>()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.AbstractList: boolean add(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder bufferLength(java.lang.Integer)>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig: java.lang.Integer access$702(io.micrometer.core.instrument.distribution.DistributionStatisticConfig,java.lang.Integer)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.zone.ZoneRules: boolean equals(java.lang.Object)>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><reactor.util.Loggers$ConsoleLogger: void error(java.lang.String,java.lang.Throwable)>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.springframework.jdbc.support.JdbcUtils: void <clinit>()>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.JsonMappingException$Reference: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.IsolationLevel: void <clinit>()>-><com.zaxxer.hikari.util.IsolationLevel: void <init>(java.lang.String,int,int)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.io.FileSystemResource: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.ZoneOffset: java.lang.String toString()>
<org.aspectj.weaver.MemberImpl: org.aspectj.weaver.MemberImpl method(org.aspectj.weaver.UnresolvedType,int,org.aspectj.weaver.UnresolvedType,java.lang.String,org.aspectj.weaver.UnresolvedType[])>-><org.aspectj.weaver.MemberImpl: void <init>(org.aspectj.weaver.MemberKind,org.aspectj.weaver.UnresolvedType,int,org.aspectj.weaver.UnresolvedType,java.lang.String,org.aspectj.weaver.UnresolvedType[])>
<com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><java.lang.Object: void <init>()>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.String: int length()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeRefreshToken(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder percentilesHistogram(java.lang.Boolean)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: java.lang.Object getAttribute(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Throwable: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: int size()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.Object[] toArray(java.lang.Object[])>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<org.codehaus.jackson.map.ser.std.IndexedStringListSerializer: void serializeUsingCustom(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.font.EAttribute: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicLongArray: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><java.lang.reflect.Field: int hashCode()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder withCacheConfiguration(java.lang.String,org.springframework.data.redis.cache.RedisCacheConfiguration)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeTypedContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(org.springframework.security.access.ConfigAttribute)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater: void <init>(java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.reflect.Field: java.lang.Class getType()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener)>-><org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.util.Pair: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.wf.captcha.GifCaptcha: boolean out(java.io.OutputStream)>-><org.apache.catalina.connector.CoyoteOutputStream: void close()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.web.method.ControllerAdviceBean: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.boot.ResourceBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.text.DecimalFormat: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.DoubleNode: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.plugins.PathAndParametersEquivalence: void <init>()>-><com.google.common.base.Equivalence: void <init>()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.aspectj.weaver.tools.TraceFactory: boolean getBoolean(java.lang.String,boolean)>-><java.lang.Boolean: boolean booleanValue()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration: void <init>()>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<com.google.common.collect.AbstractMapBasedMultimap: boolean put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.RegularEnumSet: int size()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.ConnectableFluxOnAssembly: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.jar.Manifest: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.FieldInfo: boolean getArgument(java.lang.reflect.Type[],java.lang.reflect.TypeVariable[],java.lang.reflect.Type[])>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<org.apache.catalina.util.LifecycleMBeanBase: void unregister(javax.management.ObjectName)>-><org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.pool.HikariPool: void softEvictConnections()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafJava8TimeDialect: void <init>()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.StringCharacterIterator: boolean equals(java.lang.Object)>
<org.springframework.data.redis.serializer.ByteArrayRedisSerializer: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Handle: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Arrays$ArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode: void <clinit>()>-><org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode: void <init>(java.lang.String,int)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.hibernate.validator.internal.engine.path.PathImpl: void <init>(java.util.List)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.awt.Color: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<javax.print.MimeType$LexicalAnalyzer: void nextLexeme()>-><java.lang.String: char charAt(int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection: java.lang.Object lambda$getClosedConnection$0(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>-><java.sql.SQLException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyConnection: void <clinit>()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.x509.GeneralName: boolean equals(java.lang.Object)>
<sun.awt.DebugSettings: java.lang.String toString()>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<net.logstash.logback.encoder.com.lmax.disruptor.MultiProducerSequencer: void <clinit>()>-><sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>
<org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>
<org.aspectj.weaver.ResolvedTypeMunger$Kind: void <init>(java.lang.String,int)>-><org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.AbstractList: int hashCode()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.CodeSigner: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: boolean usesAccessEntries()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.aspectj.weaver.patterns.ConcreteCflowPointcut: void <clinit>()>-><org.aspectj.weaver.MemberImpl: org.aspectj.weaver.MemberImpl method(org.aspectj.weaver.UnresolvedType,int,org.aspectj.weaver.UnresolvedType,java.lang.String,org.aspectj.weaver.UnresolvedType[])>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.io.SerializedString: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.StringCache: void <clinit>()>-><java.lang.Integer: int parseInt(java.lang.String)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.zaxxer.hikari.pool.PoolEntry: void <clinit>()>-><java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>
<java.util.logging.LogManager$5: java.lang.Object run()>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.wf.captcha.GifCaptcha: boolean out(java.io.OutputStream)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<org.codehaus.jackson.map.ser.std.IndexedStringListSerializer: void serializeUsingCustom(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.base.Joiner$3: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<java.net.InMemoryCookieStore: void getInternal1(java.util.List,java.util.Map,java.lang.String,boolean)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.core.io.SerializedString: boolean equals(java.lang.Object)>
<org.aspectj.weaver.Lint: void <clinit>()>-><org.aspectj.weaver.tools.DefaultTraceFactory: org.aspectj.weaver.tools.Trace getTrace(java.lang.Class)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeStaticShortFieldAccessorImpl: int getInt(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Class: java.lang.String toString()>
<org.springframework.security.web.csrf.CsrfLogoutHandler: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: void addNode(org.springframework.data.redis.connection.RedisStandaloneConfiguration)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forPrimitiveType(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void closeConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void close()>
<register-finalize <org.springframework.boot.cloud.CloudPlatform: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.aspectj.bridge.IMessage: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void close()>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.commons.pool2.impl.DefaultPooledObject: java.lang.String toString()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.FluxCreate$IgnoreSink: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.springframework.core.SpringVersion: java.lang.String getVersion()>-><java.lang.Class: java.lang.Package getPackage()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setString(int,java.lang.String)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.aspectj.bridge.MessageUtil$10: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.method.HandlerMethod: java.lang.annotation.Annotation getMethodAnnotation(java.lang.Class)>-><org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.ObjectName: java.lang.String getDomain()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<org.springframework.aop.framework.ProxyCreatorSupport: void activate()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.apache.catalina.core.ApplicationContextFacade: void initClassCache()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.MonoCallableOnAssembly: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.ClassTypeInformation: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.web.server.adapter.ForwardedHeaderTransformer: void <clinit>()>-><org.springframework.util.LinkedCaseInsensitiveMap: void <init>(int,java.util.Locale)>
<org.apache.catalina.core.ApplicationContext: void populateSessionTrackingModes()>-><java.util.JumboEnumSet: boolean add(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection _deserializeWithObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><com.google.common.base.Joiner$3: int size()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><io.micrometer.shaded.org.pcollections.ConsPStack: void <init>()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.time.Instant getCreationTime()>-><org.springframework.session.MapSession: java.time.Instant getCreationTime()>
<org.springframework.session.SingleIndexResolver: java.util.Map resolveIndexesFor(org.springframework.session.Session)>-><java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HtmlUtils: void <clinit>()>-><org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1Integer: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.sql.Timestamp: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$EmptyList: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findClass(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<org.codehaus.jackson.map.introspect.AnnotatedField: void setValue(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
<net.logstash.logback.encoder.com.lmax.disruptor.Sequence: void set(long)>-><sun.misc.Unsafe: void putOrderedLong(java.lang.Object,long,long)>
<org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><cn.hutool.core.date.format.FormatCache$MultipartKey: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: int size()>
<cn.hutool.core.lang.Console: void error(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.aspectj.weaver.BCException: void printStackTrace(java.io.PrintStream)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.aspectj.weaver.MemberImpl: int compareTo(java.lang.Object)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>(org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$1)>-><org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><cn.hutool.core.date.format.FastDatePrinter$TimeZoneDisplayKey: boolean equals(java.lang.Object)>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.p6spy.engine.spy.P6ModuleManager: void <init>()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void addManagedBean(org.apache.tomcat.util.modeler.ManagedBean)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<org.springframework.session.DelegatingIndexResolver: java.util.Map resolveIndexesFor(org.springframework.session.Session)>-><java.util.HashMap: void putAll(java.util.Map)>
<org.apache.catalina.connector.OutputBuffer: void <init>(int)>-><java.io.Writer: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERNumericString: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: boolean isTraceEnabled()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.apache.tomcat.util.buf.UEncoder$SafeCharsSet: void <init>(java.lang.String,int,java.lang.String)>-><java.util.BitSet: void set(int)>
<org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>-><java.lang.Enum: java.lang.String name()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Class: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.Hashtable: int size()>
<org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerSecurityConfiguration: void <init>()>-><synthetic.method.SingletonFactory: org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration getAuthorizationServerEndpointsConfiguration()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><reactor.util.function.Tuple4: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementChildContextConfiguration$ServletManagementContextSecurityConfiguration: void <init>()>
<org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.common.ExpressionUtils: java.lang.Object convertTypedValue(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,java.lang.Class)>
<java.lang.reflect.Field: boolean isSynthetic()>-><java.lang.reflect.Modifier: boolean isSynthetic(int)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.time.ZoneOffset: int compareTo(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.lang.Float: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: void <init>(int)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.jmx.JmxEndpointExporter: javax.management.ObjectName register(org.springframework.boot.actuate.endpoint.jmx.ExposableJmxEndpoint)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Integer: int parseInt(java.lang.String)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(org.springframework.security.access.ConfigAttribute)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<sun.reflect.UnsafeObjectFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<org.springframework.http.server.PathContainer$Options: void <init>(char,boolean)>-><java.lang.Object: void <init>()>
<javax.xml.datatype.FactoryFinder: java.lang.String which(java.lang.Class)>-><java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isStartTls()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.FloatNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.commons.pool2.impl.BaseGenericObjectPool$IdentityWrapper: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.core.publisher.FluxDoFinally$DoFinallyFuseableSubscriber: int size()>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><java.lang.StringBuilder: void <init>()>
<sun.reflect.UnsafeShortFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<org.springframework.security.web.access.expression.WebExpressionVoter: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$IgnoreSink: java.lang.String toString()>
<sun.reflect.UnsafeByteFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeByteFieldAccessorImpl: byte getByte(java.lang.Object)>
<org.apache.catalina.connector.Response: void <init>(int)>-><org.apache.tomcat.util.buf.UEncoder: void <init>(org.apache.tomcat.util.buf.UEncoder$SafeCharsSet)>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.time.ZoneOffset: int compareTo(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder: void <init>(com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.node.ObjectNode: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.slf4j.event.Level: java.lang.String toString()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><org.springframework.session.MapSession: java.lang.String getId()>
<cn.hutool.http.GlobalHeaders: cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String,boolean)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.DecimalNode: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.time.chrono.ChronoZonedDateTime: int compareTo(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$SingletonList: int size()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.google.common.cache.LocalCache$EntryFactory$6: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.aspectj.weaver.patterns.TypePatternList: void <clinit>()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$3: void <init>(java.lang.String,int)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.RegularEnumSet: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.apache.catalina.LifecycleException: void <init>()>-><java.lang.Exception: void <init>()>
<com.google.common.cache.CacheLoader: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<java.util.EnumMap: int entryHashCode(int)>-><java.nio.CharBuffer: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.BinaryNode: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.cluster.ClusterClientOptions getClusterClientOptions(org.springframework.data.redis.connection.RedisConfiguration$ClusterConfiguration)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientOptions()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.endpoint.TokenKeyEndpoint: void <init>(org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.lettuce.core.metrics.CommandMetrics: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>(org.springframework.core.io.Resource[])>-><org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void load(org.springframework.core.io.Resource[])>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.util.context.Context1: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.apache.tomcat.util.collections.ConcurrentCache: void <init>(int)>-><java.util.WeakHashMap: void <init>(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.awt.Font: java.lang.String toString()>
<javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>-><javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,javax.management.Descriptor)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.io.File: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.MBeanOperationInfo: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.asm.ConstantDynamic: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void removeListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.SignalType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.google.common.base.Joiner$3: int size()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void <init>()>-><java.util.HashMap: void <init>()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><reactor.util.Loggers$JdkLogger: void error(java.lang.String,java.lang.Throwable)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: void assertNoDuplicateOperations(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean,org.springframework.util.MultiValueMap)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<com.google.common.collect.AbstractMapBasedMultimap: boolean put(java.lang.Object,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean add(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber: int size()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Float: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><cn.hutool.core.date.format.FastDateFormat: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.io.ObjectStreamField: int compareTo(java.lang.Object)>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><org.springframework.session.MapSession: java.time.Duration getMaxInactiveInterval()>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter: org.springframework.security.oauth2.provider.OAuth2Authentication getOAuth2Authentication(org.springframework.security.oauth2.provider.ClientDetails,org.springframework.security.oauth2.provider.TokenRequest)>-><org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArraySet: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeStaticLongFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><springfox.documentation.spring.web.DocumentationCache: void <init>()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.IdentityHashMap$EntrySet: boolean remove(java.lang.Object)>
<org.aspectj.weaver.patterns.ModifiersPattern: void <clinit>()>-><java.lang.Integer: void <init>(int)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanSupport: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean isEmpty()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERNumericString: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.aop.support.AbstractPointcutAdvisor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$SynchronizedCollection: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafWebFluxConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.invoke.LambdaFormEditor$Transform: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.pubsub.StatefulRedisPubSubConnection switchToPubSub()>-><org.springframework.data.redis.connection.lettuce.LettucePoolingConnectionProvider: io.lettuce.core.api.StatefulConnection getConnection(java.lang.Class)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeStaticLongFieldAccessorImpl: void setInt(java.lang.Object,int)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.Collections$EmptyList: int size()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void subscribePattern(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.pool.HikariPool: void closeConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicIntegerArray: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Package: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><com.google.common.base.Joiner$3: int size()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.p6spy.engine.logging.Category: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.web.servlet.handler.MappedInterceptor: void <init>(java.lang.String[],java.lang.String[],org.springframework.web.servlet.HandlerInterceptor)>-><java.lang.Object: void <init>()>
<org.aspectj.bridge.MessageUtil$7: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.core.ApplicationSessionCookieConfig: void <init>(org.apache.catalina.core.StandardContext)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Character: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: void <clinit>()>-><org.springframework.core.OrderComparator: java.util.Comparator withSourceProvider(org.springframework.core.OrderComparator$OrderSourceProvider)>
<org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.oauth2.config.annotation.web.configuration.OAuth2ClientConfiguration$OAuth2ClientContextConfiguration: void <init>()>-><org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest: void <init>()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void initialize()>-><java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<org.springframework.security.web.firewall.RequestWrapper: java.lang.String strip(java.lang.String)>-><java.lang.String: int indexOf(int)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: int size()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: long getLong(java.lang.Object)>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<org.springframework.scheduling.quartz.SchedulerAccessor: void registerJobsAndTriggers()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map$Entry)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource getResource(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxCreate$DropAsyncSink: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
<io.micrometer.core.instrument.binder.system.FileDescriptorMetrics: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfiguration$JwtTokenServicesConfiguration: void <init>(org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.AttributeEntry: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisPassword: org.springframework.data.redis.connection.RedisPassword lambda$of$0(java.lang.String)>-><java.lang.String: char[] toCharArray()>
<org.springframework.aop.framework.ProxyFactoryBean: java.util.List freshAdvisorChain()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<java.util.AbstractSet: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<cn.hutool.core.map.CustomKeyMap: void putAll(java.util.Map)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardContext: void <init>()>-><org.apache.catalina.core.StandardContextValve: void <init>()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$KeySet: int size()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Instant: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.aop.aspectj.AspectJExpressionPointcut: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.LocalTime: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.FieldInfo: void <init>(java.lang.String,java.lang.Class,java.lang.Class,java.lang.reflect.Type,java.lang.reflect.Field,int,int,int)>-><java.lang.Class: boolean isEnum()>
<java.util.concurrent.DelayQueue: void put(java.util.concurrent.Delayed)>-><java.util.concurrent.DelayQueue: boolean offer(java.util.concurrent.Delayed)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.cglib.core.ClassInfo: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.google.common.cache.CacheBuilder: void <clinit>()>-><com.google.common.cache.CacheStats: void <init>(long,long,long,long,long,long)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.time.MonthDay: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<reactor.core.publisher.FluxIterable: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><com.google.common.base.Joiner$3: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><java.lang.Object: void <init>()>
<org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.Object getDetails()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.lettuce.core.protocol.CommandArgs$CharArrayArgument: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.thymeleaf.spring5.view.ThymeleafViewResolver: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.RememberMeAuthenticationToken: void <init>(java.lang.Integer,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache: boolean usesKeyReferences()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Throwable: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.SocketImpl: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.wf.captcha.utils.GifEncoder: void writeNetscapeExt()>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: void addOperations(org.springframework.util.MultiValueMap,org.springframework.boot.actuate.endpoint.EndpointId,java.lang.Object,boolean)>-><java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$3(java.util.Map$Entry)>-><com.google.common.base.Joiner$3: int size()>
<org.thymeleaf.TemplateEngine: void addTemplateResolver(org.thymeleaf.templateresolver.ITemplateResolver)>-><org.thymeleaf.util.Validate: void notNull(java.lang.Object,java.lang.String)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.time.Duration getCommandTimeout()>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1Integer: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.IndexedStringListSerializer: void serializeContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><org.aspectj.weaver.ResolvedType$Missing: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Optional: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><java.util.HashMap: void <init>()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceMessageListener: void <init>(org.springframework.data.redis.connection.MessageListener)>-><java.lang.Object: void <init>()>
<org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)>-><org.springframework.security.oauth2.client.resource.OAuth2AccessDeniedException: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager createDefaultAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.BooleanNode: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.Pair: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: void <init>()>-><javax.management.MBeanServerDelegate: javax.management.MBeanNotificationInfo[] getNotificationInfo()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<com.fasterxml.classmate.util.ResolvedTypeCache: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration: void <init>()>
<org.apache.catalina.valves.ValveBase: void initInternal()>-><org.apache.catalina.util.LifecycleMBeanBase: void initInternal()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map retrieveMetrics()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: void forEach(java.util.function.Consumer)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><java.lang.String: int indexOf(int,int)>
<io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess: void <clinit>()>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<org.springframework.boot.cloud.CloudPlatform$1: void <init>(java.lang.String,int)>-><org.springframework.boot.cloud.CloudPlatform: void <init>(java.lang.String,int,org.springframework.boot.cloud.CloudPlatform$1)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void subscribePattern(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.AbstractMap$1: int size()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$SetFromMap: java.lang.Object[] toArray(java.lang.Object[])>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.TypeNameExtractor getTypeNameExtractor()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.introspect.MemberKey: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerTokenServicesConfiguration: void <init>()>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object)>
<com.wf.captcha.utils.GifEncoder: void writeImageDesc()>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.zaxxer.hikari.util.SuspendResumeLock$1: void <init>(boolean)>-><com.zaxxer.hikari.util.SuspendResumeLock: void <init>(boolean,com.zaxxer.hikari.util.SuspendResumeLock$1)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><java.lang.String: java.lang.String substring(int)>
<java.net.InMemoryCookieStore: void getInternal1(java.util.List,java.util.Map,java.lang.String,boolean)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.SignalType: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.io.File: boolean isFile()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><com.alibaba.fastjson.JSONArray: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.ConcurrentBag: java.util.List lambda$new$0()>-><java.util.ArrayList: void <init>(int)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1Boolean: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.HttpCookie: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><java.util.HashSet: int size()>
<org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Byte: boolean equals(java.lang.Object)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.GmtTimeZone: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.validation.ObjectError: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><reactor.util.function.Tuple4: boolean equals(java.lang.Object)>
<org.springframework.security.crypto.password.Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm: void <clinit>()>-><org.springframework.security.crypto.password.Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm: void <init>(java.lang.String,int)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer parsePath(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>
<org.springframework.data.redis.connection.RedisStandaloneConfiguration: java.lang.String lambda$setDatabase$1(int)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.EnumMap: int entryHashCode(int)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><org.springframework.http.HttpHeaders: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.cluster.ClusterClientOptions getClusterClientOptions(org.springframework.data.redis.connection.RedisConfiguration$ClusterConfiguration)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientOptions()>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><org.apache.catalina.util.ContextName: java.lang.String getDisplayName()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.x509.GeneralName: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.web.util.HtmlCharacterEntityReferences: java.lang.String lambda$new$0(int)>-><java.lang.StringBuilder: void <init>()>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.buffer.AbstractByteBuf: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.map.introspect.MemberKey: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Object: java.lang.Class getClass()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><org.apache.http.util.TextUtils: boolean containsBlanks(java.lang.CharSequence)>
<java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.session.SessionsEndpointAutoConfiguration: void <init>()>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.security.web.firewall.RequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getPathInfo()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ThreadPoolExecutor: boolean isTerminated()>-><java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool: void fillPool()>-><java.util.Collections$UnmodifiableCollection: int size()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.RemovalListener getRemovalListener()>-><com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.util.HashSet: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.Parsed: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><net.logstash.logback.encoder.com.lmax.disruptor.Sequence: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$1: boolean hasNext()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.io.FileSystemResource: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,io.lettuce.core.pubsub.StatefulRedisPubSubConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider)>-><org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void <init>(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.reflect.Field: java.lang.Class getType()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void flush()>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanInfo: java.lang.String toString()>
<org.thymeleaf.spring5.util.SpringVersionUtils: void <clinit>()>-><java.lang.String: int indexOf(int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.ParsePosition: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.LinkedList: boolean remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<register-finalize <com.zaxxer.hikari.util.UtilityElf: java.util.concurrent.ThreadPoolExecutor createThreadPoolExecutor(java.util.concurrent.BlockingQueue,java.lang.String,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.catalina.core.ContainerBase: void <init>()>-><org.apache.catalina.core.StandardPipeline: void <init>(org.apache.catalina.Container)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Short: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.MBeanNotificationInfo: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<sun.reflect.UnsafeStaticLongFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: void preDeregister()>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver copy()>-><com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver copy()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.ZonedDateTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.google.common.util.concurrent.AbstractListeningExecutorService: void <init>()>-><java.util.concurrent.AbstractExecutorService: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.OptionalInt: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.InetSocketAddress: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object remove(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.LinkedList: boolean add(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<register-finalize <com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.data.redis.core.StringRedisTemplate: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.core.RedisAccessor: void setConnectionFactory(org.springframework.data.redis.connection.RedisConnectionFactory)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.oauth2.provider.approval.Approval: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.List toImmutableList(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.asm.Type: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<sun.reflect.UnsafeIntegerFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void ensureObj(java.lang.Object)>
<org.springframework.boot.cloud.CloudPlatform$3: void <init>(java.lang.String,int)>-><org.springframework.boot.cloud.CloudPlatform: void <init>(java.lang.String,int,org.springframework.boot.cloud.CloudPlatform$1)>
<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: void <clinit>()>-><java.util.Collections: java.util.Set emptySet()>
<com.zaxxer.hikari.pool.HikariPool: void fillPool()>-><com.zaxxer.hikari.HikariConfig: int getMaximumPoolSize()>
<sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: int accept(java.lang.reflect.Method)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.servlet.function.ResourceHandlerFunction: void <init>(org.springframework.core.io.Resource)>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeShortFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: int compareTo(java.lang.Object)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: int getInt(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.JSONSerializer: void writeWithFormat(java.lang.Object,java.lang.String)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<com.alibaba.fastjson.serializer.MiscCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.node.POJONode: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.servlet.WebMvcEndpointChildContextConfiguration: void <init>()>
<com.zaxxer.hikari.util.SuspendResumeLock: void <init>(boolean,com.zaxxer.hikari.util.SuspendResumeLock$1)>-><com.zaxxer.hikari.util.SuspendResumeLock: void <init>(boolean)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.GmtTimeZone: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getPatterns()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.Class getDeclaringClass()>-><java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.dao.DataAccessException convertLettuceAccessException(java.lang.Exception)>
<com.alibaba.fastjson.util.JavaBeanInfo: void computeFields(java.lang.Class,java.lang.reflect.Type,com.alibaba.fastjson.PropertyNamingStrategy,java.util.List,java.lang.reflect.Field[])>-><java.lang.reflect.Field: java.lang.String getName()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.TreeMap$Entry: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration: void <init>()>
<org.springframework.security.web.authentication.www.BasicAuthenticationFilter: void setRememberMeServices(org.springframework.security.web.authentication.RememberMeServices)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.aspectj.weaver.patterns.CflowPointcut: void <clinit>()>-><org.aspectj.weaver.patterns.Pointcut: org.aspectj.weaver.patterns.Pointcut makeMatchesNothing(org.aspectj.weaver.patterns.Pointcut$State)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.StringBuffer: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1OctetString: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.aspectj.weaver.tools.PointcutPrimitive: void <clinit>()>-><org.aspectj.weaver.tools.PointcutPrimitive: void <init>(java.lang.String,int)>
<org.springframework.security.web.firewall.RequestWrapper: java.lang.String strip(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(float)>-><java.lang.Float: java.lang.String toString(float)>
<springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <clinit>()>-><springfox.documentation.spring.web.plugins.PathAndParametersEquivalence: void <init>()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.slf4j.event.Level: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><cn.hutool.http.Header: java.lang.String toString()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<javax.management.MBeanServerDelegate: java.lang.String getMBeanServerId()>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.pool.PoolEntry: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><org.springframework.session.data.redis.RedisIndexedSessionRepository: org.springframework.session.IndexResolver access$500(org.springframework.session.data.redis.RedisIndexedSessionRepository)>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<io.micrometer.prometheus.PrometheusMeterRegistry: java.util.List tagValues(io.micrometer.core.instrument.Meter$Id)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><java.lang.reflect.AccessibleObject: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.BinaryNode: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanSupport: void preDeregister()>-><com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: void preDeregister()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.http.HttpHeaders: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><org.aspectj.weaver.ResolvedType$MethodGetterIncludingItds: void <init>(org.aspectj.weaver.ResolvedType$1)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.JodaCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object,java.lang.String,int)>-><org.joda.time.LocalDateTime: org.joda.time.LocalTime toLocalTime()>
<java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.DiscoveredOperationsFactory: org.springframework.boot.actuate.endpoint.Operation lambda$createOperation$1(org.springframework.boot.actuate.endpoint.EndpointId,java.lang.Object,java.lang.reflect.Method,java.util.Map$Entry)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder minimumExpectedValue(java.lang.Long)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.apache.catalina.security.SecurityUtil: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.OptionalDouble: java.lang.String toString()>
<org.springframework.jdbc.support.JdbcUtils: void closeResultSet(java.sql.ResultSet)>-><com.zaxxer.hikari.pool.HikariProxyResultSet: void close()>
<sun.reflect.UnsafeFloatFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<reactor.util.function.Tuple4: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.FluxOnAssembly: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<cn.hutool.http.HttpBase: java.lang.Object header(java.util.Map,boolean)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.text.ParsePosition: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Vector: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.TreeMap$KeySet: boolean remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<org.thymeleaf.templatemode.TemplateMode: void <init>(java.lang.String,int,boolean,boolean,boolean)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><ch.qos.logback.core.subst.Node: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.math.BigDecimal: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<io.micrometer.core.util.internal.logging.JdkLogger: void <init>(java.util.logging.Logger)>-><io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Set: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.EnumMap$KeySet: boolean remove(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.ArrayList: int size()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><java.util.Collections$EmptyMap: int size()>
<sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.PropertyPermission: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void debug(java.lang.String)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$ValuesView: boolean remove(java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><cn.hutool.core.date.format.FormatCache$MultipartKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void unsubscribeChannel(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isUseSsl()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String[])>-><org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String)>
<org.aspectj.weaver.tools.DefaultTrace: void <init>(java.lang.Class)>-><org.aspectj.weaver.tools.AbstractTrace: void <init>(java.lang.Class)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.session.web.http.HttpSessionAdapter: void <init>(org.springframework.session.Session,javax.servlet.ServletContext)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.DelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<org.codehaus.jackson.map.deser.std.StdValueInstantiator: org.codehaus.jackson.map.JsonMappingException wrapException(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.introspect.MemberKey: java.lang.String toString()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeStaticLongFieldAccessorImpl: int getInt(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><javax.security.auth.Subject$SecureSet: boolean add(java.lang.Object)>
<org.springframework.validation.DataBinder: void <init>(java.lang.Object,java.lang.String)>-><org.springframework.util.ObjectUtils: java.lang.Object unwrapOptional(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer getConfigurer(java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: void <init>(org.springframework.boot.autoconfigure.data.redis.RedisProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.Arrays$ArrayList: int size()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.WeakHashMap$EntrySet: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeShortFieldAccessorImpl: void setLong(java.lang.Object,long)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeStaticShortFieldAccessorImpl: long getLong(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.metrics.dropwizard.CodahaleHealthChecker: boolean lambda$registerHealthChecks$0(com.zaxxer.hikari.HikariConfig,java.lang.String,com.codahale.metrics.Metric)>-><com.codahale.metrics.MetricRegistry: java.lang.String name(java.lang.String,java.lang.String[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: int size()>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler getDefaultAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<com.google.common.cache.LocalCache: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.BitSet: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.beans.PropertyDescriptor: boolean equals(java.lang.Object)>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.util.Set getAttributeNames()>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void load(java.lang.Class,java.lang.String[])>-><org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.Resource[])>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.config.RuntimeBeanReference: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.type.ArrayType: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>(org.springframework.core.io.Resource[])>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void refresh()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.session.MapSession: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object,java.lang.Object,int,int[])>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Boolean: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.http.HttpHeaders: boolean isEmpty()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><org.springframework.util.ClassUtils: java.util.Set findMethodCandidatesByName(java.lang.Class,java.lang.String)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: org.springframework.security.oauth2.provider.OAuth2Request getOAuth2Request()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<java.util.PriorityQueue: void siftDown(int,java.lang.Object)>-><java.util.PriorityQueue: void siftDownUsingComparator(int,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.io.File: int compareTo(java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<org.aspectj.util.FuzzyBoolean: void <clinit>()>-><org.aspectj.util.FuzzyBoolean$NeverFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.EnumMap$Values: int size()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<org.springframework.boot.autoconfigure.AutoConfigurationPackages: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.cors.CorsConfiguration: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<io.micrometer.core.instrument.MeterRegistry$Config: io.micrometer.core.instrument.config.NamingConvention namingConvention()>-><io.micrometer.core.instrument.MeterRegistry: io.micrometer.core.instrument.config.NamingConvention access$300(io.micrometer.core.instrument.MeterRegistry)>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>-><java.util.ArrayList: void <init>()>
<org.apache.catalina.core.StandardContext$1: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamField: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object,int,int)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setObject(int,java.lang.Object,int,int)>
<org.springframework.beans.factory.InjectionPoint: void <init>(java.lang.reflect.Field)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$UrlHandlerMappingDescriptionProvider: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.Object[] toArray()>
<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.String getFullName()>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFloatFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<register-finalize <org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.aspectj.weaver.tools.TraceFactory: boolean getBoolean(java.lang.String,boolean)>-><java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.pubsub.StatefulRedisPubSubConnection switchToPubSub()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeStaticObjectFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: void <init>(java.lang.String,java.util.List)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: java.lang.Object performBuild()>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.awt.DebugSettings: void loadSystemProperties()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: com.google.common.cache.LocalCache$Segment createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.format.DecimalStyle: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void disableRegistry()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<sun.awt.DebugSettings: void loadSystemProperties()>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.AbstractList: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.LocalDate: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.HashMap$KeySet: boolean remove(java.lang.Object)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeStaticByteFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.type.ClassKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<javax.print.MimeType: void <init>(java.lang.String)>-><javax.print.MimeType: void parse(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration: void setAllowedMethods(java.util.List)>
<org.springframework.http.server.PathContainer$Options: void <clinit>()>-><org.springframework.http.server.PathContainer$Options: org.springframework.http.server.PathContainer$Options create(char,boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.commons.pool2.impl.BaseGenericObjectPool$IdentityWrapper: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.UUID: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.jar.Manifest: boolean equals(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.thymeleaf.spring5.util.SpringVersionUtils: void <clinit>()>-><org.springframework.core.SpringVersion: java.lang.String getVersion()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.alibaba.fastjson.serializer.JSONSerializer: void writeWithFormat(java.lang.Object,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: java.lang.String getApprovalKey(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: org.springframework.security.oauth2.provider.OAuth2Request getOAuth2Request()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<sun.reflect.UnsafeBooleanFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.misc.Unsafe: void putBoolean(java.lang.Object,long,boolean)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: long getLong(java.lang.Object)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: int getInt(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.RDN: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.alibaba.fastjson.util.GenericArrayTypeImpl: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void load(java.lang.String[])>-><org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String[])>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: int size()>
<reactor.core.scheduler.Schedulers: java.lang.Object scanExecutor(java.util.concurrent.Executor,reactor.core.Scannable$Attr)>-><java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.net.HttpCookie: java.lang.String toString()>
<reactor.core.publisher.FluxIterable: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean remove(java.lang.Object)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: void setInt(java.lang.Object,int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.aspectj.util.FuzzyBoolean$MaybeFuzzyBoolean: void <init>()>-><org.aspectj.util.FuzzyBoolean: void <init>()>
<com.zaxxer.hikari.pool.HikariPool: void fillPool()>-><com.zaxxer.hikari.HikariConfig: int getMinimumIdle()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.http.HttpHost: void <init>(java.lang.String)>-><org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.JSONPObject: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter: java.util.Map lambda$new$0(javax.servlet.http.HttpServletRequest)>-><java.util.Collections: java.util.Map emptyMap()>
<org.springframework.boot.actuate.info.InfoPropertiesInfoContributor: void <clinit>()>-><org.springframework.boot.context.properties.bind.Bindable: org.springframework.boot.context.properties.bind.Bindable mapOf(java.lang.Class,java.lang.Class)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.SubList: int size()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.lang.ProcessEnvironment$Value: int compareTo(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Object: void <init>()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.http.HttpStatus: int value()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.ZoneId: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.Font: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource$RequestVariablesExtractorEvaluationContextPostProcessor: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.security.web.access.expression.AbstractVariableEvaluationContextPostProcessor: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.DigitList: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.time.OffsetDateTime: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<cn.hutool.http.HttpUtil: void addParam(java.util.Map,java.lang.String,java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.lang.ProcessEnvironment$Variable: int compareTo(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$2: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<com.google.common.cache.CacheStats: void <init>(long,long,long,long,long,long)>-><com.google.common.base.Preconditions: void checkArgument(boolean)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: int getInt(java.lang.Object)>
<java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: org.codehaus.jackson.type.JavaType typeFromId(java.lang.String)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.AbstractCollection: boolean isEmpty()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.io.ObjectStreamClass$FieldReflector: void setObjFieldValues(java.lang.Object,java.lang.Object[])>-><java.lang.reflect.Field: java.lang.Class getType()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder maximumSize(long)>-><com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>
<org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: boolean isExpired()>-><java.util.Date: boolean before(java.util.Date)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.util.RawValue: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><io.lettuce.core.internal.AbstractInvocationHandler: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$4: void <init>(java.lang.String,int)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.http.HttpHeaders: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider doCreateConnectionProvider(io.lettuce.core.AbstractRedisClient,io.lettuce.core.codec.RedisCodec)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.aspectj.util.FuzzyBoolean: void <clinit>()>-><org.aspectj.util.FuzzyBoolean$MaybeFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$LatestAsyncSink: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$3: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.image.ComponentColorModel: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxIterable: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<org.apache.tomcat.util.modeler.Registry: void disableRegistry()>-><org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Integer: java.lang.String toString()>
<org.springframework.boot.autoconfigure.security.oauth2.authserver.OAuth2AuthorizationServerConfiguration: void <init>(org.springframework.security.oauth2.provider.client.BaseClientDetails,org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isStartTls()>
<org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer: void afterPropertiesSet()>-><org.flywaydb.core.Flyway: int migrate()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><java.lang.reflect.Field: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.jsontype.NamedType: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.EventObject: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1Set: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log getLogger()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>-><java.util.ArrayList: int size()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.aspectj.weaver.World: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.misc.Unsafe: void putBooleanVolatile(java.lang.Object,long,boolean)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1OctetString: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.google.common.cache.CacheBuilder$OneWeigher: void <clinit>()>-><com.google.common.cache.CacheBuilder$OneWeigher: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.modules.ModelerSource getModelerSource(java.lang.String)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.StackTraceElement: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: int size()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<org.springframework.web.servlet.FrameworkServlet: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.FilterChainProxy$VirtualFilterChain: void <init>(org.springframework.security.web.firewall.FirewalledRequest,javax.servlet.FilterChain,java.util.List)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void cancel()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1ObjectIdentifier: java.lang.String toString()>
<org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration: void <init>()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap$LinkedKeySet: int size()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.AbstractCollection: boolean remove(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object,java.lang.Object,int,int[])>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.List toImmutableList(java.util.List)>-><com.google.common.base.Joiner$3: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.HashMap$Node: java.lang.String toString()>
<java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.thymeleaf.TemplateEngine: void addDialect(org.thymeleaf.dialect.IDialect)>-><org.thymeleaf.DialectConfiguration: void <init>(org.thymeleaf.dialect.IDialect)>
<org.springframework.data.redis.serializer.RedisSerializerToSerializationPairAdapter: void <clinit>()>-><org.springframework.data.redis.serializer.RedisSerializerToSerializationPairAdapter: void <init>(org.springframework.data.redis.serializer.RedisSerializer)>
<sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.util.ClockSource: long plusMillis(long,long)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.MeterRegistry: java.lang.String getConventionName(io.micrometer.core.instrument.Meter$Id)>-><io.micrometer.core.instrument.MeterRegistry$Config: io.micrometer.core.instrument.config.NamingConvention namingConvention()>
<sun.reflect.UnsafeCharacterFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><java.nio.CharBuffer: int hashCode()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.apache.catalina.util.LifecycleBase: boolean getThrowOnFailure()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.base.Joiner$3: int size()>
<org.aspectj.weaver.World: void <clinit>()>-><org.aspectj.weaver.tools.TraceFactory: org.aspectj.weaver.tools.TraceFactory getTraceFactory()>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>-><org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher[])>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: boolean remove(javax.management.ObjectName,java.lang.ClassLoader)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.io.PrintWriter: void <init>(java.io.Writer)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.Object getLast(java.util.List)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<com.google.common.base.Equivalence$Equals: void <clinit>()>-><com.google.common.base.Equivalence$Equals: void <init>()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.openmbean.TabularDataSupport: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl: void <init>(java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.reflect.Field: java.lang.Class getType()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet: boolean remove(java.lang.Object)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed poll()>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore$TokenExpiry: long getDelay(java.util.concurrent.TimeUnit)>
<sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<com.zaxxer.hikari.pool.HikariProxyResultSet: int getInt(int)>-><com.zaxxer.hikari.pool.HikariProxyResultSet: int getInt(int)>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.util.ClassKey: void <init>(java.lang.Class)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Currency: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder customizers(java.util.Collection)>-><org.springframework.boot.web.client.RestTemplateBuilder: java.util.Set copiedSetOf(java.util.Collection)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.ArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeCharacterFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.util.context.ContextN: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.ZoneId: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.util.ParameterizedTypeInformation: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$3: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<springfox.documentation.spring.web.readers.parameter.ParameterTypeReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.data.redis.listener.PatternTopic: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: void <init>(org.springframework.http.HttpStatus,java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setClob(int,java.io.Reader,long)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><io.netty.util.internal.RecyclableArrayList: java.lang.Object set(int,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter: void <clinit>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.springframework.session.DelegatingIndexResolver: java.util.Map resolveIndexesFor(org.springframework.session.Session)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<io.netty.util.concurrent.ThreadPerTaskExecutor: void execute(java.lang.Runnable)>-><ch.qos.logback.core.util.ExecutorServiceUtil$1: java.lang.Thread newThread(java.lang.Runnable)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNString(int,java.lang.String)>
<javax.management.MBeanServerDelegate: java.lang.String getMBeanServerId()>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <clinit>()>-><org.springframework.web.bind.annotation.RequestMethod: org.springframework.web.bind.annotation.RequestMethod[] values()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: void addNode(org.springframework.data.redis.connection.RedisStandaloneConfiguration)>-><org.springframework.data.redis.connection.RedisStandaloneConfiguration: void setDatabase(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.OffsetTime: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.AbstractSet: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.regex.Pattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.alibaba.fastjson.JSONArray: java.lang.Object[] toArray(java.lang.Object[])>
<org.aspectj.weaver.ResolvedType$MethodGetterIncludingItds: void <init>()>-><java.lang.Object: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.google.common.collect.Maps$Values: boolean remove(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<cn.hutool.http.HttpBase: java.lang.Object header(java.util.Map,boolean)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<javax.print.MimeType: void parse(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.commons.pool2.BaseObject: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.actuate.health.Health$Builder: org.springframework.boot.actuate.health.Health build()>-><org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder,org.springframework.boot.actuate.health.Health$1)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<sun.reflect.UnsafeStaticFieldAccessorImpl: void <clinit>()>-><sun.reflect.Reflection: void registerFieldsToFilter(java.lang.Class,java.lang.String[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.scheduling.config.Task: java.lang.String toString()>
<org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyLeakTask: void <init>(com.zaxxer.hikari.pool.ProxyLeakTask$1)>-><com.zaxxer.hikari.pool.ProxyLeakTask: void <init>()>
<org.springframework.aop.framework.ProxyFactoryBean: java.util.List freshAdvisorChain()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.apache.http.HttpHost: void <init>(org.apache.http.HttpHost)>-><org.apache.http.util.Args: java.lang.Object notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest$AbstractRequestMatcher: void <init>()>-><org.springframework.boot.security.servlet.ApplicationContextRequestMatcher: void <init>(java.lang.Class)>
<sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<org.thymeleaf.spring5.dialect.SpringStandardDialect: void <clinit>()>-><org.thymeleaf.spring5.util.SpringVersionUtils: boolean isSpringWebFluxPresent()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<sun.reflect.UnsafeCharacterFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<java.util.TreeMap$Entry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration: void <init>()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void initialize()>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: boolean indexSupportsIncludeFilters()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<java.util.PriorityQueue: boolean remove(java.lang.Object)>-><java.util.PriorityQueue: int indexOf(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: void setInt(java.lang.Object,int)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<java.util.Comparator: java.util.Comparator nullsLast(java.util.Comparator)>-><java.util.Comparators$NullComparator: void <init>(boolean,java.util.Comparator)>
<org.apache.tomcat.util.modeler.Registry: void disableRegistry()>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<org.springframework.aop.framework.ProxyFactoryBean: void initializeAdvisorChain()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.Vector: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.lang.String toString()>
<org.aspectj.bridge.IMessage$Kind: void <init>(java.lang.String,int,org.aspectj.bridge.IMessage$1)>-><org.aspectj.bridge.IMessage$Kind: void <init>(java.lang.String,int)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: void setObserveOncePerRequest(boolean)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String,java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<org.springframework.session.DelegatingIndexResolver: java.util.Map resolveIndexesFor(org.springframework.session.Session)>-><java.util.HashMap: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.io.ObjectStreamField: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.TreeMap$EntrySet: boolean remove(java.lang.Object)>
<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed poll()>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setNull(java.sql.PreparedStatement,int,int,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.Flux: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><javax.management.RuntimeMBeanException: void <init>(java.lang.RuntimeException,java.lang.String)>
<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<org.springframework.aop.target.LazyInitTargetSource: java.lang.Object getTarget()>-><org.springframework.aop.target.LazyInitTargetSource: void postProcessTargetObject(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.CollectionType: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$Segment: void initTable(java.util.concurrent.atomic.AtomicReferenceArray)>-><com.google.common.cache.LocalCache: boolean customWeigher()>
<org.springframework.aop.framework.ProxyFactoryBean: void addAdvisorOnChainCreation(java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.StackTraceElement: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.PropertyPermission: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.security.UnresolvedPermission: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerByLookup(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><java.lang.String: int indexOf(int)>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.TreeSet: boolean add(java.lang.Object)>
<org.springframework.web.servlet.ModelAndView: org.springframework.ui.ModelMap getModelMap()>-><org.springframework.ui.ModelMap: void <init>()>
<org.apache.tomcat.util.modeler.NoDescriptorRegistry$PassthroughMBean: void <init>(org.apache.tomcat.util.modeler.NoDescriptorRegistry$1)>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry$PassthroughMBean: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.lang.Byte: int compareTo(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><io.micrometer.core.instrument.Tag: int compareTo(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultUserInfoRestTemplateFactory: void <init>(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<java.util.Objects: int hashCode(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.zaxxer.hikari.pool.HikariProxyDatabaseMetaData: java.lang.String getDatabaseProductName()>-><com.zaxxer.hikari.pool.HikariProxyDatabaseMetaData: java.lang.String getDatabaseProductName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.ParsePosition: java.lang.String toString()>
<org.springframework.core.Constants: void <init>(java.lang.Class)>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void transfer(byte,java.nio.ByteBuffer)>-><java.nio.HeapByteBuffer: java.nio.ByteBuffer put(byte)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void subscribeChannel(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><org.springframework.boot.actuate.health.HealthComponent: void <init>()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <clinit>()>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$2: void <init>(java.lang.String,int,java.lang.String)>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.support.MethodOverrides: boolean equals(java.lang.Object)>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.map.type.ClassKey: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findClass(java.lang.String)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.apache.catalina.core.StandardPipeline: org.apache.catalina.Valve[] getValves()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><org.springframework.util.MimeType: java.util.Map getParameters()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void <init>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$HikariDataSourceMetricsConfiguration: void <init>(io.micrometer.core.instrument.MeterRegistry)>-><io.micrometer.core.instrument.composite.CompositeMeterRegistry: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.core.io.SerializedString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Vector: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.PathMappingDecorator: void <init>()>
<org.springframework.session.MapSession: void <init>(java.lang.String)>-><java.time.Duration: java.time.Duration ofSeconds(long)>
<org.springframework.core.OrderComparator: java.lang.Integer findOrder(java.lang.Object)>-><org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider: int getOrder()>
<org.apache.catalina.core.StandardPipeline: void <init>(org.apache.catalina.Container)>-><org.apache.catalina.core.StandardPipeline: void setContainer(org.apache.catalina.Container)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<org.apache.juli.logging.DirectJDKLog: boolean isInfoEnabled()>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.context.support.ApplicationListenerDetector: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.Period: boolean equals(java.lang.Object)>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size()>
<java.net.URLClassLoader: void close()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Short: java.lang.String toString()>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><org.springframework.util.MimeType: boolean isWildcardSubtype()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(org.springframework.security.access.ConfigAttribute)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>-><org.apache.catalina.LifecycleException: void <init>(java.lang.String)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.EnumMap$EntrySet: java.lang.Object[] toArray(java.lang.Object[])>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<org.thymeleaf.util.ClassLoaderUtils: void <clinit>()>-><org.thymeleaf.util.ClassLoaderUtils: java.lang.ClassLoader getClassClassLoader(java.lang.Class)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceSubscription doCreateSubscription(org.springframework.data.redis.connection.MessageListener,io.lettuce.core.pubsub.StatefulRedisPubSubConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider)>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,io.lettuce.core.pubsub.StatefulRedisPubSubConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider)>
<org.apache.catalina.core.ContainerBase: void <init>()>-><org.apache.catalina.util.LifecycleMBeanBase: void <init>()>
<org.thymeleaf.spring5.util.SpringVersionUtils: void <clinit>()>-><org.thymeleaf.util.ClassLoaderUtils: boolean isClassPresent(java.lang.String)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<javax.print.MimeType: void parse(java.lang.String)>-><java.lang.String: int compareTo(java.lang.String)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><io.micrometer.core.instrument.Tag: int compareTo(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field locateField(java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Arrays$ArrayList: int size()>
<org.springframework.ui.ModelMap: org.springframework.ui.ModelMap addAllAttributes(java.util.Map)>-><java.util.HashMap: void putAll(java.util.Map)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.YearMonth: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardPipeline: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.EnumMap$1: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.ClockSource$NanosecondClockSource: void <init>()>-><java.lang.Object: void <init>()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.math.BigInteger: int compareTo(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.aspectj.util.LangUtil: java.util.List getFirstNumbers(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<java.util.PriorityQueue: void grow(int)>-><java.util.PriorityQueue: int hugeCapacity(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.aspectj.weaver.reflect.ReflectionWorld: void <clinit>()>-><java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.validation.FieldError: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeByteFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: boolean isFIPSModeActive()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.core.io.Resource getIndexHtml(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.POJONode: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore$TokenExpiry: int compareTo(java.lang.Object)>
<reactor.util.function.Tuple4: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addFields(java.util.Map,java.lang.Class)>-><java.lang.reflect.Field: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractSecurityBuilder: java.lang.Object build()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.asm.Handle: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.EnumMap$Values: int size()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Vector: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><cn.hutool.http.ContentType: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.aspectj.weaver.tools.DefaultTraceFactory: org.aspectj.weaver.tools.Trace getTrace(java.lang.Class)>-><org.aspectj.weaver.tools.DefaultTrace: void setPrintStream(java.io.PrintStream)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.introspect.AnnotatedConstructor: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$HikariDataSourceMetricsConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.TreeMap$EntrySet: int size()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: org.springframework.security.web.access.expression.AbstractVariableEvaluationContextPostProcessor createPostProcessor(org.springframework.security.web.util.matcher.RequestMatcher)>
<sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(float)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.google.common.collect.Maps$Values: int size()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.AbstractList: boolean add(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.text.DigitList: java.lang.String toString()>
<com.alibaba.fastjson.util.JavaBeanInfo: void computeFields(java.lang.Class,java.lang.reflect.Type,com.alibaba.fastjson.PropertyNamingStrategy,java.util.List,java.lang.reflect.Field[])>-><java.lang.reflect.Field: java.lang.Class getType()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.freemarker.FreeMarkerReactiveWebConfiguration: void <init>(org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.google.common.collect.Maps$EntrySet: int size()>
<com.alibaba.fastjson.JSONPath: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: int compareTo(java.lang.Object)>
<org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.apache.catalina.connector.Response: boolean isCommitted()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<org.springframework.session.MapSession: java.util.Set getAttributeNames()>-><java.util.HashSet: void <init>(java.util.Collection)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.Objects: int hashCode(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1ObjectIdentifier: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.aop.target.SingletonTargetSource: java.lang.Class getTargetClass()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getSingletonInstance()>-><org.springframework.aop.framework.AdvisedSupport: void setInterfaces(java.lang.Class[])>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicIntegerArray: java.lang.String toString()>
<com.google.common.collect.Maps$Values: boolean remove(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.pool.HikariProxyResultSet: java.lang.String getString(int)>-><com.p6spy.engine.wrapper.ResultSetWrapper: java.lang.String getString(int)>
<org.springframework.boot.actuate.endpoint.Sanitizer: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.security.oauth2.provider.token.DefaultTokenServices: org.springframework.security.oauth2.common.OAuth2AccessToken createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: org.springframework.security.oauth2.common.OAuth2AccessToken getAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.GregorianCalendar: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: void addAdvisorOnChainCreation(java.lang.Object,java.lang.String)>-><org.springframework.aop.framework.AdvisedSupport: void addAdvisor(org.springframework.aop.Advisor)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration$TokenKeyEndpointRegistrar: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<io.micrometer.prometheus.PrometheusMeterRegistry: void onMeterRemoved(io.micrometer.core.instrument.Meter)>-><io.micrometer.core.instrument.MeterRegistry: java.lang.String getConventionName(io.micrometer.core.instrument.Meter$Id)>
<io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields: void <clinit>()>-><sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.Provider$UString: boolean equals(java.lang.Object)>
<org.springframework.security.web.firewall.RequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>-><org.springframework.security.web.firewall.FirewalledRequest: void <init>(javax.servlet.http.HttpServletRequest)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<sun.reflect.UnsafeStaticObjectFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><java.util.Collections$EmptyMap: int size()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>-><org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.HttpCookie: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.util.MimeType: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<org.springframework.security.web.FilterChainProxy: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void setLong(java.lang.Object,long)>
<javax.print.MimeType: void parse(java.lang.String)>-><java.util.Vector: boolean add(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: long getLong(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.lang.Object: void <init>()>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.lang.Iterable,java.lang.CharSequence)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.sun.jmx.mbeanserver.JmxMBeanServer$3: void <init>(com.sun.jmx.mbeanserver.JmxMBeanServer)>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.CacheControlServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder builder()>
<reactor.util.function.Tuple4: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.WebExpressionVoter: void setExpressionHandler(org.springframework.security.access.expression.SecurityExpressionHandler)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERGeneralString: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue: void fullyLock()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException: void <init>(java.lang.String)>-><org.springframework.security.core.AuthenticationException: void <init>(java.lang.String)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object,java.lang.Object,int,int[])>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.MiscCodec: void writeIterator(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.SerializeWriter,java.util.Iterator)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.io.ObjectStreamField: void <init>(java.lang.reflect.Field,boolean,boolean)>-><java.lang.reflect.Field: java.lang.String getName()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.node.ObjectNode: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void handleErrorInObjectToString(java.lang.Object,java.lang.StringBuilder,java.lang.Throwable)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.Provider: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Duration: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<org.springframework.aop.target.LazyInitTargetSource: java.lang.Object getTarget()>-><org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Package: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<reactor.util.function.Tuple2: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: void <clinit>()>-><org.springframework.web.util.pattern.PathPatternParser: void <init>()>
<java.io.ObjectStreamField: void <init>(java.lang.reflect.Field,boolean,boolean)>-><java.lang.reflect.Field: java.lang.Class getType()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.x509.RDN: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: int compareTo(java.lang.Object)>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<java.util.AbstractList: int hashCode()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Byte: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: void setInt(java.lang.Object,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.data.util.ParentTypeAwareTypeInformation: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.EventObject: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<org.springframework.expression.common.CompositeStringExpression: java.lang.String getValue(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.cache.LocalCache: boolean recordsTime()>-><com.google.common.cache.LocalCache: boolean recordsAccess()>
<org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><java.util.concurrent.atomic.AtomicInteger: void set(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.sql.Timestamp: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<org.springframework.security.web.savedrequest.DefaultSavedRequest: java.util.List lambda$addHeader$0(java.lang.String)>-><java.util.ArrayList: void <init>()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.DispatcherServlet: void <init>(org.springframework.web.context.WebApplicationContext)>-><org.springframework.web.servlet.FrameworkServlet: void <init>(org.springframework.web.context.WebApplicationContext)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<reactor.core.scheduler.ParallelScheduler: void <clinit>()>-><java.util.concurrent.Executors$DelegatedExecutorService: java.util.List shutdownNow()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration: void <init>()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.lang.Long: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyDatabaseMetaData: java.lang.String getDatabaseProductName()>-><com.zaxxer.hikari.pool.ProxyDatabaseMetaData: java.sql.SQLException checkException(java.sql.SQLException)>
<org.apache.catalina.connector.OutputBuffer: void writeByte(int)>-><org.apache.catalina.connector.OutputBuffer: void transfer(byte,java.nio.ByteBuffer)>
<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceSubscription initSubscription(org.springframework.data.redis.connection.MessageListener)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.pubsub.StatefulRedisPubSubConnection switchToPubSub()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.boot.autoconfigure.web.ErrorProperties getErrorProperties()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.DefaultTokenServices: org.springframework.security.oauth2.common.OAuth2AccessToken createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: boolean isExpired()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.reflect.UnsafeLongFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object)>
<sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.Maps$ViewCachingAbstractMap: java.util.Set entrySet()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: void initializeAdvisorChain()>-><org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Collections$EmptyEnumeration: boolean hasMoreElements()>
<reactor.core.scheduler.DelegateServiceScheduler: void dispose()>-><java.util.concurrent.ScheduledThreadPoolExecutor: java.util.List shutdownNow()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.codehaus.jackson.map.introspect.POJOPropertyBuilder: int compareTo(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: boolean equals(java.lang.Object)>
<register-finalize <com.google.common.cache.CacheBuilder$OneWeigher: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.AttributeEntry: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.awt.Font: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><java.util.LinkedHashSet: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object castToJavaBean(java.util.Map,java.lang.Class,com.alibaba.fastjson.parser.ParserConfig)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.EnumMap: java.util.Set entrySet()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.type.CollectionLikeType: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.RenderingHints$Key: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.FloatNode: boolean equals(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.ClockSource$Factory: com.zaxxer.hikari.util.ClockSource access$000()>-><com.zaxxer.hikari.util.ClockSource$Factory: com.zaxxer.hikari.util.ClockSource create()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeStaticShortFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.springframework.web.method.HandlerMethod: org.springframework.core.MethodParameter[] initMethodParameters()>-><java.lang.reflect.Method: int getParameterCount()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.PathContainer$Options: char separator()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: javax.management.ObjectName cloneObjectName(javax.management.ObjectName)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.EnumMap: java.lang.Object remove(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.zaxxer.hikari.pool.ProxyLeakTask: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.calendar.Era: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: java.lang.Object getAttribute(java.lang.String)>-><javax.management.MBeanServerDelegate: java.lang.String getImplementationName()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.asm.Label: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.map.type.MapLikeType: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundrySecurityInterceptor: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse success()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.ObjectName: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.google.common.cache.LocalCache: boolean usesAccessEntries()>-><com.google.common.cache.LocalCache: boolean recordsAccess()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><org.springframework.core.io.ClassPathResource: void <init>(java.lang.String,java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<org.springframework.boot.SpringBootExceptionHandler: boolean isLogConfigurationMessage(java.lang.Throwable)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.beans.BeansEndpointAutoConfiguration: void <init>()>
<sun.text.normalizer.NormalizerImpl: void <clinit>()>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1Set: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.core.io.Resource getIndexHtml(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.ImageBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Double: java.lang.String toString()>
<io.lettuce.core.masterslave.StaticMasterSlaveConnector: reactor.core.publisher.Mono lambda$connectAsync$0(io.lettuce.core.RedisURI,io.lettuce.core.masterslave.MasterSlaveConnectionProvider,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<cn.hutool.core.util.ModifierUtil: boolean hasModifier(java.lang.reflect.Field,cn.hutool.core.util.ModifierUtil$ModifierType[])>-><java.lang.reflect.Field: int getModifiers()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection$LettucePoolConnectionProvider: void release(io.lettuce.core.api.StatefulConnection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.AbstractCollection: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.Instant: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.DefaultTokenServices: boolean isSupportRefreshToken(org.springframework.security.oauth2.provider.OAuth2Request)>-><org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.ObjectNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.naming.NamingException: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><java.util.logging.Logger: void fine(java.lang.String)>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<org.apache.catalina.valves.ValveBase: void stopInternal()>-><org.apache.catalina.util.LifecycleBase: void setState(org.apache.catalina.LifecycleState)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.lang.ProcessEnvironment$StringValues: boolean remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Boolean: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.Reflection: java.lang.Class getCallerClass()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.catalina.util.LifecycleBase: void stop()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.springframework.aop.framework.AdvisedSupport: void copyConfigurationFrom(org.springframework.aop.framework.AdvisedSupport,org.springframework.aop.TargetSource,java.util.List)>-><org.springframework.aop.framework.AdvisedSupport: void updateAdvisorArray()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<org.springframework.security.web.savedrequest.SavedRequestAwareWrapper: void <clinit>()>-><java.util.Locale: java.util.Locale getDefault()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Collections$EmptyList: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><java.lang.reflect.AccessibleObject: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.SubList$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.springframework.boot.actuate.info.EnvironmentInfoContributor: void <clinit>()>-><org.springframework.boot.context.properties.bind.Bindable: org.springframework.boot.context.properties.bind.Bindable mapOf(java.lang.Class,java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: int compareTo(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.Advisor namedBeanToAdvisor(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<sun.reflect.UnsafeStaticLongFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$Values: int size()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<org.springframework.boot.actuate.metrics.web.servlet.WebMvcTags: void <clinit>()>-><io.micrometer.core.instrument.Tag: io.micrometer.core.instrument.Tag of(java.lang.String,java.lang.String)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.ArrayType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.config.RuntimeBeanReference: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.CloudFoundrySecurityInterceptor: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse success()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.Provider$UString: java.lang.String toString()>
<reactor.util.function.Tuple2: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.ArrayList$SubList: boolean addAll(java.util.Collection)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind,boolean,java.lang.String)>-><org.aspectj.util.LangUtil: boolean isEmpty(java.lang.String)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.endpoint.ExposeExcludePropertyEndpointFilter: java.lang.String lambda$asSet$0(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.session.security.web.authentication.SpringSessionRememberMeServices: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.YearMonth: boolean equals(java.lang.Object)>
<java.util.AbstractSet: int hashCode()>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.Instant: boolean equals(java.lang.Object)>
<org.springframework.boot.web.client.ClientHttpRequestFactorySupplier: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.Extension: java.lang.String toString()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<springfox.documentation.schema.TypeNameExtractor: void <init>(com.fasterxml.classmate.TypeResolver,org.springframework.plugin.core.PluginRegistry,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.http.ResponseEntity: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<org.springframework.boot.jta.bitronix.PoolingDataSourceBean: void afterPropertiesSet()>-><bitronix.tm.resource.jdbc.PoolingDataSource: void setUniqueName(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.schema.property.field.FieldProvider: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>(java.lang.String[])>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void refresh()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.lettuce.core.protocol.CommandArgs$CharArrayArgument: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.SubList: java.lang.Object set(int,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.misc.Unsafe: void putFloat(java.lang.Object,long,float)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: java.lang.String getPolicy()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.SubList: int size()>
<org.apache.catalina.connector.OutputBuffer: void close()>-><org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.ZoneOffset: java.lang.String toString()>
<org.aspectj.bridge.AbortException: void <clinit>()>-><java.util.ArrayList: void <init>()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.TreeSet: boolean remove(java.lang.Object)>
<org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: void lambda$putAll$1(java.lang.String,java.lang.Object)>-><org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: java.lang.String formatValue(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.OffsetTime: boolean equals(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void unsubscribeChannel(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.apache.catalina.valves.ValveBase: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<org.codehaus.jackson.map.ser.std.IndexedStringListSerializer: void serializeUsingCustom(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.io.File: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationParameterHeadersConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>-><springfox.documentation.spring.web.readers.operation.AbstractOperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.Year: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><java.util.ArrayList: void <init>(java.util.Collection)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.Property: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String toString()>
<sun.reflect.UnsafeStaticShortFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<java.util.AbstractSet: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<org.springframework.beans.factory.support.SimpleAutowireCandidateResolver: boolean isRequired(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider$3: boolean isRequired()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.oauth2.provider.approval.Approval: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.DispatcherServlet: void <init>(org.springframework.web.context.WebApplicationContext)>-><org.springframework.web.servlet.FrameworkServlet: void setDispatchOptionsRequest(boolean)>
<sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(double)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.sql.Timestamp: java.lang.String toString()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$3: java.lang.String toString()>
<org.springframework.boot.actuate.logging.LogFileWebEndpoint: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.JsonMappingException: java.lang.String toString()>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><java.util.Collections$UnmodifiableMap: int size()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.valves.ValveBase: void startInternal()>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.AbstractCollection: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeUsingCustom(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$Values: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.misc.Unsafe: void putInt(java.lang.Object,long,int)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.ParameterizedTypeInformation: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.apache.catalina.core.ApplicationContext: void populateSessionTrackingModes()>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.lang.Long: int compareTo(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration$EnableWebFluxConfiguration: void <init>(org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfUnique()>
<org.springframework.beans.factory.config.DependencyDescriptor: void <init>(java.lang.reflect.Field,boolean,boolean)>-><java.lang.reflect.Field: java.lang.String getName()>
<org.apache.coyote.ActionCode: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Locale: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Collections$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: java.util.Iterator iterator()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><java.lang.Math: long min(long,long)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<org.springframework.boot.cloud.CloudPlatform$2: void <init>(java.lang.String,int)>-><org.springframework.boot.cloud.CloudPlatform: void <init>(java.lang.String,int,org.springframework.boot.cloud.CloudPlatform$1)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.security.web.access.expression.AbstractVariableEvaluationContextPostProcessor: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><reactor.util.context.Context1: java.lang.Object getKey()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.catalina.util.LifecycleMBeanBase: void destroyInternal()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafReactiveConfiguration: void <init>()>
<com.alibaba.fastjson.serializer.ASMSerializerFactory: void _get(com.alibaba.fastjson.asm.MethodVisitor,com.alibaba.fastjson.serializer.ASMSerializerFactory$Context,com.alibaba.fastjson.util.FieldInfo)>-><java.lang.reflect.Field: java.lang.String getName()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.io.ClassPathResource: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager getAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager createDefaultAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ListableBeanFactory)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap: java.lang.String toString()>
<org.codehaus.jackson.map.ser.StdSerializerProvider: org.codehaus.jackson.map.JsonSerializer _createAndCacheUntypedSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.pool.HikariProxyStatement: java.sql.SQLWarning getWarnings()>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: java.sql.SQLWarning getWarnings()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><org.springframework.security.oauth2.provider.token.DefaultAuthenticationKeyGenerator: java.lang.String extractKey(org.springframework.security.oauth2.provider.OAuth2Authentication)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.util.ByteArrayBuilder: byte[] toByteArray()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<org.thymeleaf.util.ClassLoaderUtils: boolean isKnownLeafClassLoader(java.lang.ClassLoader)>-><org.thymeleaf.util.ClassLoaderUtils: boolean isKnownClassLoaderAccessibleFrom(java.lang.ClassLoader,java.lang.ClassLoader)>
<com.alibaba.fastjson.parser.deserializer.EnumDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.util.ArrayList: java.lang.Object get(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.Provider: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object,java.lang.Throwable)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.Reflection: java.lang.Class getCallerClass()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.web.client.RestTemplate: void <init>(java.util.List)>-><org.springframework.http.client.support.InterceptingHttpAccessor: void <init>()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<register-finalize <com.google.common.cache.CacheBuilder$NullListener: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.catalina.core.ContainerBase: java.lang.String getLogName()>-><java.lang.Class: java.lang.String getName()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><io.netty.util.internal.RecyclableArrayList: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.LatencyUtils.TimeCappedMovingAverageIntervalEstimator: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<org.apache.tomcat.util.buf.UEncoder$SafeCharsSet: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.String: char[] toCharArray()>
<com.p6spy.engine.common.P6Util: java.lang.String joinNullSafe(java.util.Collection,java.lang.String)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.boot.actuate.autoconfigure.endpoint.jmx.DefaultEndpointObjectNameFactory: boolean hasMBean(java.lang.String)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>
<org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.beans.MutablePropertyValues: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.function.Tuple2: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.web.context.support.ServletContextResource: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.WeakHashMap$EntrySet: int size()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeStaticByteFieldAccessorImpl: void setInt(java.lang.Object,int)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.lang.Iterable,java.lang.CharSequence,java.lang.String,java.lang.String)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setDate(int,java.sql.Date)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setDate(int,java.sql.Date)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.core.ResolvableType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><java.lang.reflect.Field: void setLong(java.lang.Object,long)>
<org.aspectj.bridge.MessageUtil$4: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void unsubscribePattern(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getValueEquivalence()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$DifferentManagementContextConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.actuate.autoconfigure.web.ManagementContextFactory)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceSubscription initSubscription(org.springframework.data.redis.connection.MessageListener)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceSubscription doCreateSubscription(org.springframework.data.redis.connection.MessageListener,io.lettuce.core.pubsub.StatefulRedisPubSubConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<com.alibaba.fastjson.util.JavaBeanInfo: void computeFields(java.lang.Class,java.lang.reflect.Type,com.alibaba.fastjson.PropertyNamingStrategy,java.util.List,java.lang.reflect.Field[])>-><java.lang.reflect.Field: int getModifiers()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>-><com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><java.time.Duration: java.time.Duration ofMinutes(long)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider doCreateConnectionProvider(io.lettuce.core.AbstractRedisClient,io.lettuce.core.codec.RedisCodec)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream peek(java.util.function.Consumer)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.TypedValue toTypedValue(java.lang.Object)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: boolean recordsTime()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,int)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><cn.hutool.http.Header: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<cn.hutool.http.HttpBase: java.lang.String header(java.lang.String)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.mustache.MustacheServletWebConfiguration: void <init>()>
<org.springframework.web.server.adapter.ForwardedHeaderTransformer: void <clinit>()>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.apache.catalina.core.ContainerBase: void <init>()>-><java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.ser.std.JsonValueSerializer: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder maximumSize(long)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.JSON: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: void <init>(int)>-><org.apache.tomcat.util.buf.CharChunk: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<org.springframework.context.support.AbstractApplicationContext: void refresh()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeLongFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void unregisterComponent(javax.management.ObjectName)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class getTargetClass()>-><org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.String)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.base.Ticker getTicker(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.http.pool.RouteSpecificPool: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: void <init>()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber: int size()>
<io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields: void <clinit>()>-><sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.lettuce.core.RedisURI: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.InetAddress: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: java.lang.String getApprovalKey(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: int compareTo(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.format.DecimalStyle: boolean equals(java.lang.Object)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.session.DelegatingIndexResolver: java.util.Map resolveIndexesFor(org.springframework.session.Session)>-><org.springframework.session.SingleIndexResolver: java.util.Map resolveIndexesFor(org.springframework.session.Session)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.apache.logging.log4j.Level: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration: void <init>()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.pool.HikariPool: void logPoolState(java.lang.String[])>
<register-finalize <org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void doAcquireShared(int)>-><java.util.concurrent.Semaphore$NonfairSync: int tryAcquireShared(int)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.jni.SSL: int fipsModeGet()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.apache.http.impl.conn.DefaultProxyRoutePlanner: void <init>(org.apache.http.HttpHost)>-><org.apache.http.impl.conn.DefaultProxyRoutePlanner: void <init>(org.apache.http.HttpHost,org.apache.http.conn.SchemePortResolver)>
<org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)>-><org.springframework.security.authentication.UsernamePasswordAuthenticationToken: java.lang.Object getPrincipal()>
<com.alibaba.fastjson.serializer.JSONSerializer: void writeWithFormat(java.lang.Object,java.lang.String)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration: void <init>()>
<java.util.AbstractSet: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.apache.catalina.connector.CoyoteOutputStream: void write(int)>-><org.apache.catalina.connector.OutputBuffer: void writeByte(int)>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.time.Instant: int compareTo(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration$MvcRequestMatcherConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.ASMSerializerFactory: void _get(com.alibaba.fastjson.asm.MethodVisitor,com.alibaba.fastjson.serializer.ASMSerializerFactory$Context,com.alibaba.fastjson.util.FieldInfo)>-><java.lang.reflect.Field: java.lang.Class getType()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.IdentityHashMap$KeySet: int size()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><cn.hutool.core.date.format.FastDateFormat: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<org.apache.catalina.connector.Response: void <init>(int)>-><java.util.ArrayList: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.math.BigDecimal: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.Map getErrorAttributes(javax.servlet.http.HttpServletRequest,boolean)>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERBMPString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.deser.SettableAnyProperty: void _throwAsIOE(java.lang.Exception,java.lang.String,java.lang.Object)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanPermission(javax.management.DynamicMBean,java.lang.String,javax.management.ObjectName,java.lang.String)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.util.stream.SortedOps$SizedRefSortingSink: void end()>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.io.FilePermission: boolean equals(java.lang.Object)>
<org.aspectj.weaver.patterns.CflowPointcut: void <clinit>()>-><org.aspectj.weaver.ResolvedPointcutDefinition: void <init>(org.aspectj.weaver.UnresolvedType,int,java.lang.String,org.aspectj.weaver.UnresolvedType[],org.aspectj.weaver.patterns.Pointcut)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.WeakHashMap: java.util.Set entrySet()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.cache.support.AbstractCacheManager: void initializeCaches()>-><org.springframework.cache.concurrent.ConcurrentMapCache: java.lang.String getName()>
<java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater: void <init>(java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.reflect.Field: int getModifiers()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.aspectj.bridge.MessageUtil$8: void <init>()>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration: void <init>()>
<io.netty.util.internal.PlatformDependent0$1: java.lang.Object run()>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<org.springframework.security.core.userdetails.User$UserBuilder: java.lang.String lambda$roles$1(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyLeakTask: void run()>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Object[])>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.JdkLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLogger: void <init>(java.util.logging.Logger)>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><cn.hutool.core.date.format.FastDateFormat: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><ch.qos.logback.classic.spi.ClassPackagingData: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.baomidou.dynamic.datasource.DynamicDataSourceClassResolver: void <clinit>()>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.InetAddress: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERT61String: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><java.lang.Object: void wait()>
<sun.awt.DebugSettings: java.lang.String toString()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><org.springframework.http.server.DefaultPathContainer: void <init>(java.lang.String,java.util.List)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.beans.PropertyDescriptor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.Flux: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.Scannable$Attr$1: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.google.common.cache.LocalCache$LocalLoadingCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.lettuce.core.internal.AbstractInvocationHandler: boolean equals(java.lang.Object)>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.codehaus.jackson.map.deser.SettableBeanProperty: java.io.IOException _throwAsIOE(java.lang.Exception)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.http.pool.RouteSpecificPool: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.text.StringCharacterIterator: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.support.RootBeanDefinition: boolean equals(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: java.lang.String getApprovalKey(java.lang.String,java.lang.String)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<java.net.InMemoryCookieStore: void getInternal1(java.util.List,java.util.Map,java.lang.String,boolean)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.TypeVariableTypeInformation: java.lang.String toString()>
<org.codehaus.jackson.map.deser.SettableBeanProperty$FieldProperty: void set(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.alibaba.fastjson.serializer.GuavaCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultUserInfoRestTemplateFactory: org.springframework.security.oauth2.client.OAuth2RestTemplate getUserInfoRestTemplate()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.session.MapSession: void <init>()>-><org.springframework.session.MapSession: java.lang.String generateId()>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.core.io.Resource[] getResources(java.lang.String)>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<register-finalize <org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder$BCryptVersion: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Vector: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><org.springframework.security.oauth2.provider.OAuth2Request: java.lang.String getClientId()>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.lang.Iterable,java.lang.CharSequence)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.aspectj.weaver.ResolvedType$Missing: void <init>()>-><org.aspectj.weaver.ResolvedType: void <init>(java.lang.String,org.aspectj.weaver.World)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.naming.NamingException: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.invoke.LambdaForm: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.web.reactive.AbstractWebFluxEndpointHandlerMapping: void <clinit>()>-><org.springframework.web.util.pattern.PathPatternParser: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String)>-><org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><cn.hutool.core.map.MapProxy: java.lang.Object remove(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeShortFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.alibaba.fastjson.JSON: java.lang.String toString()>
<org.springframework.boot.actuate.health.HealthEndpointSupport: void <clinit>()>-><org.springframework.boot.actuate.health.Health$Builder: org.springframework.boot.actuate.health.Health build()>
<springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiListingReferenceScanner getApiListingReferenceScanner()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.node.TextNode: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.StringBuilder: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$PooledDataSourceConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.p6spy.engine.logging.Category: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.ConcurrentDateFormat: void <init>(java.lang.String,java.util.Locale,java.util.TimeZone)>-><java.lang.Object: void <init>()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeCharacterFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void removeListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void debug(java.lang.String)>-><io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void log(int,java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.google.common.cache.CacheBuilder$2: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: void setLong(java.lang.Object,long)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void beforeConfigure()>
<org.aspectj.weaver.patterns.NoTypePattern: void <init>()>-><org.aspectj.weaver.patterns.TypePatternList: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<org.springframework.boot.actuate.trace.http.HttpExchangeTracer: java.lang.Long lambda$sendingResponse$0(org.springframework.boot.actuate.trace.http.HttpTrace)>-><java.time.Instant: long toEpochMilli()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeTypedContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.ProxyDatabaseMetaData: java.sql.SQLException checkException(java.sql.SQLException)>-><com.zaxxer.hikari.pool.ProxyConnection: java.sql.SQLException checkException(java.sql.SQLException)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.collect.ArrayListMultimap: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>-><org.apache.juli.logging.DirectJDKLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.Object getLast(java.util.List)>-><com.google.common.base.Joiner$3: int size()>
<org.codehaus.jackson.map.util.ClassUtil: void checkAndFixAccess(java.lang.reflect.Member)>-><java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.nio.CharBuffer: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.core.io.Resource getResource(java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: void postDeregister()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.io.FilePermission: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.io.File: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean contains(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean contains(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.alibaba.fastjson.parser.ParseContext: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.JsonMappingException: java.lang.String toString()>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object,int)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><io.netty.util.concurrent.PromiseTask: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$EmptySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$AndPredicate: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: int compareTo(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: java.sql.ParameterMetaData getParameterMetaData()>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: java.sql.ParameterMetaData getParameterMetaData()>
<org.apache.catalina.connector.CoyoteWriter: void <clinit>()>-><java.lang.System: java.lang.String lineSeparator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Character$Subset: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Float: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(org.springframework.security.access.ConfigAttribute)>-><java.util.AbstractList: java.util.Iterator iterator()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(long)>-><java.lang.Long: java.lang.String toString(long)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.thymeleaf.spring5.util.SpringVersionUtils: void <clinit>()>-><java.lang.Class: java.lang.Package getPackage()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isUseSsl()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.aspectj.weaver.World: void <clinit>()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.URL: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void access$100(com.sun.jmx.interceptor.DefaultMBeanServerInterceptor,java.lang.ClassLoader,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void removeClassLoader(java.lang.ClassLoader,javax.management.ObjectName)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void checkPulse()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.lang.Float: int compareTo(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettucePoolingConnectionProvider: void <init>(org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: org.apache.commons.pool2.impl.GenericObjectPoolConfig getPoolConfig()>
<org.springframework.web.filter.FormContentFilter: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.BitSet: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.codehaus.jackson.map.type.ClassKey: int compareTo(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.web.servlet.view.ResourceBundleViewResolver: org.springframework.beans.factory.BeanFactory initFactory(java.util.Locale)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<com.fasterxml.classmate.util.LRUTypeCache$CacheMap: void <init>(int)>-><java.util.LinkedHashMap: void <init>()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><cn.hutool.core.map.MapProxy: boolean isEmpty()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafWebMvcConfiguration$ThymeleafViewResolverConfiguration: void <init>()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void setSuffixPatternMatch(boolean)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationDeprecatedReader: void <init>()>
<java.util.PriorityQueue: boolean offer(java.lang.Object)>-><java.util.PriorityQueue: void grow(int)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.String getQualifiedFieldName()>
<com.zaxxer.hikari.HikariConfig: void <init>(java.util.Properties)>-><com.zaxxer.hikari.HikariConfig: void <init>()>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void lambda$new$0(org.springframework.security.core.userdetails.UserDetails)>-><org.springframework.security.authentication.LockedException: void <init>(java.lang.String)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeUsingCustom(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.LinkedHashMap: java.util.Collection values()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<com.p6spy.engine.spy.P6ModuleManager: void loadDriversExplicitly(com.p6spy.engine.spy.P6SpyLoadableOptions)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>(java.lang.String[])>-><org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void load(java.lang.String[])>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeStaticObjectFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.math.BigDecimal: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.client.BaseClientDetails: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.jdbc.datasource.DataSourceUtils: void applyTimeout(java.sql.Statement,javax.sql.DataSource,int)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setQueryTimeout(int)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean remove(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean remove(java.lang.Object)>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><org.aspectj.util.LangUtil: boolean is15VMOrGreater()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.lang.Character: int compareTo(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ListenerWrapper: void <init>(javax.management.NotificationListener,javax.management.ObjectName,java.lang.Object)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.thymeleaf.util.ClassLoaderUtils: java.lang.ClassLoader getThreadContextClassLoader()>-><java.util.concurrent.ForkJoinWorkerThread$InnocuousForkJoinWorkerThread: java.lang.ClassLoader getContextClassLoader()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.awt.Point: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object,int,int)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object,int,int)>
<org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>-><org.springframework.web.method.HandlerMethod: java.lang.Class getBeanType()>
<org.springframework.web.util.pattern.PathPattern: void <clinit>()>-><java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyResultSet: java.lang.Object getObject(int)>-><com.zaxxer.hikari.pool.HikariProxyResultSet: java.lang.Object getObject(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.Provider$UString: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.http.HttpHeaders: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.util.Set entrySet()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.p6spy.engine.spy.option.P6OptionsRepository$DelayedOptionChange: boolean equals(java.lang.Object)>
<org.aspectj.bridge.context.CompilationAndWeavingContext$DefaultFormatter: void <init>(org.aspectj.bridge.context.CompilationAndWeavingContext$1)>-><org.aspectj.bridge.context.CompilationAndWeavingContext$DefaultFormatter: void <init>()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.CopyOnWriteArraySet: int size()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.boot.context.properties.source.ConfigurationPropertyName$ElementsParser: void add(int,int,org.springframework.boot.context.properties.source.ConfigurationPropertyName$ElementType,java.util.function.Function)>-><java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.NullNode: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setDate(int,java.sql.Date,java.util.Calendar)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.SubList$1: boolean hasNext()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<javax.print.MimeType: java.lang.String removeBackslashes(java.lang.String)>-><java.lang.String: char charAt(int)>
<java.util.AbstractSet: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<com.zaxxer.hikari.pool.ProxyLeakTask: void run()>-><java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
<org.apache.catalina.core.ApplicationContextFacade: void <init>(org.apache.catalina.core.ApplicationContext)>-><org.apache.catalina.core.ApplicationContextFacade: void initClassCache()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: int size()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.beans.IndexedPropertyDescriptor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><cn.hutool.core.date.format.FastDateFormat: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeBooleanFieldAccessorImpl: int getInt(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void initialize()>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<net.logstash.logback.encoder.com.lmax.disruptor.MultiProducerSequencer: void setAvailableBufferValue(int,int)>-><sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object,java.lang.Throwable)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>-><org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.springframework.core.io.ResourceLoader getResourceLoader()>
<com.alibaba.fastjson.JSONPath: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore$TokenExpiry: int compareTo(java.lang.Object)>
<com.alibaba.fastjson.serializer.MiscCodec: void writeIterator(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.SerializeWriter,java.util.Iterator)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.base.Joiner$3: int size()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.time.Instant getCreationTime()>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,int)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.alibaba.fastjson.JSONObject: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.session.security.web.authentication.SpringSessionRememberMeServices: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.Reflection: java.lang.Class getCallerClass()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$DelegatingHandlerMappingDescriptionProvider: void <init>(java.util.List,org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$DelegatingHandlerMappingDescriptionProvider: void <init>(java.util.List)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Collections$UnmodifiableList: java.lang.Object set(int,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.locale.Extension: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration$TokenKeyEndpointRegistrar: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><ch.qos.logback.core.joran.spi.ElementSelector: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.font.EAttribute: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.aspectj.weaver.SourceContextImpl: void <clinit>()>-><org.aspectj.weaver.SourceContextImpl$1: void <init>()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.ResolvedType: java.lang.Class getErasedType()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.Collections$UnmodifiableCollection: int size()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.HashMap: void <init>(int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<org.springframework.session.web.http.SessionRepositoryFilter: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: org.springframework.security.oauth2.common.OAuth2AccessToken getAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool: void fillPool()>-><java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.web.method.ControllerAdviceBean: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<cn.hutool.core.map.CustomKeyMap: void putAll(java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFloatFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.apache.tomcat.util.buf.UEncoder$SafeCharsSet: java.util.BitSet access$100(org.apache.tomcat.util.buf.UEncoder$SafeCharsSet)>-><org.apache.tomcat.util.buf.UEncoder$SafeCharsSet: java.util.BitSet getSafeChars()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><com.google.common.base.Joiner$3: int size()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.aspectj.weaver.patterns.ThisOrTargetPointcut: void <clinit>()>-><org.aspectj.weaver.Shadow$Kind: boolean neverHasTarget()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <init>()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.apache.logging.log4j.Level: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ThreadFactory lambda$initializeHouseKeepingExecutorService$3()>-><java.lang.StringBuilder: void <init>()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><java.lang.ref.ReferenceQueue: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterMultiplesReader: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<org.springframework.session.security.web.authentication.SpringSessionRememberMeServices: void <init>()>-><java.lang.Object: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.http.HttpHost: void <init>(org.apache.http.HttpHost)>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.PropertyPermission: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.codehaus.jackson.map.type.TypeParser: java.lang.Class findClass(java.lang.String,org.codehaus.jackson.map.type.TypeParser$MyTokenizer)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><io.netty.buffer.AbstractByteBuf: int compareTo(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder builder()>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><org.aspectj.weaver.ResolvedType$FieldGetter: void <init>(org.aspectj.weaver.ResolvedType$1)>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Spliterator spliterator()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Spliterator spliterator()>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void setTrailingSlashMatch(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.PermissionCollection: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<io.micrometer.core.util.internal.logging.JdkLogger: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.HashSet: java.util.Iterator iterator()>
<com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<org.springframework.security.web.FilterChainProxy: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.naming.NamingException: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void initialize()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.config.BeanExpressionContext: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean add(java.lang.Object)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.aop.framework.ProxyCreatorSupport: org.springframework.aop.framework.AopProxy createAopProxy()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.JdkLogger: void <init>(java.util.logging.Logger)>-><java.util.logging.Logger: java.lang.String getName()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: boolean isConfigured()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.validation.ObjectError: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.RDN: java.lang.String toString()>
<reactor.util.function.Tuple2: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNString(int,java.lang.String)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setNString(int,java.lang.String)>
<java.util.Collection: java.util.stream.Stream parallelStream()>-><java.util.concurrent.LinkedBlockingQueue: java.util.Spliterator spliterator()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries: boolean remove(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.logging.LogManager$1: java.util.logging.LogManager run()>-><org.aspectj.weaver.BCException: void printStackTrace()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<io.netty.util.internal.NativeLibraryLoader: void load(java.lang.String,java.lang.ClassLoader)>-><java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.springframework.util.MimeType: int compareTo(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.awt.Point: java.lang.String toString()>
<org.apache.catalina.connector.Response: void <init>()>-><org.apache.catalina.connector.Response: void <init>(int)>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Optional: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyConnection: java.sql.DatabaseMetaData getMetaData()>
<org.apache.http.protocol.ImmutableHttpProcessor: void <init>(java.util.List,java.util.List)>-><com.google.common.base.Joiner$3: int size()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.jsontype.NamedType: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.Collections$SynchronizedCollection: boolean remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.aop.TruePointcut: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.jar.Attributes: boolean isEmpty()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>-><java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FormatCache$MultipartKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.ProxyLeakTask: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: int getInt(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeContentsUsing(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERIA5String: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<reactor.util.function.Tuple4: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String[])>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.lang.ProcessEnvironment$Variable: int compareTo(java.lang.Object)>
<org.springframework.security.web.csrf.CsrfAuthenticationStrategy: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><java.lang.Object: void <init>()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.SubList$1: boolean hasNext()>
<org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object)>-><org.apache.juli.logging.DirectJDKLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.ResolvableType: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getTraceParameter(javax.servlet.http.HttpServletRequest)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><reactor.util.function.Tuple2: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$Values: java.util.Iterator iterator()>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents$Type$3: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.ArrayType: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl createComposingConstraintDescriptor(org.hibernate.validator.internal.metadata.core.ConstraintHelper,java.lang.reflect.Member,java.util.Map,int,java.lang.annotation.Annotation,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ConstraintType)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$EntryFactory$3: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.apache.catalina.core.ApplicationContext: void <init>(org.apache.catalina.core.StandardContext)>-><java.lang.ThreadLocal: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.DefaultTokenServices: org.springframework.security.oauth2.common.OAuth2AccessToken createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeRefreshToken(org.springframework.security.oauth2.common.OAuth2RefreshToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.reflect.UnsafeLongFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: void addNode(org.springframework.data.redis.connection.RedisStandaloneConfiguration)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<javax.print.MimeType: void parse(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean remove(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: int compareTo(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationTagsReader: void <init>(springfox.documentation.spring.web.readers.operation.DefaultTagsProvider)>-><java.lang.Object: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.Double: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: java.util.Set addCandidateComponentsFromIndex(org.springframework.context.index.CandidateComponentsIndex,java.lang.String)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<de.codecentric.boot.admin.client.registration.BlockingRegistrationClient: void <clinit>()>-><de.codecentric.boot.admin.client.registration.BlockingRegistrationClient$1: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.nio.charset.Charset: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.SessionRepositoryFilterConfiguration: void <init>()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.sun.net.httpserver.Headers: java.lang.String getFirst(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: void <init>(java.lang.String,int)>-><org.springframework.data.redis.connection.RedisPassword: org.springframework.data.redis.connection.RedisPassword none()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.Parsed: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTimestamp(int,java.sql.Timestamp)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setTimestamp(int,java.sql.Timestamp)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><de.codecentric.boot.admin.client.config.SpringBootAdminClientCloudFoundryAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.Permission: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.paths.OperationPathDecorator: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>
<com.zaxxer.hikari.pool.ProxyConnection: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><reactor.core.Fuseable$QueueSubscription: java.lang.Object[] toArray()>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber,java.util.Iterator,java.lang.Runnable)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.codehaus.jackson.map.deser.SettableAnyProperty: void _throwAsIOE(java.lang.Exception,java.lang.String,java.lang.Object)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.apache.http.protocol.ImmutableHttpProcessor: void <init>(java.util.List,java.util.List)>-><java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: int getInt(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.LegacyHealthEndpointCompatibilityConfiguration: void <init>()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeStaticByteFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<java.net.InMemoryCookieStore: void getInternal1(java.util.List,java.util.Map,java.lang.String,boolean)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.data.util.TypeVariableTypeInformation: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.pool.ProxyLeakTaskFactory: void updateLeakDetectionThreshold(long)>
<sun.reflect.UnsafeDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(double)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.Weigher getWeigher()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.net.URI: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String toString()>
<java.io.ObjectStreamClass: java.lang.Long getDeclaredSUID(java.lang.Class)>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void init(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$EnableSameManagementContextConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientName()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<com.baomidou.dynamic.datasource.DynamicDataSourceCreator: void <clinit>()>-><org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup: void <init>()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.aop.framework.ProxyConfig: void setFrozen(boolean)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.AVA: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: void <clinit>()>-><java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.AbstractList: java.lang.String outOfBoundsMsg(int)>-><com.google.common.base.Joiner$3: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool: void access$600(com.zaxxer.hikari.pool.HikariPool)>-><com.zaxxer.hikari.pool.HikariPool: void fillPool()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.alibaba.fastjson.serializer.SerialContext: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.ApiListingReferenceScanner: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<org.thymeleaf.spring5.dialect.SpringStandardDialect: void <init>()>-><org.thymeleaf.standard.StandardDialect: void <init>(java.lang.String,java.lang.String,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.mail.MailHealthContributorAutoConfiguration: void <init>()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<org.springframework.boot.actuate.trace.http.Include: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeTypedContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName nonDefaultDomain(javax.management.ObjectName)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.apache.tomcat.util.buf.StringCache: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: boolean isCandidateComponent(org.springframework.core.type.classreading.MetadataReader)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.google.common.collect.Maps$KeySet: int size()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<com.google.common.cache.LocalCache: boolean recordsWrite()>-><com.google.common.cache.LocalCache: boolean expiresAfterWrite()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.Duration: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.ParsePosition: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>-><java.util.concurrent.TimeUnit$6: long toNanos(long)>
<org.springframework.boot.actuate.metrics.http.Outcome: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,org.springframework.http.MediaType[])>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERGeneralString: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void addAllowedOrigin(java.lang.String)>
<java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>-><java.util.concurrent.CopyOnWriteArrayList: void add(int,java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1TaggedObject: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.collect.ArrayListMultimap: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$SynchronizedMap: java.lang.Object remove(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<org.springframework.web.bind.annotation.RequestMethod: void <clinit>()>-><org.springframework.web.bind.annotation.RequestMethod: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$Values: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisPassword: org.springframework.data.redis.connection.RedisPassword lambda$of$0(java.lang.String)>-><org.springframework.data.redis.connection.RedisPassword: void <init>(char[])>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.common.ExpressionUtils: java.lang.Object convertTypedValue(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,java.lang.Class)>
<sun.reflect.UnsafeStaticByteFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.net.InetSocketAddress: java.lang.String toString()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: org.springframework.security.access.SecurityMetadataSource obtainSecurityMetadataSource()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration$ReactiveUserDetailsServiceCondition$ReactiveWebApplicationCondition: void <init>()>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1Null: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.lang.Error: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERPrintableString: java.lang.String toString()>
<org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration$CacheManagerValidator: void afterPropertiesSet()>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory: void _set(com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context,com.alibaba.fastjson.asm.MethodVisitor,com.alibaba.fastjson.util.FieldInfo)>-><java.lang.reflect.Field: java.lang.String getName()>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.lang.Integer: int intValue()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.IdentityHashMap$KeySet: boolean remove(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.security.cert.Certificate: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.TreeSet: java.util.Iterator iterator()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$5: void <init>(java.lang.String,int)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.WeakHashMap$KeySet: boolean remove(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.apache.catalina.core.StandardContext: void <clinit>()>-><org.apache.catalina.core.StandardContext$1: void <init>()>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyLeakTask: void run()>-><java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><java.lang.Iterable: void forEach(java.util.function.Consumer)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.TypedValue toTypedValue(java.lang.Object)>-><org.springframework.expression.TypedValue: void <init>(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.time.YearMonth: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><org.springframework.util.Assert: void isTrue(boolean,java.util.function.Supplier)>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.List toImmutableList(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><java.util.HashSet: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.thymeleaf.extras.java8time.dialect.Java8TimeExpressionFactory: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.util.ParameterizedTypeInformation: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: boolean isConfigured()>-><java.util.ArrayList: boolean isEmpty()>
<com.zaxxer.hikari.HikariDataSource: void <init>()>-><java.util.concurrent.atomic.AtomicBoolean: void <init>()>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>(java.lang.Class,java.lang.String[])>-><org.springframework.beans.factory.xml.XmlBeanDefinitionReader: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isVerifyPeer()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings$Mapping: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceSubscription initSubscription(org.springframework.data.redis.connection.MessageListener)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.couchbase.CouchbaseConfiguration: void <init>(org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties)>
<org.apache.catalina.core.StandardContext: void <init>()>-><org.apache.catalina.core.StandardContext$ContextFilterMaps: void <init>(org.apache.catalina.core.StandardContext$1)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<reactor.util.function.Tuple4: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.Log4J2MetricsAutoConfiguration: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.config.BeanExpressionContext: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.ImmutableDescriptor: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.POJONode: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.LinkedList: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNClob(int,java.io.Reader,long)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNClob(int,java.io.Reader,long)>
<org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean: void afterPropertiesSet()>-><com.atomikos.jms.AtomikosConnectionFactoryBean: void init()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.SessionAutoConfiguration$ServletSessionConfiguration$ServletSessionRepositoryConfiguration: void <init>()>
<sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess: void <clinit>()>-><sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: void setLong(java.lang.Object,long)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<springfox.documentation.spring.web.readers.operation.OperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>-><springfox.documentation.spring.web.readers.operation.AbstractOperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.ser.std.JsonValueSerializer: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.lang.Object getAttribute(java.lang.String)>-><org.springframework.session.data.redis.RedisIndexedSessionRepository: org.springframework.session.SaveMode access$600(org.springframework.session.data.redis.RedisIndexedSessionRepository)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<javax.servlet.SessionTrackingMode: void <clinit>()>-><javax.servlet.SessionTrackingMode: void <init>(java.lang.String,int)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.io.File: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: long getLong(java.lang.Object)>
<com.zaxxer.hikari.util.IsolationLevel: void <init>(java.lang.String,int,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.locale.provider.RuleBasedBreakIterator: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.ArrayType: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.Hashtable$EntrySet: boolean remove(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.NoDescriptorRegistry: void <init>()>-><org.apache.tomcat.util.modeler.Registry: void <init>()>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: void <init>()>-><javax.management.MBeanServerDelegate: void <init>()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$9: void <init>()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.logging.LogManager$5: java.lang.Object run()>-><org.aspectj.weaver.BCException: void printStackTrace()>
<com.zaxxer.hikari.pool.HikariProxyDatabaseMetaData: java.lang.String getDriverName()>-><com.zaxxer.hikari.pool.HikariProxyDatabaseMetaData: java.lang.String getDriverName()>
<com.alibaba.fastjson.serializer.GuavaCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isVerifyPeer()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.InstanceNotFoundException: void <init>(java.lang.String)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.TabularType: boolean equals(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,org.codehaus.jackson.map.JsonMappingException$Reference)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.apache.http.util.TextUtils: boolean containsBlanks(java.lang.CharSequence)>-><java.lang.Character: boolean isWhitespace(char)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisConfiguration: org.springframework.data.redis.connection.RedisPassword getPasswordOrElse(org.springframework.data.redis.connection.RedisConfiguration,java.util.function.Supplier)>-><org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: org.springframework.data.redis.connection.RedisPassword getPassword()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <clinit>()>-><java.util.LinkedHashSet: void <init>(java.util.Collection)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<sun.reflect.UnsafeByteFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Object: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.net.URI: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.management.ThreadDumpEndpointAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.io.ObjectStreamField: int compareTo(java.lang.Object)>
<sun.reflect.UnsafeShortFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.Hashtable$KeySet: boolean remove(java.lang.Object)>
<sun.reflect.UnsafeStaticFloatFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.Byte: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.AbstractCollection: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.Color: boolean equals(java.lang.Object)>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: int accept(java.lang.reflect.Method)>-><org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: boolean isStatic()>
<org.springframework.boot.actuate.health.Health: org.springframework.boot.actuate.health.Health$Builder status(org.springframework.boot.actuate.health.Status)>-><org.springframework.boot.actuate.health.Health$Builder: void <init>(org.springframework.boot.actuate.health.Status)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector: void _addFieldMixIns(java.lang.Class,java.lang.Class,java.util.Map)>-><java.lang.reflect.Field: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.boot.web.client.ClientHttpRequestFactorySupplier: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><java.util.ArrayList: void clear()>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<register-finalize <org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration: void <init>()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntrySet: int size()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.util.ParentTypeAwareTypeInformation: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTimestamp(int,java.sql.Timestamp)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<org.codehaus.jackson.map.util.ClassUtil: void throwAsIAE(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.aspectj.weaver.patterns.EllipsisTypePattern: void <init>()>-><org.aspectj.weaver.patterns.TypePatternList: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.ZonedDateTime: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int compare(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <init>()>-><java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
<springfox.documentation.spring.web.readers.operation.AbstractOperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<javax.print.MimeType: void parse(java.lang.String)>-><java.util.Vector: int size()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: org.springframework.security.oauth2.common.OAuth2AccessToken getAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.function.RequestPredicates: void traceMatch(java.lang.String,java.lang.Object,java.lang.Object,boolean)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<org.codehaus.jackson.impl.ReaderBasedParser: byte[] getBinaryValue(org.codehaus.jackson.Base64Variant)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void load(java.lang.Class,java.lang.String[])>-><org.springframework.core.io.ClassPathResource: void <init>(java.lang.String,java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.ArrayList: void <init>()>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,int)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.image.ColorModel: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.config.DependencyDescriptor: void <init>(java.lang.reflect.Field,boolean,boolean)>-><org.springframework.beans.factory.InjectionPoint: void <init>(java.lang.reflect.Field)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>
<reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><reactor.core.scheduler.ParallelScheduler: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.time.Instant: int compareTo(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: boolean isRegistered(javax.management.ObjectName)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<com.google.common.cache.LocalCache$Strength$1: com.google.common.base.Equivalence defaultEquivalence()>-><com.google.common.base.Equivalence: com.google.common.base.Equivalence equals()>
<sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.lang.Iterable,java.lang.CharSequence,java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.node.IntNode: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int hugeCapacity(int)>-><java.lang.OutOfMemoryError: void <init>()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: int getInt(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.locale.Extension: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.TreeMap$KeySet: int size()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<javax.management.MBeanServerDelegate: java.lang.String getMBeanServerId()>-><java.util.logging.Logger: void finest(java.lang.String)>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<com.alibaba.fastjson.serializer.MiscCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<org.apache.catalina.util.LifecycleBase: void setState(org.apache.catalina.LifecycleState)>-><org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.LocalDateTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Label: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.deser.std.StdKeyDeserializer: java.lang.Object deserializeKey(java.lang.String,org.codehaus.jackson.map.DeserializationContext)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.slf4j.event.Level: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.P6ModuleManager: void loadDriversExplicitly(com.p6spy.engine.spy.P6SpyLoadableOptions)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<org.codehaus.jackson.map.introspect.AnnotatedField: void setValue(java.lang.Object,java.lang.Object)>-><java.lang.Throwable: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration: void <init>()>
<org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$DifferentManagementContextConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.actuate.autoconfigure.web.ManagementContextFactory)>-><org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextFactory: void <init>()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: void <init>()>-><org.aspectj.weaver.patterns.AnnotationTypePattern: void <init>()>
<com.alibaba.fastjson.parser.deserializer.EnumDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$2: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.openmbean.ArrayType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.String toString()>
<javax.management.MBeanServerDelegate: java.lang.String getMBeanServerId()>-><java.lang.StringBuilder: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void <init>(org.slf4j.spi.LocationAwareLogger)>-><ch.qos.logback.classic.Logger: java.lang.String getName()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object,java.lang.Object,int,int[])>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.StringJoiner: java.lang.String toString()>
<org.aspectj.weaver.patterns.AnyTypePattern: void <init>()>-><org.aspectj.weaver.patterns.TypePatternList: void <init>()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><java.util.Collections: java.util.Set emptySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: java.lang.String getApprovalKey(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><java.lang.Object: java.lang.Class getClass()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.aspectj.util.LangUtil: void <clinit>()>-><org.aspectj.util.LangUtil: java.util.List getFirstNumbers(java.lang.String)>
<org.springframework.aop.framework.ProxyFactoryBean: java.util.List freshAdvisorChain()>-><java.util.ArrayList: void <init>(int)>
<org.aspectj.weaver.patterns.WithincodePointcut: void <clinit>()>-><org.aspectj.weaver.Shadow$Kind: boolean isEnclosingKind()>
<org.springframework.beans.PropertyMatches$FieldPropertyMatches: void lambda$calculateMatches$0(java.lang.String,int,java.util.List,java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.String getName()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<java.lang.reflect.Field: boolean isSynthetic()>-><java.lang.reflect.Field: int getModifiers()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.lang.ProcessEnvironment$Value: int compareTo(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.PathContainer$Options: boolean shouldDecodeAndParseSegments()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><reactor.util.function.Tuple2: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: java.lang.String substring(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.util.LifecycleBase: void destroy()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.util.concurrent.DelayQueue: void put(java.util.concurrent.Delayed)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>
<register-finalize <org.apache.tomcat.util.http.parser.SkipResult: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.ZoneOffset: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Hashtable$EntrySet: int size()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.LocalCache$Strength getValueStrength()>-><com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: int indexOf(java.lang.String)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.aop.framework.ProxyFactoryBean: java.util.List freshAdvisorChain()>-><org.springframework.aop.framework.AdvisedSupport: org.springframework.aop.Advisor[] getAdvisors()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed poll()>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.MBeanInfo: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>-><java.util.ArrayList: boolean isEmpty()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.Clock$SystemClock: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><java.lang.reflect.Field: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><java.lang.ThreadGroup: java.lang.String getName()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.TreeSet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<org.apache.catalina.security.SecurityUtil: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Hashtable: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void add(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean add(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.boot.actuate.metrics.web.client.MetricsClientHttpRequestInterceptor: void <clinit>()>-><org.springframework.core.NamedThreadLocal: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERVisibleString: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.ApiDescriptionLookup: void <init>()>-><java.lang.Object: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$SetFromMap: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Sequence: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksEndpointAutoConfiguration: void <init>()>
<register-finalize <org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse success()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: void <init>(org.springframework.http.HttpStatus)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration: void <init>(org.springframework.mail.javamail.JavaMailSenderImpl)>-><org.springframework.mail.javamail.JavaMailSenderImpl: void <init>()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<java.util.logging.LogManager$1: java.util.logging.LogManager run()>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl createComposingConstraintDescriptor(org.hibernate.validator.internal.metadata.core.ConstraintHelper,java.lang.reflect.Member,java.util.Map,int,java.lang.annotation.Annotation,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ConstraintType)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.Class)>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.CompletableFuture: java.lang.String toString()>
<com.p6spy.engine.common.P6Util: java.lang.String joinNullSafe(java.util.Collection,java.lang.String)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.util.ClassUtil: void throwAsIAE(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: int getInt(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: void adviceChanged()>-><org.springframework.aop.framework.ProxyCreatorSupport: void adviceChanged()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$SubscriptionPresentCondition eventuallyPerformSubscription()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><java.util.ArrayList: int size()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<springfox.documentation.schema.property.bean.AccessorsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.type.MapLikeType: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: java.sql.ParameterMetaData getParameterMetaData()>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: java.lang.Class getSecureObjectClass()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.PermissionCollection: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.asm.Type: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.util.concurrent.SpscArrayQueue: int size()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<cn.hutool.http.HttpBase: java.lang.Object header(java.util.Map,boolean)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$1: void <init>(java.lang.String,int,java.lang.String)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String,org.springframework.context.annotation.MBeanExportConfiguration$1)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpointAutoConfiguration: void <init>()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeStaticByteFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultUserInfoRestTemplateFactory: org.springframework.security.oauth2.client.OAuth2RestTemplate getUserInfoRestTemplate()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.io.FilePermission: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.map.type.ArrayType: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.JumboEnumSet: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: java.util.List freshAdvisorChain()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.JumboEnumSet: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.CodeSigner: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.sql.Date: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.apache.catalina.core.StandardContext$ContextFilterMaps: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.tomcat.util.http.parser.HttpParser: void <init>(java.lang.String,java.lang.String)>-><org.apache.tomcat.util.http.parser.HttpParser: void relax(boolean[],java.lang.String)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean isFilterMatch(java.lang.Class,org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean)>-><org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer: boolean isEndpointExposed(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><reactor.util.function.Tuple4: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><org.apache.juli.logging.DirectJDKLog: void trace(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.lettuce.core.masterslave.MasterSlaveConnectionProvider$ConnectionKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.sql.Time: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Calendar: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Show: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Show: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<java.io.ObjectStreamClass$MemberSignature: void <init>(java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.String getName()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void sendNotification(java.lang.String,javax.management.ObjectName)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.List toImmutableList(java.util.List)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxCreate$LatestAsyncSink: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: java.lang.Object removeAt(int)>-><java.util.PriorityQueue: void siftDown(int,java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.data.redis.listener.KeyspaceEventMessageListener: void init()>-><org.springframework.data.redis.connection.DefaultedRedisConnection: void setConfig(java.lang.String,java.lang.String)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.Double: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERVisibleString: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,org.codehaus.jackson.map.JsonMappingException$Reference)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.EnableChildManagementContextConfiguration: void <init>()>
<com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getKeyEquivalence()>-><com.google.common.cache.LocalCache$Strength$1: com.google.common.base.Equivalence defaultEquivalence()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isUseSsl()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: void setLong(java.lang.Object,long)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.type.TypeParser: java.lang.Class findClass(java.lang.String,org.codehaus.jackson.map.type.TypeParser$MyTokenizer)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.net.InMemoryCookieStore: void getInternal2(java.util.List,java.util.Map,java.lang.Comparable,boolean)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.TreeMap$Values: int size()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<sun.reflect.UnsafeObjectFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<org.springframework.web.client.RestTemplate: void <init>(java.util.List)>-><org.springframework.web.client.RestTemplate: void validateConverters(java.util.List)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.LocalDate: java.lang.String toString()>
<com.google.common.cache.LocalCache$LocalManualCache: void <init>(com.google.common.cache.LocalCache)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.util.context.Context1: java.lang.String toString()>
<org.springframework.web.util.UriComponentsBuilder: java.lang.Object lambda$buildInternal$0(java.lang.String)>-><java.util.HashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>-><java.lang.String: java.lang.String valueOf(char)>
<com.p6spy.engine.spy.P6ModuleManager: void <init>()>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERUniversalString: java.lang.String toString()>
<org.apache.catalina.util.ContextName: java.lang.String getDisplayName()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.security.web.access.expression.WebExpressionVoter: void <init>()>-><org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><com.google.common.collect.Maps$KeySet: boolean isEmpty()>
<java.util.ArrayList$SubList$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Character: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.session.MapSession: void <init>(java.lang.String)>-><java.time.Instant: java.time.Instant now()>
<org.apache.catalina.util.LifecycleBase: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.asm.Type: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void unregisterComponent(javax.management.ObjectName)>-><org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: void <init>()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.CloudFoundrySecurityInterceptor: void <clinit>()>-><reactor.core.publisher.Mono: reactor.core.publisher.Mono just(java.lang.Object)>
<org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter: java.util.Map lambda$new$0(javax.servlet.http.HttpServletRequest)>-><java.util.Collections: java.util.Map emptyMap()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.util.Date: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: java.lang.Object getAttribute(java.lang.String)>-><javax.management.MBeanServerDelegate: java.lang.String getImplementationVendor()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1BitString: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.IntNode: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.StackTraceElement: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeLongFieldAccessorImpl: long getLong(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.SubList$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setBoolean(int,boolean)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setBoolean(int,boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext getEvaluationContext()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.JumboEnumSet: boolean add(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>-><java.util.HashSet: java.util.Iterator iterator()>
<sun.reflect.UnsafeStaticObjectFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object,int,int)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void ensureObj(java.lang.Object)>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$10: void <init>()>
<org.springframework.security.oauth2.provider.client.JdbcClientDetailsService$ClientDetailsRowMapper: org.springframework.security.oauth2.provider.ClientDetails mapRow(java.sql.ResultSet,int)>-><com.zaxxer.hikari.pool.HikariProxyResultSet: int getInt(int)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.type.SimpleType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
<org.springframework.security.web.access.expression.WebExpressionVoter: boolean supports(java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField: void <clinit>()>-><sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientName()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientName()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: void buildFromSorted(java.util.SortedMap)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>
<register-finalize <org.apache.tomcat.util.buf.UEncoder$SafeCharsSet: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$EmptyList: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.alibaba.fastjson.JSONArray: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Character: java.lang.Character valueOf(char)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <init>(org.springframework.security.web.server.csrf.CsrfWebFilter$1)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<org.springframework.web.servlet.resource.ResourceUrlEncodingFilter: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource[] getResources(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Properties: void <init>()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: int characteristics()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.YearMonth: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>(org.springframework.core.io.Resource[])>-><org.springframework.beans.factory.xml.XmlBeanDefinitionReader: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>-><ch.qos.logback.classic.Logger: java.lang.String getName()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.core.io.SerializedString: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.BigIntegerNode: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isUseSsl()>
<springfox.documentation.schema.property.bean.AccessorsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<cn.hutool.http.HttpConnection: cn.hutool.http.HttpConnection header(java.util.Map,boolean)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: boolean equals(java.lang.Object)>
<org.aspectj.weaver.NameMangler: void <clinit>()>-><org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forSignature(java.lang.String)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.Collections$SingletonList: int size()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.security.AllPermission: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.http.ResponseEntity: java.lang.String toString()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.type.TypeParser: java.lang.Class findClass(java.lang.String,org.codehaus.jackson.map.type.TypeParser$MyTokenizer)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.time.Duration getMaxInactiveInterval()>-><org.springframework.session.MapSession: java.time.Duration getMaxInactiveInterval()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration: void <init>()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.web.filter.GenericFilterBean: void destroy()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean remove(java.lang.Object)>
<org.springframework.web.client.RestTemplate: void <init>(java.util.List)>-><org.springframework.web.client.DefaultResponseErrorHandler: void <init>()>
<org.apache.catalina.valves.ValveBase: void initInternal()>-><org.apache.catalina.valves.ValveBase: org.apache.catalina.Container getContainer()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.ImmutableDescriptor: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.time.Year: int compareTo(java.lang.Object)>
<sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><java.lang.reflect.Field: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.alibaba.fastjson.JSONPObject: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeStaticObjectFieldAccessorImpl: long getLong(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<java.util.logging.Handler: void reportError(java.lang.String,java.lang.Exception,int)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeStaticLongFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.SimpleType: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$2: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.MessageDigest: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$NotPredicate: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.annotation.TypeMappedAnnotation: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration$ReactiveConfiguration: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.core.publisher.Operators$EmptySubscription: int size()>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.LifecycleException: void <init>()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration$SessionCleanupConfiguration: void <init>(org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration,org.springframework.session.data.redis.RedisIndexedSessionRepository)>-><org.springframework.session.data.redis.RedisIndexedSessionRepository: void <init>(org.springframework.data.redis.core.RedisOperations)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeFloatFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setNull(java.sql.PreparedStatement,int,int,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: java.sql.ParameterMetaData getParameterMetaData()>
<org.springframework.boot.security.servlet.ApplicationContextRequestMatcher: void <init>(java.lang.Class)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Vector: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultSeparator: void <init>(char,java.lang.String)>-><java.lang.Object: void <init>()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><java.util.concurrent.ConcurrentLinkedQueue: void <init>()>
<java.util.PriorityQueue: boolean offer(java.lang.Object)>-><java.util.PriorityQueue: void siftUp(int,java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeUsingCustom(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.HashSet: int size()>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedList: void add(int,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<synthetic.method.SingletonFactory: void <clinit>()>-><de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration$BlockingRegistrationClientConfig: void <init>()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<cn.hutool.http.HttpUtil: java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<io.micrometer.core.util.internal.logging.JdkLogger: void debug(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLogger: void log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<org.springframework.web.context.support.ServletContextScope: void destroy()>-><io.netty.util.internal.ThreadExecutorMap$2: void run()>
<com.zaxxer.hikari.pool.HikariProxyResultSet: int getInt(int)>-><com.p6spy.engine.wrapper.ResultSetWrapper: int getInt(int)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isVerifyPeer()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: java.lang.String lambda$setDatabase$0(int)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.base.Joiner$3: int size()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.Throwable: void printStackTrace()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<javax.management.ObjectInstance: int hashCode()>-><java.lang.String: int hashCode()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.aspectj.weaver.UnresolvedType$TypeKind: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.function.RequestPredicates: void <clinit>()>-><org.springframework.web.util.pattern.PathPatternParser: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.aop.framework.AdvisedSupport: void copyConfigurationFrom(org.springframework.aop.framework.AdvisedSupport,org.springframework.aop.TargetSource,java.util.List)>-><org.springframework.aop.framework.ProxyConfig: void copyFrom(org.springframework.aop.framework.ProxyConfig)>
<net.logstash.logback.appender.AbstractLogstashTcpSocketAppender$TcpSendingEventHandler: void onEvent(net.logstash.logback.appender.AsyncDisruptorAppender$LogEvent,long,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String substring(int)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<org.springframework.boot.actuate.health.HealthEndpointSupport: void <clinit>()>-><org.springframework.boot.actuate.health.Health: org.springframework.boot.actuate.health.Health$Builder up()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.web.accept.HeaderContentNegotiationStrategy: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Enum: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.security.config.annotation.AbstractSecurityBuilder: java.lang.Object build()>-><org.springframework.security.config.annotation.AlreadyBuiltException: void <init>(java.lang.String)>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<reactor.util.function.Tuple4: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>-><java.lang.Float: java.lang.String toString(float)>
<sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.misc.Unsafe: void putIntVolatile(java.lang.Object,long,int)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void addClassIfPresent(java.util.Collection,java.lang.String)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.AbstractRedisClient createClient()>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientOptions()>
<java.util.stream.SpinedBuffer$1Splitr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind,boolean)>-><org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind,boolean,java.lang.String)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: void putAll(java.util.Map)>
<org.springframework.aop.framework.ProxyFactoryBean: java.util.List freshAdvisorChain()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.util.ClassUtil: void throwAsIAE(java.lang.Throwable)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.springframework.cglib.proxy.Enhancer: java.lang.Object wrapCachedClass(java.lang.Class)>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><ch.qos.logback.classic.Logger: void info(java.lang.String,java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.session.web.http.SessionRepositoryFilter: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: int characteristics()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: int characteristics()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Enum: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents$Type$2: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,boolean,boolean)>-><com.sun.jmx.mbeanserver.MBeanInstantiator: void <init>(com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: void <init>(org.springframework.validation.DataBinder)>-><org.springframework.ui.ModelMap: void <init>()>
<org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>-><org.springframework.security.oauth2.provider.NoSuchClientException: void <init>(java.lang.String)>
<org.springframework.boot.cloud.CloudPlatform: void <clinit>()>-><org.springframework.boot.cloud.CloudPlatform$2: void <init>(java.lang.String,int)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<org.springframework.security.authentication.RememberMeAuthenticationToken: void <init>(java.lang.Integer,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.util.Currency$1: java.lang.Void run()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.alibaba.fastjson.serializer.MiscCodec: void writeIterator(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.SerializeWriter,java.util.Iterator)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: void addAdvisorOnChainCreation(java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><org.springframework.http.server.DefaultPathContainer$DefaultSeparator: java.lang.String value()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void flush()>-><java.util.concurrent.DelayQueue: java.util.concurrent.Delayed poll()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$DropAsyncSink: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<org.thymeleaf.spring5.view.reactive.ThymeleafReactiveViewResolver: void <clinit>()>-><org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeStaticByteFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeStaticByteFieldAccessorImpl: byte getByte(java.lang.Object)>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTime(int,java.sql.Time)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setTime(int,java.sql.Time)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<com.wf.captcha.utils.GifEncoder: boolean finish()>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<com.sun.imageio.spi.RAFImageOutputStreamSpi: javax.imageio.stream.ImageOutputStream createOutputStreamInstance(java.lang.Object,boolean,java.io.File)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<springfox.documentation.spring.web.readers.parameter.ParameterRequiredReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><java.lang.Object: void <init>()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfiguration$RemoteTokenServicesConfiguration$SocialTokenServicesConfiguration: void <init>(org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoRestTemplateFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$2: void done()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.introspect.POJOPropertyBuilder: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.node.POJONode: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.util.StringJoiner: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>-><org.springframework.ui.ModelMap: org.springframework.ui.ModelMap addAllAttributes(java.util.Map)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><org.springframework.session.MapSession: java.time.Instant getLastAccessedTime()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.config.ConstructorArgumentValues: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: java.lang.Object getAttribute(java.lang.String)>-><javax.management.AttributeNotFoundException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.ConcurrentBag: boolean lambda$values$2(int,com.zaxxer.hikari.util.ConcurrentBag$IConcurrentBagEntry)>-><com.zaxxer.hikari.pool.PoolEntry: int getState()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Double: java.lang.String toString()>
<org.codehaus.jackson.map.deser.SettableBeanProperty: java.io.IOException _throwAsIOE(java.lang.Exception)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.DataFormatReaders: void <init>(java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: java.lang.String substring(int,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.core.io.FileSystemResource: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.ConnectableFluxOnAssembly: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void addClassIfExists(java.util.List,java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.HttpParser: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void debug(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager getAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer: void serializeContents(java.util.Iterator,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>-><java.lang.Boolean: java.lang.String toString(boolean)>
<java.util.Collections: void swap(java.util.List,int,int)>-><com.alibaba.fastjson.JSONArray: java.lang.Object get(int)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.Point: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Generic: void <init>()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><java.time.Duration: java.time.Duration ofSeconds(long)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><ch.qos.logback.core.subst.Token: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERUTF8String: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: int length()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void removeClassLoader(java.lang.ClassLoader,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: void removeClassLoader(javax.management.ObjectName)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <init>()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: java.util.Spliterator trySplit()>
<org.springframework.security.core.userdetails.User$UserBuilder: java.lang.String lambda$roles$1(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.temporal.WeekFields: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><io.netty.util.concurrent.ScheduledFutureTask: int compareTo(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.core.SerializableTypeWrapper$FieldTypeProvider: void <init>(java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.String getName()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.misc.Signal: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.URL: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Double: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.redis.listener.PatternTopic: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.pool.HikariPool: void <init>(com.zaxxer.hikari.HikariConfig)>
<org.apache.tomcat.util.http.parser.HttpParser: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: void <init>(java.util.SortedMap)>-><java.util.TreeMap: java.util.Comparator comparator()>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getSingletonInstance()>-><org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfacesForClass(java.lang.Class,java.lang.ClassLoader)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean: void afterPropertiesSet()>-><com.atomikos.jms.AtomikosConnectionFactoryBean: void setUniqueResourceName(java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><java.lang.reflect.Field: java.lang.Class getType()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: void addOperations(org.springframework.util.MultiValueMap,org.springframework.boot.actuate.endpoint.EndpointId,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer: org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey createOperationKey(org.springframework.boot.actuate.endpoint.Operation)>
<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field locateField(java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.reflect.Field: java.lang.String getName()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.Provider$UString: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.time.format.DateTimeTextProvider$1: int compare(java.util.Map$Entry,java.util.Map$Entry)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<com.sun.net.httpserver.Headers: java.lang.String getFirst(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>-><java.lang.String: java.lang.String intern()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.util.FieldInfo: java.lang.String toString()>
<org.springframework.boot.web.embedded.tomcat.TldSkipPatterns: void <clinit>()>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: int compareTo(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Duration: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.core.io.ClassPathResource: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.authentication.ProviderManager: void setAuthenticationEventPublisher(org.springframework.security.authentication.AuthenticationEventPublisher)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: void setInt(java.lang.Object,int)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtTokenStore: void removeRefreshToken(org.springframework.security.oauth2.common.OAuth2RefreshToken)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String getValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERPrintableString: java.lang.String toString()>
<org.apache.catalina.connector.Response: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.aspectj.bridge.IMessage$Kind: int compareTo(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.web.servlet.FrameworkServlet: void <init>(org.springframework.web.context.WebApplicationContext)>-><java.lang.Object: void <init>()>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<java.io.ObjectStreamClass: long computeDefaultSUID(java.lang.Class)>-><java.lang.reflect.Field: int getModifiers()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Calendar: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><cn.hutool.core.date.format.FastDatePrinter$TimeZoneDisplayKey: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeStaticLongFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.misc.Unsafe: void putLong(java.lang.Object,long,long)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration$SessionCleanupConfiguration: void <init>(org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration,org.springframework.session.data.redis.RedisIndexedSessionRepository)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.AbstractByteBufAllocator: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.SimpleType: java.lang.String toString()>
<java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<register-finalize <com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<javax.print.MimeType: void parse(java.lang.String)>-><java.lang.NullPointerException: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.springframework.data.redis.cache.CacheKeyPrefix: java.lang.String lambda$simple$0(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.aop.TruePointcut: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.google.common.cache.CacheBuilder: void <clinit>()>-><com.google.common.cache.CacheBuilder$3: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Hashtable: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.util.concurrent.SpscArrayQueue: java.lang.Object[] toArray(java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.Provider$Service: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyLeakTask: void run()>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Object[])>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceSubscription initSubscription(org.springframework.data.redis.connection.MessageListener)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.zone.ZoneOffsetTransitionRule: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.HashMap$Values: int size()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>-><springfox.documentation.spring.web.readers.operation.HandlerMethodResolver: void <init>(com.fasterxml.classmate.TypeResolver)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$SetFromMap: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.OptionalLong: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.ser.BeanSerializer: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.LinkedList$ListItr: boolean hasNext()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><java.util.EnumMap: int size()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getPatterns()>
<org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>-><java.util.concurrent.ForkJoinWorkerThread$InnocuousForkJoinWorkerThread: java.lang.ClassLoader getContextClassLoader()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<register-finalize <org.springframework.web.bind.annotation.RequestMethod: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.util.DerValue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.Scannable$Attr$1: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.parser.ParseContext: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.jar.Attributes: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList: int size()>
<org.springframework.data.redis.core.StringRedisTemplate: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.core.StringRedisTemplate: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.util.LinkedMultiValueMap: boolean isEmpty()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><com.google.common.base.Joiner$3: int size()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.AbstractMap: boolean isEmpty()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNString(int,java.lang.String)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: org.codehaus.jackson.type.JavaType typeFromId(java.lang.String)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,boolean,boolean)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: void initialize()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><java.util.HashMap: void <init>()>
<com.google.common.cache.LocalCache: boolean usesWriteQueue()>-><com.google.common.cache.LocalCache: boolean expiresAfterWrite()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeLongFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.google.common.cache.LocalCache$Strength: void <clinit>()>-><com.google.common.cache.LocalCache$Strength$1: void <init>(java.lang.String,int)>
<com.fasterxml.classmate.util.LRUTypeCache: void <init>(int)>-><com.fasterxml.classmate.util.LRUTypeCache$CacheMap: void <init>(int)>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache$AccessQueue: void <init>()>-><com.google.common.cache.LocalCache$AccessQueue$1: void <init>(com.google.common.cache.LocalCache$AccessQueue)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <init>(java.lang.String[])>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: void forEach(java.util.function.Consumer)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<sun.reflect.UnsafeFloatFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><reactor.util.Loggers$Slf4JLogger: void error(java.lang.String,java.lang.Throwable)>
<springfox.documentation.spring.web.readers.parameter.ParameterTypeReader: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.cache.jcache.JCacheCacheManager: java.util.Collection loadCaches()>-><javax.cache.CacheManager: java.lang.Iterable getCacheNames()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.AbstractSet: int hashCode()>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.client.BaseClientDetails: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.JdkLoggerFactory: void <init>()>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<springfox.documentation.schema.TypeNameExtractor: void <init>(com.fasterxml.classmate.TypeResolver,org.springframework.plugin.core.PluginRegistry,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.FieldInfo: java.lang.Class getDeclaredClass()>-><java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Optional: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.ArrayNode: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.aspectj.util.LangUtil: java.util.List getFirstNumbers(java.lang.String)>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<sun.reflect.UnsafeStaticByteFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeStaticByteFieldAccessorImpl: byte getByte(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <clinit>()>-><java.util.EnumMap: void <init>(java.lang.Class)>
<com.alibaba.fastjson.serializer.JSONSerializer: void writeWithFormat(java.lang.Object,java.lang.String)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: int getMaxIdle()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.CachingOperationReader$1: void <init>(springfox.documentation.spring.web.scanners.CachingOperationReader,springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheLoader: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: void <init>()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1Null: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.nio.charset.Charset: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$Values: java.lang.Object[] toArray()>
<sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.misc.Unsafe: void putDoubleVolatile(java.lang.Object,long,double)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.YearMonth: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.Flux: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.type.CollectionType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.JsonMappingException instantiationException(java.lang.Class,java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$2: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.lang.Object getAttribute(java.lang.String)>-><org.springframework.session.data.redis.RedisIndexedSessionRepository: java.lang.String getSessionAttrNameKey(java.lang.String)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<springfox.documentation.spring.web.readers.parameter.ParameterDefaultReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><springfox.documentation.spring.web.DescriptionResolver: void <init>(org.springframework.core.env.Environment)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeDoubleFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.io.File: java.lang.String toString()>
<com.google.common.cache.LocalCache$LocalLoadingCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: void setInt(java.lang.Object,int)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.Property: java.lang.Class lambda$new$0(org.springframework.data.util.TypeInformation,java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.String getName()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><java.util.Collections$SingletonMap: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERIA5String: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.GmtTimeZone: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeTypedContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.base.Joiner$3: int size()>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.MonthDay: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration: void <init>()>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: void remove()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: void remove()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<springfox.documentation.schema.property.field.FieldProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.util.RawValue: boolean equals(java.lang.Object)>
<org.springframework.web.cors.CorsConfiguration: void addAllowedHeader(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration: void setAllowedHeaders(java.util.List)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFloatFieldAccessorImpl: long getLong(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.SignalType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper$Source whenNonNull(org.springframework.boot.context.properties.PropertyMapper$Source)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source whenNonNull()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.nio.ByteBuffer: int compareTo(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.ObjectNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyResultSet: int getInt(int)>-><com.zaxxer.hikari.pool.ProxyResultSet: java.sql.SQLException checkException(java.sql.SQLException)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: void <init>(org.springframework.http.HttpStatus)>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: void <init>(org.springframework.http.HttpStatus,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERBMPString: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1OctetString: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.ImmutableDescriptor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.serializer.SerialContext: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: void setInt(java.lang.Object,int)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: java.lang.Object removeAt(int)>-><java.util.PriorityQueue: void siftUp(int,java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.WeakHashMap$KeySet: int size()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.alibaba.fastjson.JSONObject: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.approval.Approval: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeUsingCustom(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.p6spy.engine.common.Value: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.Collections$SetFromMap: int size()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.lang.invoke.ProxyClassesDumper: java.lang.invoke.ProxyClassesDumper getInstance(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: java.lang.String getApprovalKey(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(int)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.OptionalDouble: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl createComposingConstraintDescriptor(org.hibernate.validator.internal.metadata.core.ConstraintHelper,java.lang.reflect.Member,java.util.Map,int,java.lang.annotation.Annotation,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ConstraintType)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.awt.Rectangle: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.support.NullBean: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object resolveMultipleBeans(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: void sort(java.util.Comparator)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void ensureObj(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<com.p6spy.engine.spy.option.P6OptionsRepository: java.lang.Object parse(java.lang.Class,java.lang.Object)>-><org.aspectj.bridge.AbortException: void printStackTrace(java.io.PrintStream)>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><java.lang.reflect.Field: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<sun.reflect.UnsafeStaticShortFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<java.util.Objects: int hashCode(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.session.MapSession: void <init>(java.lang.String)>-><java.util.HashMap: void <init>()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doUnsubscribe(boolean,byte[][])>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><java.lang.reflect.AccessibleObject: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>
<org.springframework.aop.framework.ProxyFactoryBean: java.util.List freshAdvisorChain()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<cn.hutool.core.bean.BeanDesc: cn.hutool.core.bean.BeanDesc$PropDesc createProp(java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.String getName()>
<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.AbstractByteBufAllocator: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoCustomConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.oauth2.provider.client.BaseClientDetails: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<sun.reflect.UnsafeStaticFloatFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode: void <clinit>()>-><org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode: void <init>(java.lang.String,int)>
<org.springframework.boot.jta.bitronix.PoolingDataSourceBean: void afterPropertiesSet()>-><bitronix.tm.resource.jdbc.PoolingDataSource: java.lang.String getUniqueName()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNull(int,int,java.lang.String)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.ReactiveHealthEndpointConfiguration: void <init>()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>-><org.slf4j.helpers.NOPLogger: java.lang.String getName()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.PatternParseException$PatternMessage: void <clinit>()>-><org.springframework.web.util.pattern.PatternParseException$PatternMessage: void <init>(java.lang.String,int,java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<sun.text.normalizer.UCharacter: void <clinit>()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.HashMap: java.util.Set entrySet()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpHeaders: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.beans.factory.InjectionPoint: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<com.p6spy.engine.common.P6Util: java.lang.String joinNullSafe(java.util.Collection,java.lang.String)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.Reflection: java.lang.Class getCallerClass()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.config.ConstructorArgumentValues: boolean equals(java.lang.Object)>
<java.util.Vector$Itr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: void initializeAdvisorChain()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeShortFieldAccessorImpl: int getInt(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.data.redis.connection.util.ByteArrayWrapper: boolean equals(java.lang.Object)>
<org.aspectj.bridge.SourceLocation: void <clinit>()>-><org.aspectj.bridge.SourceLocation: void <init>(java.io.File,int,int,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: boolean add(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.csrf.CsrfFilter: void setAccessDeniedHandler(org.springframework.security.web.access.AccessDeniedHandler)>
<org.aspectj.weaver.tools.TraceFactory: boolean getBoolean(java.lang.String,boolean)>-><java.lang.String: java.lang.String valueOf(boolean)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeDoubleFieldAccessorImpl: void setLong(java.lang.Object,long)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.LocalDateTime: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.EnumMap$KeySet: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.springframework.security.config.annotation.AbstractSecurityBuilder: java.lang.Object build()>-><java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>
<sun.awt.DebugSettings: void loadNativeSettings()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.aspectj.weaver.patterns.AnnotationPatternList: void <clinit>()>-><org.aspectj.weaver.patterns.AnnotationPatternList: void <init>(org.aspectj.weaver.patterns.AnnotationTypePattern[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><org.springframework.http.MediaType: double getQualityValue()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><java.lang.Object: java.lang.Class getClass()>
<org.codehaus.jackson.map.introspect.POJOPropertyBuilder: org.codehaus.jackson.map.introspect.AnnotatedField getField()>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><java.util.HashMap: void <init>(int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.util.locale.provider.RuleBasedBreakIterator: boolean equals(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.x509.Extension: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$12: void <init>(java.lang.String,int)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.catalina.security.SecurityUtil: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<sun.reflect.UnsafeObjectFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<org.springframework.security.web.FilterChainProxy$VirtualFilterChain: void <init>(org.springframework.security.web.firewall.FirewalledRequest,javax.servlet.FilterChain,java.util.List)>-><com.google.common.base.Joiner$3: int size()>
<java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.apache.catalina.core.StandardContext: void <init>()>-><org.apache.tomcat.util.compat.JreCompat: boolean isGraalAvailable()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.awt.Color: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration: void <init>()>-><java.lang.Object: void <init>()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.node.POJONode: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.core.SpringVersion: java.lang.String getVersion()>-><java.lang.Package: java.lang.String getImplementationVersion()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.type.SimpleType: java.lang.String toString()>
<org.thymeleaf.util.ClassLoaderUtils: void <clinit>()>-><org.thymeleaf.util.ClassLoaderUtils: java.lang.ClassLoader getSystemClassLoader()>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.security.oauth2.provider.client.BaseClientDetails: boolean equals(java.lang.Object)>
<com.wf.captcha.SpecCaptcha: boolean graphicsImage(char[],java.io.OutputStream)>-><org.apache.catalina.connector.CoyoteOutputStream: void flush()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: long getMaximumWeight()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.LongNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.LinkedList$ListItr: boolean hasNext()>
<com.zaxxer.hikari.pool.HikariProxyStatement: java.sql.SQLWarning getWarnings()>-><com.zaxxer.hikari.pool.HikariProxyStatement: java.sql.SQLWarning getWarnings()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.baomidou.dynamic.datasource.DynamicDataSourceCreator: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.p6spy.engine.spy.P6ModuleManager: void loadDriversExplicitly(com.p6spy.engine.spy.P6SpyLoadableOptions)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void _checkImplicitlyNamedConstructors(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.security.authentication.DisabledException: void <init>(java.lang.String)>-><org.springframework.security.authentication.AccountStatusException: void <init>(java.lang.String)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: void <init>()>
<org.apache.catalina.connector.Response: void <clinit>()>-><java.lang.Boolean: boolean parseBoolean(java.lang.String)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$SingletonSet: int size()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.MBeanNotificationInfo: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.util.List getPrimaryBeanNames(java.lang.String[])>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.node.TextNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: int size()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<com.p6spy.engine.spy.P6ModuleManager: void <init>()>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: int getInt(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void writeByte(int)>-><org.apache.catalina.connector.OutputBuffer: boolean isFull(java.nio.Buffer)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.lettuce.core.RedisURI: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.ser.BeanSerializer: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.util.concurrent.Queues$ZeroQueue: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.IdentityHashMap$Values: int size()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: int size()>
<org.springframework.aop.framework.AdvisedSupport: org.springframework.aop.framework.AdvisedSupport getConfigurationOnlyCopy()>-><org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: boolean isStatic()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><io.lettuce.core.RedisURI: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterRequiredReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.Permission: java.lang.String toString()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder builder()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.Provider$Service: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationTagsReader: void <init>(springfox.documentation.spring.web.readers.operation.DefaultTagsProvider)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.operation.DefaultTagsProvider getDefaultTagsProvider()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.data.util.ParameterizedTypeInformation: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.Permission: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration$ReactiveUserDetailsServiceCondition$ReactiveWebApplicationCondition: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.ManagedBean: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<com.google.common.cache.LocalCache$EntryFactory$4: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$EntrySet: void forEach(java.util.function.Consumer)>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedList: void add(int,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: void add(int,java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean isClientOnly()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases: boolean lambda$getNameForAlias$1(org.springframework.boot.context.properties.source.ConfigurationPropertyName,java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeUsingCustom(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><java.util.ArrayList$Itr: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.type.ArrayType: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setNull(java.sql.PreparedStatement,int,int,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: java.sql.Connection getConnection()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.ZonedDateTime: java.lang.String toString()>
<org.springframework.security.authentication.RememberMeAuthenticationToken: void <init>(java.lang.String,java.lang.Object,java.util.Collection)>-><java.lang.String: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader,boolean)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(org.springframework.security.access.ConfigAttribute)>-><org.springframework.security.web.access.expression.WebExpressionVoter: boolean supports(org.springframework.security.access.ConfigAttribute)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.NullNode: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$SubscriptionPresentCondition: boolean passes()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isSubscribed()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object,java.lang.Throwable)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.scheduling.config.ScheduledTask: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.RedisReactiveSessionConfiguration$SpringBootRedisWebSessionConfiguration: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><javax.management.MBeanRegistrationException: void <init>(java.lang.Exception,java.lang.String)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.JsonMappingException$Reference: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariDataSource: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: void lambda$putAll$1(java.lang.String,java.lang.Object)>-><org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: java.lang.Object put(java.lang.String,java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.catalina.valves.ValveBase: void setContainer(org.apache.catalina.Container)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<com.google.common.cache.CacheBuilder: void checkWeightWithWeigher()>-><com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><net.logstash.logback.encoder.com.lmax.disruptor.Sequence: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<org.aspectj.bridge.ISourceLocation: void <clinit>()>-><org.aspectj.bridge.SourceLocation: void <init>(java.io.File,int,int,int)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.reflect.UnsafeBooleanFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.data.util.ParameterizedTypeInformation: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: byte getByte(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.apache.catalina.core.ContainerBase: java.lang.String getLogName()>-><java.lang.StringBuilder: void <init>()>
<org.apache.catalina.util.LifecycleBase: void init()>-><java.lang.Enum: boolean equals(java.lang.Object)>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore$TokenExpiry: int compareTo(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.ConnectableFluxOnAssembly: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.annotation.TypeMappedAnnotation: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><java.util.TreeMap: int size()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean add(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.IntNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.FieldInfo: void set(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
<org.springframework.core.SerializableTypeWrapper$FieldTypeProvider: void <init>(java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.slf4j.helpers.SubstituteLogger: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.web.servlet.function.RequestPredicates$ContentTypePredicate: boolean lambda$new$1(java.util.Set,org.springframework.web.servlet.function.ServerRequest$Headers)>-><org.springframework.web.servlet.function.RequestPredicates: void access$000(java.lang.String,java.lang.Object,java.lang.Object,boolean)>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<reactor.core.scheduler.SchedulerTask: void setFuture(java.util.concurrent.Future)>-><java.util.concurrent.FutureTask: boolean cancel(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$1: java.lang.String toString()>
<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.web.servlet.function.RequestPredicates$ContentTypePredicate: void <init>(org.springframework.http.MediaType[])>-><org.springframework.web.servlet.function.RequestPredicates$ContentTypePredicate: void <init>(java.util.Set)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.net.www.MimeEntry: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: void <init>()>-><java.util.concurrent.CopyOnWriteArrayList: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.ResponseMessagesReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.TreeMap$EntrySet: int size()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.cglib.core.Signature: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.BeanMetadataAttribute: boolean equals(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.Vector$Itr: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,boolean)>-><com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,boolean,boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.nio.ByteBuffer: java.lang.String toString()>
<sun.reflect.UnsafeStaticShortFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<java.util.AbstractSet: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(org.springframework.security.access.ConfigAttribute)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <init>(java.lang.String,int)>
<org.springframework.jmx.export.MBeanExporter: void <clinit>()>-><org.springframework.core.Constants: void <init>(java.lang.Class)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.codehaus.jackson.map.deser.std.StdValueInstantiator: org.codehaus.jackson.map.JsonMappingException wrapException(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.JSONPObject: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONArray: int size()>
<me.zhyd.oauth.request.AuthDefaultRequest: me.zhyd.oauth.model.AuthResponse responseError(java.lang.Exception)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><java.util.ArrayList: int size()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void forEach(java.util.function.Consumer)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.web.context.request.async.CallableProcessingInterceptor: void <clinit>()>-><java.lang.Object: void <init>()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>
<org.thymeleaf.spring5.util.SpringVersionUtils: void <clinit>()>-><java.lang.String: java.lang.String substring(int,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.type.ClassKey: java.lang.String toString()>
<org.springframework.ui.freemarker.FreeMarkerConfigurationFactory: freemarker.template.Configuration createConfiguration()>-><freemarker.template.Configuration: void setDefaultEncoding(java.lang.String)>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.FieldPosition: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyStatement: int getUpdateCount()>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: int getUpdateCount()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><cn.hutool.core.date.format.FastDateFormat: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.web.method.HandlerMethod$HandlerMethodParameter: void <init>(org.springframework.web.method.HandlerMethod,int)>-><org.springframework.core.annotation.SynthesizingMethodParameter: void <init>(java.lang.reflect.Method,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration: void <init>()>-><io.micrometer.shaded.org.pcollections.ConsPStack: void <init>()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,io.lettuce.core.pubsub.StatefulRedisPubSubConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider)>-><org.springframework.data.redis.connection.lettuce.LettuceMessageListener: void <init>(org.springframework.data.redis.connection.MessageListener)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<org.springframework.util.CollectionUtils: void lambda$unmodifiableMultiValueMap$0(java.util.Map,java.lang.Object,java.util.List)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>-><org.apache.catalina.LifecycleState: java.lang.String getLifecycleEvent()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>-><java.lang.Object: void <init>()>
<cn.hutool.core.map.CustomKeyMap: void putAll(java.util.Map)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.aspectj.weaver.RuntimeVersion: void <clinit>()>-><org.aspectj.weaver.RuntimeVersion: void <init>(java.lang.String,int,java.lang.String[])>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.type.SimpleType: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.factory.support.NullBean: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.AttributeEntry: boolean equals(java.lang.Object)>
<reactor.util.Loggers$ConsoleLogger: void warn(java.lang.String,java.lang.Throwable)>-><org.aspectj.bridge.AbortException: void printStackTrace(java.io.PrintStream)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<javax.print.MimeType: void parse(java.lang.String)>-><javax.print.MimeType: java.lang.String toUnicodeLowerCase(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTime(int,java.sql.Time,java.util.Calendar)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTime(int,java.sql.Time,java.util.Calendar)>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: java.sql.Connection getConnection()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><java.util.ArrayList: java.util.Iterator iterator()>
<javax.management.ObjectName: void <init>(java.lang.String,java.util.Hashtable)>-><javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.aspectj.weaver.patterns.TypePatternList: void <clinit>()>-><org.aspectj.weaver.patterns.TypePatternList: void <init>(org.aspectj.weaver.patterns.TypePattern[])>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeIntegerFieldAccessorImpl: long getLong(java.lang.Object)>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>(org.springframework.core.io.Resource[])>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void <init>()>
<org.springframework.jdbc.datasource.init.ScriptUtils: void executeSqlScript(java.sql.Connection,org.springframework.core.io.support.EncodedResource,boolean,boolean,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.pool.ProxyStatement: void close()>
<org.apache.catalina.core.ApplicationContext: void populateSessionTrackingModes()>-><org.apache.catalina.core.StandardContext: boolean getCookies()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiDescriptionLookup getApiDescriptionLookup()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>(java.lang.String[])>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void <init>()>
<java.util.Objects: int hashCode(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<com.sun.net.httpserver.Headers: java.lang.String getFirst(java.lang.String)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.introspect.AnnotatedParameter: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<org.thymeleaf.spring5.view.reactive.ThymeleafReactiveViewResolver: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<sun.reflect.UnsafeIntegerFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <init>()>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: boolean endsWith(java.lang.String)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(org.springframework.security.access.ConfigAttribute)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer apply(org.springframework.security.config.annotation.SecurityConfigurer)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.LongNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.mapping.model.Property: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.BigIntegerNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.nio.charset.Charset: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.google.common.collect.Maps$Values: boolean remove(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.aspectj.bridge.IMessageHandler: void <clinit>()>-><org.aspectj.bridge.IMessageHandler$1: void <init>()>
<com.fasterxml.classmate.util.LRUTypeCache: void <init>(int)>-><com.fasterxml.classmate.util.ResolvedTypeCache: void <init>()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.StringCharacterIterator: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.lettuce.core.RedisURI: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.OperationPathDecorator: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.thymeleaf.TemplateEngine: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.Float: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type$1: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>-><org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$SetFromMap: int size()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<javax.imageio.stream.MemoryCache: void writeToStream(java.io.OutputStream,long,long)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.x509.Extension: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.MiscCodec: void writeIterator(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.SerializeWriter,java.util.Iterator)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore$TokenExpiry: int compareTo(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Optional: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$SubscriptionPresentCondition eventuallyPerformSubscription()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>
<org.springframework.security.authentication.RememberMeAuthenticationToken: void <init>(java.lang.Integer,java.lang.Object,java.util.Collection)>-><java.lang.Integer: int intValue()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><org.springframework.session.DelegatingIndexResolver: java.util.Map resolveIndexesFor(org.springframework.session.Session)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.Advisor namedBeanToAdvisor(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.io.StringWriter: void <init>()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERPrintableString: java.lang.String toString()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.parser.ParseContext: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<com.google.common.base.Equivalence: void <init>()>-><java.lang.Object: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.ThreadGroup: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><com.zaxxer.hikari.util.PropertyElf: void setTargetFromProperties(java.lang.Object,java.util.Properties)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$2: void <init>(java.lang.String,int,java.lang.String)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String,org.springframework.context.annotation.MBeanExportConfiguration$1)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$6: void <init>(java.lang.String,int)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.Scannable$Attr$2: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: void forEach(java.util.function.Consumer)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<reactor.util.function.Tuple2: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.support.AbstractPointcutAdvisor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool: void fillPool()>-><java.lang.Math: int min(int,int)>
<org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)>-><java.lang.StringBuilder: void <init>()>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeUsingCustom(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.OptionalLong: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.Advisor namedBeanToAdvisor(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: java.lang.String toString()>
<com.google.common.cache.LocalCache$LocalManualCache: void <init>(com.google.common.cache.LocalCache,com.google.common.cache.LocalCache$1)>-><com.google.common.cache.LocalCache$LocalManualCache: void <init>(com.google.common.cache.LocalCache)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.ArrayList$SubList: boolean addAll(java.util.Collection)>
<sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<org.springframework.security.oauth2.provider.token.DefaultTokenServices: int getRefreshTokenValiditySeconds(org.springframework.security.oauth2.provider.OAuth2Request)>-><org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.ApiListingReader: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object,java.lang.Throwable)>
<org.codehaus.jackson.map.introspect.AnnotatedClass: boolean _isIncludableField(java.lang.reflect.Field)>-><java.lang.reflect.Field: int getModifiers()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CompletableFuture: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setInt(java.lang.Object,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.deser.SettableBeanProperty: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.util.ResourceBundle$RBClassLoader: java.net.URL getResource(java.lang.String)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONArray: int size()>
<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed poll()>-><java.util.PriorityQueue: java.lang.Object poll()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.wf.captcha.utils.Encoder: void encode(java.io.OutputStream)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void load(org.springframework.core.io.Resource[])>-><org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.Resource[])>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.ProtectionDomain: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.aop.framework.AdvisedSupport: void copyConfigurationFrom(org.springframework.aop.framework.AdvisedSupport,org.springframework.aop.TargetSource,java.util.List)>-><org.springframework.aop.framework.ProxyCreatorSupport: void adviceChanged()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: long getRefreshNanos()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: int size()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeBooleanFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.util.context.ContextN: java.lang.String toString()>
<org.springframework.web.servlet.function.RequestPredicates: void access$000(java.lang.String,java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.servlet.function.RequestPredicates: void traceMatch(java.lang.String,java.lang.Object,java.lang.Object,boolean)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.introspect.AnnotatedParameter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<org.springframework.security.web.access.expression.WebExpressionConfigAttribute: void <init>(org.springframework.expression.Expression,org.springframework.security.web.access.expression.EvaluationContextPostProcessor)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.serializer.GuavaCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1OctetString: java.lang.String toString()>
<org.apache.catalina.util.LifecycleMBeanBase: java.lang.String getDomain()>-><org.apache.catalina.valves.ValveBase: java.lang.String getDomainInternal()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.LongNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.util.TypeVariableTypeInformation: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type$12: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.DoubleNode: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.Object getLast(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.lettuce.core.internal.AbstractInvocationHandler: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Vector$Itr: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.scheduling.config.Task: java.lang.String toString()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.lang.String getId()>
<org.springframework.data.redis.core.StringRedisTemplate: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.core.RedisTemplate: void afterPropertiesSet()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: void setInt(java.lang.Object,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.concurrent.atomic.AtomicLong: void <init>(long)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.time.LocalDate: int compareTo(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.security.access.SecurityConfig: java.lang.String getAttribute()>
<springfox.documentation.spring.web.paths.PathSanitizer: void <init>()>-><java.lang.Object: void <init>()>
<org.aspectj.util.LangUtil: java.util.List getFirstNumbers(java.lang.String)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SetFromMap: void forEach(java.util.function.Consumer)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$UrlHandlerMappingDescriptionProvider: void <init>(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$UrlHandlerMappingDescriptionProvider: void <init>()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<sun.reflect.UnsafeStaticLongFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.boot.cloud.CloudPlatform: void <clinit>()>-><org.springframework.boot.cloud.CloudPlatform$3: void <init>(java.lang.String,int)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultUserInfoRestTemplateFactory: org.springframework.security.oauth2.client.OAuth2RestTemplate getUserInfoRestTemplate()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.web.firewall.RequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>-><org.springframework.security.web.firewall.RequestWrapper: java.lang.String strip(java.lang.String)>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.util.Set getAttributeNames()>-><org.springframework.session.MapSession: java.util.Set getAttributeNames()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.net.InetAddress: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$3(java.util.Map$Entry)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.springframework.web.filter.ForwardedHeaderFilter: void <clinit>()>-><java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.SocketImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void addListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean add(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: boolean evictsBySize()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.NullNode: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.ClockSource$Factory: com.zaxxer.hikari.util.ClockSource create()>-><java.lang.String: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<javax.print.MimeType: java.lang.String toUnicodeLowerCase(java.lang.String)>-><java.lang.String: char charAt(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: int size()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.LocalDate: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.ObjectNode: boolean equals(java.lang.Object)>
<org.thymeleaf.TemplateEngine: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.calendar.Era: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setString(int,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.node.BinaryNode: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Label: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1ObjectIdentifier: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters: void addClassIfExists(java.util.List,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.data.mapping.model.Property: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><cn.hutool.core.map.MapProxy: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.beans.IndexedPropertyDescriptor: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.web.filter.OncePerRequestFilter: void <init>()>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<org.springframework.aop.target.LazyInitTargetSource: java.lang.Object getTarget()>-><org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.String getTargetBeanName()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.crypto.CryptoPermission: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>
<org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean: void afterPropertiesSet()>-><com.atomikos.jms.AtomikosConnectionFactoryBean: java.lang.String getUniqueResourceName()>
<org.apache.tomcat.util.buf.UEncoder$SafeCharsSet: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.ZoneOffset: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.jsontype.NamedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.URI: java.lang.String toString()>
<org.springframework.security.oauth2.provider.client.JdbcClientDetailsService$ClientDetailsRowMapper: org.springframework.security.oauth2.provider.ClientDetails mapRow(java.sql.ResultSet,int)>-><com.zaxxer.hikari.pool.HikariProxyResultSet: java.lang.Object getObject(int)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.validation.ObjectError: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.util.AbstractList: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.apache.tomcat.util.http.parser.HttpParser: void <clinit>()>-><org.apache.tomcat.util.http.parser.HttpParser: void <init>(java.lang.String,java.lang.String)>
<org.apache.tomcat.util.modeler.FeatureInfo: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.GenericArrayTypeImpl: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: int getInt(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: void <init>()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ProtectedResourceDetailsConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.LocalTime: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><java.lang.StringBuilder: void <init>()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.security.web.firewall.RequestWrapper: java.lang.String strip(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.io.SerializedString: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger wrapLogger(org.slf4j.Logger)>-><io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.zaxxer.hikari.pool.HikariProxyStatement: java.sql.SQLWarning getWarnings()>-><com.p6spy.engine.wrapper.StatementWrapper: java.sql.SQLWarning getWarnings()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.OptionalDouble: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.aop.framework.AdvisedSupport: java.lang.Class getTargetClass()>-><org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class getTargetClass()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StringBuilder: void <init>()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool: void fillPool()>-><com.zaxxer.hikari.pool.HikariPool: int getIdleConnections()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<cn.hutool.http.HttpBase: java.lang.Object header(java.util.Map,boolean)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.boot.ansi.Ansi8BitColor: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.validation.ValidatorAdapter: void afterPropertiesSet()>-><org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: void afterPropertiesSet()>
<sun.reflect.UnsafeBooleanFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<cn.hutool.http.HttpBase: java.lang.Object header(java.util.Map,boolean)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: void <init>(org.springframework.expression.Expression,org.springframework.security.web.access.expression.EvaluationContextPostProcessor)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration$BaseConfiguration: void <init>()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.lang.Object)>
<com.wf.captcha.utils.GifEncoder: void writePalette()>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<com.baomidou.dynamic.datasource.spring.boot.autoconfigure.hikari.HikariCpConfig: void <clinit>()>-><java.util.concurrent.TimeUnit$5: long toMillis(long)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.commons.pool2.BaseObject: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.EnumMap$KeySet: int size()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager createDefaultAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.MBeanInfo: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<org.apache.catalina.connector.CoyoteWriter: void <clinit>()>-><java.lang.String: char[] toCharArray()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.map.jsontype.NamedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object,int)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object,int)>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Boolean: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getTraceParameter(javax.servlet.http.HttpServletRequest)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StackTraceElement: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getDeclaredSerialFields(java.lang.Class)>-><java.io.ObjectStreamField: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<java.util.AbstractSet: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(boolean)>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.lang.Object: java.lang.Object clone()>
<java.util.Currency$1: java.lang.Void run()>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getObject()>-><org.springframework.aop.framework.ProxyFactoryBean: void initializeAdvisorChain()>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><java.lang.Object: void <init>()>
<org.aspectj.weaver.patterns.NamePattern: void <clinit>()>-><org.aspectj.weaver.patterns.NamePattern: void <init>(java.lang.String)>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.aspectj.weaver.JoinPointSignature: int compareTo(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.MutablePropertyValues: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: void <init>(int)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.http.ResponseEntity: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<org.apache.tomcat.util.modeler.AttributeInfo: void <init>()>-><org.apache.tomcat.util.modeler.FeatureInfo: void <init>()>
<com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationInterceptor: void <clinit>()>-><com.baomidou.dynamic.datasource.DynamicDataSourceClassResolver: void <init>()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache: boolean recordsTime()>-><com.google.common.cache.LocalCache: boolean recordsWrite()>
<org.springframework.boot.context.properties.PropertyMapper$Source: boolean lambda$whenHasText$3(java.lang.Object)>-><java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<springfox.documentation.spring.web.plugins.ResolvedMethodParameterEquivalence: void <init>()>-><com.google.common.base.Equivalence: void <init>()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.invoke.MemberName: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<sun.reflect.UnsafeStaticByteFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.nio.ByteBuffer: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<com.zaxxer.hikari.pool.HikariProxyResultSet: boolean next()>-><com.p6spy.engine.wrapper.ResultSetWrapper: boolean next()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><com.zaxxer.hikari.util.ConcurrentBag: java.util.List values(int)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.p6spy.engine.common.Value: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.invoke.LambdaFormEditor$Transform: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object lambda$invokeInitMethods$5(java.lang.Object)>-><org.springframework.web.filter.GenericFilterBean: void afterPropertiesSet()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.sql.Timestamp: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.SimpleTypeHolder: void <init>(java.util.Set,boolean)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERPrintableString: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$SynchronizedMap: java.util.Set entrySet()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.LifecycleException: void <init>()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><javax.print.MimeType$ParameterMapEntry: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><reactor.core.Fuseable$QueueSubscription: boolean remove(java.lang.Object)>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object set(int,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNClob(int,java.io.Reader,long)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: void addNode(java.lang.String,int)>-><org.springframework.data.redis.connection.RedisStandaloneConfiguration: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: java.lang.Object getAttribute(java.lang.String)>-><javax.management.MBeanServerDelegate: java.lang.String getMBeanServerId()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.aspectj.weaver.patterns.ThisOrTargetPointcut: void <clinit>()>-><org.aspectj.weaver.Shadow$Kind: boolean neverHasThis()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.springframework.beans.factory.config.DependencyDescriptor: void <init>(java.lang.reflect.Field,boolean,boolean)>-><java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<org.springframework.session.data.redis.config.ConfigureNotifyKeyspaceEventsAction: java.lang.String getNotifyOptions(org.springframework.data.redis.connection.RedisConnection)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.io.PrintWriter: void println(java.lang.String)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<org.springframework.beans.factory.InjectionPoint: void <init>(java.lang.reflect.Field)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.nio.charset.Charset: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.Collections$1: boolean hasNext()>
<com.zaxxer.hikari.util.ClockSource$MillisecondClockSource: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.scheduling.config.Task: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.net.www.MimeEntry: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setObject(int,java.lang.Object)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setObject(int,java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.openmbean.CompositeType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String[] getBeanNamesForType(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.node.ObjectNode: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setTime(int,java.sql.Time,java.util.Calendar)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanSupport: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>-><org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.modules.ModelerSource getModelerSource(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<javax.print.MimeType$LexicalAnalyzer: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.Class: int getModifiers()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Vector$Itr: boolean hasNext()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.web.bind.annotation.RequestMethod: org.springframework.web.bind.annotation.RequestMethod[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.reflect.Type getGenericType()>-><java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setClob(int,java.io.Reader,long)>-><com.p6spy.engine.wrapper.PreparedStatementWrapper: void setClob(int,java.io.Reader,long)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.jersey.JerseyManagementContextConfiguration: void <init>()>
<com.zaxxer.hikari.util.SuspendResumeLock: void <clinit>()>-><com.zaxxer.hikari.util.SuspendResumeLock$1: void <init>(boolean)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.util.MimeType: boolean equals(java.lang.Object)>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><org.springframework.session.MapSession: java.time.Instant getCreationTime()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: int size()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration: void <init>()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><com.google.common.base.Joiner$3: int size()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: org.springframework.security.oauth2.common.OAuth2AccessToken getAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: org.springframework.security.oauth2.provider.OAuth2Authentication readAuthentication(java.lang.String)>
<java.util.AbstractList: int hashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$EmptyList: int size()>
<sun.reflect.UnsafeCharacterFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeCharacterFieldAccessorImpl: char getChar(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.valves.ValveBase: void stopInternal()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyConnection: void <clinit>()>-><java.util.HashSet: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Short: java.lang.String toString()>
<springfox.documentation.schema.property.field.FieldProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils$MultiValueMapAdapter: java.util.List lambda$add$0(java.lang.Object)>-><java.util.LinkedList: void <init>()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: java.lang.String getApprovalKey(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<org.springframework.jdbc.datasource.init.ScriptUtils: void executeSqlScript(java.sql.Connection,org.springframework.core.io.support.EncodedResource,boolean,boolean,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyConnection: java.sql.Statement createStatement()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.calendar.Era: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.LatencyUtils.TimeCappedMovingAverageIntervalEstimator: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanSupport: void preDeregister()>-><org.apache.catalina.util.LifecycleMBeanBase: void preDeregister()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.juli.logging.DirectJDKLog: boolean isInfoEnabled()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.font.AttributeValues: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.web.method.ControllerAdviceBean: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.EnumMap: boolean equals(java.lang.Object)>
<java.net.InMemoryCookieStore: void getInternal2(java.util.List,java.util.Map,java.lang.Comparable,boolean)>-><javax.print.MimeType$ParameterMapEntrySetIterator: void remove()>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.TreeSet: boolean add(java.lang.Object)>
<org.apache.catalina.core.StandardContext$ContextFilterMaps: void <init>(org.apache.catalina.core.StandardContext$1)>-><org.apache.catalina.core.StandardContext$ContextFilterMaps: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Vector: java.lang.String toString()>
<java.net.InMemoryCookieStore: void getInternal1(java.util.List,java.util.Map,java.lang.String,boolean)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean remove(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.FluxCreate$ErrorAsyncSink: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.format.DecimalStyle: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientName()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.base.Supplier getStatsCounterSupplier()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.aspectj.weaver.patterns.ModifiersPattern: void <clinit>()>-><java.lang.reflect.Modifier: java.lang.String toString(int)>
<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>-><org.springframework.web.servlet.ModelAndView: org.springframework.ui.ModelMap getModelMap()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$KeySet: void forEach(java.util.function.Consumer)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.Comparator: int lambda$comparingInt$7b0bb60$1(java.util.function.ToIntFunction,java.lang.Object,java.lang.Object)>-><java.lang.Integer: int compare(int,int)>
<sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: int size()>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.StringBuffer: void <init>(int)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Float: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.JavaBeanInfo: com.alibaba.fastjson.util.FieldInfo getField(java.util.List,java.lang.String)>-><java.lang.reflect.Field: java.lang.String getName()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.misc.Signal: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.web.servlet.MultipartProperties)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<org.springframework.boot.security.servlet.ApplicationContextRequestMatcher: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><java.io.PrintStream: void <init>(java.io.OutputStream)>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void lambda$new$0(org.springframework.session.MapSession,java.lang.String)>-><org.springframework.session.data.redis.RedisIndexedSessionRepository: java.lang.String getSessionAttrNameKey(java.lang.String)>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.ArrayList$SubList: int size()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.google.common.base.Joiner$3: void <init>(java.lang.Object[],java.lang.Object,java.lang.Object)>-><java.util.AbstractList: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Collections$SingletonMap: java.util.Set entrySet()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <clinit>()>-><org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <init>(java.lang.String[])>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.beans.IndexedPropertyDescriptor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><java.io.FileOutputStream: void <init>(java.io.File)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.Weigher getWeigher()>-><com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void add(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class getTargetClass()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.FluxCreate$BufferAsyncSink: java.lang.String toString()>
<org.springframework.boot.actuate.trace.http.HttpExchangeTracer: java.lang.Long lambda$sendingResponse$0(org.springframework.boot.actuate.trace.http.HttpTrace)>-><java.lang.System: long currentTimeMillis()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.time.chrono.AbstractChronology: int compareTo(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.client.HttpClientMetricsAutoConfiguration: void <init>()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<org.thymeleaf.util.ClassLoaderUtils: java.lang.ClassLoader getThreadContextClassLoader()>-><java.lang.Thread: java.lang.Thread currentThread()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERNumericString: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<org.springframework.util.Assert: void noNullElements(java.util.Collection,java.lang.String)>-><java.util.AbstractList: java.util.Iterator iterator()>
<io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess: void <clinit>()>-><sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.Vector: boolean addAll(java.util.Collection)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>-><org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.awt.Font: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.AbstractConstant: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map retrieveMetrics()>-><java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<reactor.util.function.Tuple2: int hashCode()>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: boolean equals(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: void setLong(java.lang.Object,long)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.LinkedHashMap$LinkedKeySet: boolean remove(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.firewall.RequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getServletPath()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Enum: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration: void <init>()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object postProcess(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.OAuth2Authentication: boolean equals(java.lang.Object)>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.LocalDateTime: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.util.context.ContextN: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><org.springframework.web.context.support.StandardServletEnvironment: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.AttributeAccessorSupport: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<cn.hutool.http.HttpBase: java.lang.String header(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isPipelined()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.asm.Label: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.MBeanOperationInfo: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.misc.Signal: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<javax.management.StandardMBean: void postDeregister()>-><com.sun.jmx.mbeanserver.MXBeanSupport: void unregister()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.util.concurrent.ThreadPoolExecutor: boolean isTerminated()>-><java.util.concurrent.atomic.AtomicInteger: int get()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.net.HttpCookie: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(boolean)>
<org.apache.catalina.connector.Response: void <init>(int)>-><org.apache.catalina.connector.OutputBuffer: void <init>(int)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.validation.FieldError: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><ch.qos.logback.core.subst.Token: boolean equals(java.lang.Object)>
<com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getKeyEquivalence()>-><com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArraySet: java.lang.Object[] toArray()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void initialize()>-><com.sun.jmx.mbeanserver.JmxMBeanServer$3: void <init>(com.sun.jmx.mbeanserver.JmxMBeanServer)>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getSingletonInstance()>-><org.springframework.aop.framework.AdvisedSupport: java.lang.Class[] getProxiedInterfaces()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<org.springframework.aop.framework.ProxyFactoryBean: java.util.List freshAdvisorChain()>-><org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.Advisor namedBeanToAdvisor(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.ResourceBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.EventObject: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.ProtectionDomain: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<cn.hutool.http.HttpBase: java.lang.Object header(java.util.Map,boolean)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.data.redis.cache.CacheKeyPrefix: java.lang.String lambda$simple$0(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedList: int size()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Collections$SetFromMap: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type$11: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.Resource[])>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMultimap: boolean putAll(java.lang.Object,java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer removeConfigurer(java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.aop.framework.ProxyFactoryBean: void initializeAdvisorChain()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: void setInt(java.lang.Object,int)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.MBeanParameterInfo: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.beans.PropertyValue: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeIntegerFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeIntegerFieldAccessorImpl: int getInt(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.LocalDateTime: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.codehaus.jackson.io.SerializedString: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.apache.commons.pool2.impl.DefaultPooledObject: int compareTo(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<io.micrometer.prometheus.PrometheusMeterRegistry: void onMeterRemoved(io.micrometer.core.instrument.Meter)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.net.URL: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: void terminateAPR()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: void <clinit>()>-><java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.catalina.core.StandardContextValve: void <init>()>-><org.apache.catalina.valves.ValveBase: void <init>(boolean)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1Sequence: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<reactor.core.publisher.FluxIterable: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.EnumMap$EntrySet: boolean remove(java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<java.util.Collections$SynchronizedCollection: java.util.Spliterator spliterator()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Spliterator spliterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.lettuce.core.protocol.CommandArgs$CharArrayArgument: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Locale: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.util.AbstractConstant: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.netty.util.concurrent.PromiseTask: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: java.lang.String toString()>
<sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(double)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.jar.Manifest: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.support.RootBeanDefinition: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.UUID: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.aop.target.LazyInitTargetSource: java.lang.Object getTarget()>-><org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: org.springframework.beans.factory.BeanFactory getBeanFactory()>
<java.util.PriorityQueue: boolean remove(java.lang.Object)>-><java.util.PriorityQueue: java.lang.Object removeAt(int)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.YearMonth: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<org.springframework.session.PrincipalNameIndexResolver: java.lang.String resolveIndexValueFor(org.springframework.session.Session)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.LocalDateTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void <init>(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,boolean,boolean)>-><com.sun.jmx.mbeanserver.SecureClassLoaderRepository: void <init>(javax.management.loading.ClassLoaderRepository)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><java.lang.reflect.Field: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxOnAssembly: java.lang.String toString()>
<sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: int getInt(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<com.sun.jmx.mbeanserver.MBeanSupport: void postDeregister()>-><com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: void postDeregister()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(int)>-><java.lang.Integer: java.lang.String toString(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.String toString()>
<com.fasterxml.jackson.databind.DeserializationContext: java.text.DateFormat getDateFormat()>-><org.codehaus.jackson.map.util.StdDateFormat: java.lang.Object clone()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object attemptToConvertStringToEnum(java.lang.Class,java.lang.String,java.lang.Object)>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.reflect.Field: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><com.google.common.base.Joiner$3: java.lang.Object get(int)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaultEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$RequestMappingInfoHandlerMappingDescriptionProvider: void <init>(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$RequestMappingInfoHandlerMappingDescriptionProvider: void <init>()>
<com.baomidou.dynamic.datasource.spring.boot.autoconfigure.druid.DruidConfig: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanSupport: void preDeregister()>-><javax.management.StandardMBean: void preDeregister()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void setInt(java.lang.Object,int)>
<javax.print.MimeType: java.lang.String toUnicodeLowerCase(java.lang.String)>-><java.lang.String: void <init>(char[])>
<sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.LocalTime: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.aop.support.AbstractPointcutAdvisor: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean equals(java.lang.Object)>
<org.springframework.boot.ResourceBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.Character$Subset: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>
<springfox.documentation.spring.web.scanners.MediaTypeReader: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.thymeleaf.standard.StandardDialect: void <init>(java.lang.String,java.lang.String,int)>-><org.thymeleaf.dialect.AbstractProcessorDialect: void <init>(java.lang.String,java.lang.String,int)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFloatFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><com.sun.jmx.mbeanserver.MBeanSupport: void postDeregister()>
<sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.Instant: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<javax.print.MimeType: java.lang.String removeBackslashes(java.lang.String)>-><java.lang.String: void <init>(char[],int,int)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.TextNode: boolean equals(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.Vector$Itr: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.HashMap$Node: java.lang.String toString()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: int getInt(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.modules.ModelerSource getModelerSource(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.image.ColorModel: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(int)>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.aop.framework.AdvisedSupport: void setInterfaces(java.lang.Class[])>
<com.google.common.cache.LocalCache: void <clinit>()>-><com.google.common.cache.LocalCache$2: void <init>()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.security.web.firewall.RequestWrapper: java.lang.String strip(java.lang.String)>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><reactor.util.concurrent.SpscArrayQueue: boolean remove(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.util.List getPrimaryBeanNames(java.lang.String[])>-><org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isPrimary()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.HashMap$KeySet: int size()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
<org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>-><java.util.HashMap: void <init>(int)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.FieldPosition: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.beans.BeanMetadataAttribute: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings emptyBindings()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.EnumMap: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><com.p6spy.engine.common.CustomHashedHashSet: boolean remove(java.lang.Object)>
<org.apache.tomcat.util.buf.AbstractChunk: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <init>(java.lang.String[])>-><java.util.ArrayList: void <init>()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.common.DefaultOAuth2AccessToken: java.lang.String getValue()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.aspectj.util.LangUtil$StringChecker: void <init>(java.lang.String[])>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.OffsetDateTime: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$4: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.JsonProcessingException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<sun.reflect.UnsafeStaticShortFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeStaticShortFieldAccessorImpl: short getShort(java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: long getLong(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.jni.SSL: int fipsModeSet(int)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration: void <init>()>
<java.util.Collections$SynchronizedSet: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder bufferLength(java.lang.Integer)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: int hashCode()>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<springfox.documentation.spring.web.plugins.DefaultConfiguration: void <init>(springfox.documentation.spi.service.contexts.Defaults,com.fasterxml.classmate.TypeResolver,javax.servlet.ServletContext)>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.nio.CharBuffer: int length()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.misc.Unsafe: void putBoolean(java.lang.Object,long,boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.Resource[])>-><org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.Resource)>
<com.google.common.collect.AbstractMultimap: boolean putAll(java.lang.Object,java.lang.Iterable)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.thymeleaf.spring5.SpringWebFluxTemplateEngine: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.deser.SettableBeanProperty: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.AbstractRedisClient createClient()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientResources()>
<org.springframework.jdbc.datasource.init.ScriptUtils: void executeSqlScript(java.sql.Connection,org.springframework.core.io.support.EncodedResource,boolean,boolean,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyStatement: java.sql.SQLWarning getWarnings()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.codehaus.jackson.map.introspect.POJOPropertyBuilder: int compareTo(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerJwtConfiguration: void <init>()>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isStartTls()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isStartTls()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.data.util.TypeDiscoverer: org.springframework.data.util.TypeInformation getProperty(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.github.xiaoymin.knife4j.spring.configuration.Knife4jProperties: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)>-><org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager: void checkClientDetails(org.springframework.security.oauth2.provider.OAuth2Authentication)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><cn.hutool.core.date.DateTime: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: int size()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><org.springframework.core.io.support.PropertiesLoaderUtils: java.util.Properties loadProperties(org.springframework.core.io.Resource)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.apache.catalina.connector.OutputBuffer: void writeByte(int)>-><org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.SubList: java.util.Iterator iterator()>
<org.springframework.session.MapSession: void <init>(org.springframework.session.Session)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FormatCache$MultipartKey: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$Strength: void <clinit>()>-><com.google.common.cache.LocalCache$Strength$3: void <init>(java.lang.String,int)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.validation.DataBinder: void <init>(java.lang.Object,java.lang.String)>-><java.lang.Object: void <init>()>
<cn.hutool.core.map.CustomKeyMap: void putAll(java.util.Map)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider doCreateConnectionProvider(io.lettuce.core.AbstractRedisClient,io.lettuce.core.codec.RedisCodec)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.nio.charset.Charset: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: int size()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.ArrayList: int size()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.actuate.autoconfigure.redis.RedisReactiveHealthContributorAutoConfiguration: void <init>(java.util.Map)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.base.Joiner$3: int size()>
<org.apache.catalina.core.ContainerBase: java.lang.String getLogName()>-><org.apache.catalina.core.ContainerBase: org.apache.catalina.Container getParent()>
<sun.reflect.UnsafeStaticLongFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.Predicates$NotPredicate: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.LinkedHashMap$LinkedEntrySet: boolean remove(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: boolean equals(java.lang.Object)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.alibaba.fastjson.parser.ParseContext: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.Map getErrorAttributes(javax.servlet.http.HttpServletRequest,boolean)>-><org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.ZonedDateTime: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.sql.Date: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyResultSet: void close()>-><com.zaxxer.hikari.pool.HikariProxyResultSet: void close()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.listener.PatternTopic: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed poll()>-><java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long getDelay(java.util.concurrent.TimeUnit)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Date: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.JumboEnumSet: int size()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.data.util.ClassTypeInformation: boolean equals(java.lang.Object)>
<io.netty.util.internal.ReflectionUtil: java.lang.RuntimeException handleInaccessibleObjectException(java.lang.RuntimeException)>-><java.lang.Object: java.lang.Class getClass()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.OffsetDateTime: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: long estimateSize()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.MethodParameter: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: void setInt(java.lang.Object,int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getKey()>
<org.aspectj.bridge.context.CompilationAndWeavingContext$DefaultFormatter: void <init>()>-><java.lang.Object: void <init>()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: void <init>(org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: char getChar(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.LinkedList: int size()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNull(int,int)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Handle: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMultimap: boolean putAll(java.lang.Object,java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>-><org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.CodeSigner: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$Segment: void initTable(java.util.concurrent.atomic.AtomicReferenceArray)>-><java.util.concurrent.atomic.AtomicReferenceArray: int length()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>
<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration: void <init>()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: java.lang.String toString()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><java.lang.Long: java.lang.Long valueOf(long)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration: void <init>(org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientProperties)>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Vector: java.lang.Object get(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoDefaultConfiguration: void <init>(org.springframework.context.ApplicationContext)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: org.springframework.security.web.access.expression.AbstractVariableEvaluationContextPostProcessor createPostProcessor(org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource$RequestVariablesExtractorEvaluationContextPostProcessor: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>
<java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<net.logstash.logback.encoder.com.lmax.disruptor.Sequence: void setVolatile(long)>-><sun.misc.Unsafe: void putLongVolatile(java.lang.Object,long,long)>
<java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.NoOpSessionConfiguration: void <init>()>
<java.util.AbstractList: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.config.annotation.configuration.ClientDetailsServiceConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.sql.Time: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>
<java.time.format.DateTimeTextProvider$LocaleStore: java.util.Iterator getTextIterator(java.time.format.TextStyle)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder$BCryptVersion: void <clinit>()>-><org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder$BCryptVersion: void <init>(java.lang.String,int,java.lang.String)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.util.UUID: int compareTo(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.time.LocalDateTime castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore$TokenExpiry: int compareTo(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.nio.ByteBuffer: boolean equals(java.lang.Object)>
<java.util.Currency$1: java.lang.Void run()>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.aop.framework.ProxyConfig: boolean isProxyTargetClass()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.introspect.AnnotatedParameter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.FrameworkServlet: void <init>(org.springframework.web.context.WebApplicationContext)>-><org.springframework.web.servlet.HttpServletBean: void <init>()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.valves.ValveBase: java.lang.String getDomainInternal()>-><org.apache.catalina.util.LifecycleMBeanBase: java.lang.String getDomain()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.springframework.security.web.authentication.www.BasicAuthenticationFilter: void setAuthenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource)>-><org.springframework.security.web.authentication.www.BasicAuthenticationConverter: void setAuthenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource)>
<org.springframework.session.data.redis.RedisIndexedSessionRepository: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.MBeanSupport: void postDeregister()>-><javax.management.StandardMBean: void postDeregister()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><ch.qos.logback.classic.spi.ClassPackagingData: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void setInt(java.lang.Object,int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetLongIllegalArgumentException()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.introspect.AnnotatedConstructor: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.Year: boolean equals(java.lang.Object)>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: int getInt(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.util.Date: int compareTo(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy[] values()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.SubList: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.oauth2.provider.client.BaseClientDetails: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.WebExpressionVoter: void <init>()>
<org.aspectj.util.FuzzyBoolean$MaybeFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>-><org.aspectj.util.FuzzyBoolean$MaybeFuzzyBoolean: void <init>()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.BaseObjectPoolConfig: boolean getTestOnCreate()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.YearMonth: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: java.util.Map decode(java.lang.String)>-><org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$5: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.boot.actuate.health.Health$Builder: void <init>(org.springframework.boot.actuate.health.Status)>-><java.util.LinkedHashMap: void <init>()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder customizers(java.util.Collection)>-><org.springframework.boot.web.client.RestTemplateBuilder: void <init>(org.springframework.boot.web.client.RestTemplateBuilder$RequestFactoryCustomizer,boolean,java.lang.String,java.util.Set,java.util.Set,java.util.function.Supplier,org.springframework.web.util.UriTemplateHandler,org.springframework.web.client.ResponseErrorHandler,org.springframework.boot.web.client.BasicAuthentication,java.util.Map,java.util.Set,java.util.Set)>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void <init>(org.slf4j.spi.LocationAwareLogger)>-><io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1Boolean: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,org.springframework.expression.spel.SpelParserConfiguration)>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class getTargetClass()>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Date: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><org.aspectj.weaver.ResolvedType$MethodGetter: void <init>(org.aspectj.weaver.ResolvedType$1)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.SimpleType: boolean equals(java.lang.Object)>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.alibaba.fastjson.JSONArray: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: void <init>(java.lang.String)>-><org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setNClob(int,java.io.Reader,long)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.util.stream.Stream orderedStream()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.concurrent.LinkedBlockingQueue: int size()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<sun.reflect.UnsafeObjectFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.ObjectNode: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.StringCache: void <clinit>()>-><java.lang.String: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.Hashtable: java.util.Set entrySet()>
<reactor.util.function.Tuple3: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.util.Assert: void noNullElements(java.util.Collection,java.lang.String)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.aspectj.weaver.patterns.NoTypePattern: void <init>()>-><org.aspectj.weaver.patterns.TypePattern: void <init>(boolean,boolean,org.aspectj.weaver.patterns.TypePatternList)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.NoDescriptorRegistry$NoJmxMBeanServer: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<sun.reflect.UnsafeStaticObjectFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<org.codehaus.jackson.map.deser.SettableBeanProperty: void _throwAsIOE(java.lang.Exception,java.lang.Object)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><springfox.documentation.spring.web.scanners.CachingOperationReader$1: void <init>(springfox.documentation.spring.web.scanners.CachingOperationReader,springfox.documentation.spring.web.readers.operation.OperationReader)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyFilter: boolean matches(java.lang.reflect.Field)>-><java.lang.reflect.Field: int getModifiers()>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.DefaultTagsProvider: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeStaticShortFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean remove(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.env.PropertySource: boolean equals(java.lang.Object)>
<org.springframework.jdbc.datasource.init.ScriptUtils: void executeSqlScript(java.sql.Connection,org.springframework.core.io.support.EncodedResource,boolean,boolean,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyStatement: int getUpdateCount()>
<org.thymeleaf.templatemode.TemplateMode: void <clinit>()>-><org.thymeleaf.templatemode.TemplateMode: void <init>(java.lang.String,int,boolean,boolean,boolean)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.net.URL: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>
<com.wf.captcha.GifCaptcha: boolean out(java.io.OutputStream)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.AbstractMap: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void addToCollection(java.util.concurrent.ConcurrentHashMap,java.lang.String,org.springframework.security.oauth2.common.OAuth2AccessToken)>-><java.util.AbstractCollection: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore$TokenExpiry: int compareTo(java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: long getLong(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.AbstractRedisClient createClient()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientOptions()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><java.util.ArrayList: boolean isEmpty()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.google.common.cache.LocalCache$EntryFactory$1: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache: boolean usesValueReferences()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><java.lang.Character: java.lang.Character valueOf(char)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void serializeUsingCustom(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.aspectj.weaver.AjcMemberMaker: void <clinit>()>-><org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forName(java.lang.String)>
<org.springframework.web.context.request.async.TimeoutDeferredResultProcessingInterceptor: void <init>()>-><java.lang.Object: void <init>()>
<reactor.util.function.Tuple4: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.apache.tomcat.util.modeler.NoDescriptorRegistry$PassthroughMBean: void <init>()>-><org.apache.tomcat.util.modeler.ManagedBean: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.HashMap$Node: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientResources()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientResources()>
<springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <init>()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.TreeMap$KeySet: int size()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><java.util.HashMap: void <init>()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.aop.framework.ProxyCreatorSupport: void <init>(org.springframework.aop.framework.AopProxyFactory)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: java.lang.String toString()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.SubList: boolean addAll(java.util.Collection)>
<net.logstash.logback.appender.AbstractLogstashTcpSocketAppender$TcpSendingEventHandler: void onEvent(net.logstash.logback.appender.AsyncDisruptorAppender$LogEvent,long,boolean)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.TypedValue: void <init>(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Byte: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder header(java.lang.String,java.lang.String[])>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>
<org.springframework.boot.ImageBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.ser.std.JsonValueSerializer: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap)>-><org.springframework.util.CollectionUtils: org.springframework.util.MultiValueMap unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.String: java.lang.String substring(int)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.p6spy.engine.common.P6Util: java.util.Map getPropertiesMap(java.util.Properties)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.type.CollectionLikeType: void <init>(com.fasterxml.jackson.databind.type.TypeBase,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.TypeBase: void <init>(com.fasterxml.jackson.databind.type.TypeBase)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundryActuatorAutoConfiguration$IgnoredPathsWebSecurityConfigurer: void <init>()>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: java.lang.String toString()>
<org.springframework.aop.framework.AdvisedSupport: void copyConfigurationFrom(org.springframework.aop.framework.AdvisedSupport,org.springframework.aop.TargetSource,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isQueueing()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.util.Calendar: int compareTo(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.MonoCallableOnAssembly: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Package: java.lang.String toString()>
<net.logstash.logback.encoder.com.lmax.disruptor.MultiProducerSequencer: void <clinit>()>-><sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>
<sun.awt.DebugSettings: java.lang.String toString()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.aop.framework.ProxyCreatorSupport: void activate()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeIntegerFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$6: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList: int size()>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><org.apache.catalina.core.ContainerBase: java.lang.String getName()>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.apache.tomcat.util.modeler.Registry: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><java.lang.String: java.lang.String substring(int)>
<com.google.common.cache.LocalCache: void <clinit>()>-><com.google.common.cache.LocalCache$1: void <init>()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.HashMap: void <init>(int)>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl createComposingConstraintDescriptor(org.hibernate.validator.internal.metadata.core.ConstraintHelper,java.lang.reflect.Member,java.util.Map,int,java.lang.annotation.Annotation,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ConstraintType)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.DefaultTokenServices: org.springframework.security.oauth2.common.OAuth2AccessToken createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.common.DefaultExpiringOAuth2RefreshToken: java.util.Date getExpiration()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.google.common.cache.LocalCache$Strength: void <clinit>()>-><com.google.common.cache.LocalCache$Strength$2: void <init>(java.lang.String,int)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$DelegatingHandlerMappingDescriptionProvider: void <init>(java.util.List,org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: int getInt(java.lang.Object)>
<org.springframework.validation.DefaultBindingErrorProcessor: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.catalina.connector.Response: void <clinit>()>-><org.apache.tomcat.util.http.parser.MediaTypeCache: void <init>(int)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection _deserializeWithObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<com.alibaba.fastjson.JSONArray: com.alibaba.fastjson.JSONObject getJSONObject(int)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.GmtTimeZone: java.lang.String toString()>
<sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.OptionalDouble: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<register-finalize <org.springframework.web.util.pattern.PatternParseException$PatternMessage: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: void setDouble(java.lang.Object,double)>
<org.springframework.security.config.annotation.AlreadyBuiltException: void <init>(java.lang.String)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundrySecurityInterceptor: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.endpoint.EndpointIdTimeToLivePropertyFunction: void <clinit>()>-><org.springframework.boot.context.properties.bind.Bindable: org.springframework.boot.context.properties.bind.Bindable of(java.lang.Class)>
<org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)>-><org.springframework.security.oauth2.common.exceptions.InvalidTokenException: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>
<java.util.Objects: int hashCode(java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.StringBuilder: void <init>()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<com.zaxxer.hikari.util.ConcurrentBag: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.nio.CharBuffer: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxCallableOnAssembly: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><java.util.HashMap$KeySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.time.Duration getCommandTimeout()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean remove(java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeStaticLongFieldAccessorImpl: long getLong(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: java.sql.Connection getConnection()>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.Connection getConnection()>
<org.springframework.security.web.server.csrf.WebSessionServerCsrfTokenRepository: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.apache.catalina.connector.Response: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<org.springframework.util.Assert: void noNullElements(java.util.Collection,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxOnAssembly: java.lang.String toString()>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: void setFloat(java.lang.Object,float)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.ArrayList: void <init>()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getProxy(org.springframework.aop.framework.AopProxy)>-><org.springframework.aop.framework.JdkDynamicAopProxy: java.lang.Object getProxy(java.lang.ClassLoader)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.buffer.AbstractByteBufAllocator: java.lang.String toString()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><java.util.ArrayList: void <init>(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void preDeregisterInvoke(javax.management.MBeanRegistration)>-><com.sun.jmx.mbeanserver.MBeanSupport: void preDeregister()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.awt.image.ColorModel: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.Class: java.lang.String getName()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.security.CodeSource: boolean equals(java.lang.Object)>
<org.thymeleaf.spring5.dialect.SpringStandardDialect: void <clinit>()>-><java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>
<org.springframework.data.redis.serializer.RedisSerializerToSerializationPairAdapter: void <clinit>()>-><org.springframework.data.redis.serializer.RedisSerializer: org.springframework.data.redis.serializer.RedisSerializer byteArray()>
<org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.String getValue(java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: long getLong(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Calendar: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><org.springframework.http.server.DefaultPathContainer$DefaultSeparator: java.lang.String encodedSequence()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<org.aspectj.weaver.WildcardedUnresolvedType: void <clinit>()>-><org.aspectj.weaver.WildcardedUnresolvedType: void <init>(java.lang.String,org.aspectj.weaver.UnresolvedType,org.aspectj.weaver.UnresolvedType)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.MessageDigest: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>-><org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.Resource)>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><org.aspectj.weaver.BCException: void printStackTrace()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.HashMap$Values: int size()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: java.lang.String getLogName()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashSet: boolean isEmpty()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: int compareTo(java.lang.Object)>
<org.aspectj.weaver.patterns.IToken: void <clinit>()>-><org.aspectj.weaver.patterns.BasicToken: org.aspectj.weaver.patterns.BasicToken makeOperator(java.lang.String,int,int)>
<java.text.AttributeEntry: int hashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.apache.tomcat.util.http.parser.MediaTypeCache: void <init>(int)>-><org.apache.tomcat.util.collections.ConcurrentCache: void <init>(int)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource freshTargetSource()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.util.RawValue: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.commons.pool2.impl.DefaultPooledObject: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.SubList$1: java.lang.Object next()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.pool.HikariProxyResultSet: java.lang.Object getObject(int)>-><com.p6spy.engine.wrapper.ResultSetWrapper: java.lang.Object getObject(int)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Collections$SingletonList: int size()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><cn.hutool.core.date.format.FastDatePrinter$TimeZoneDisplayKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void cancel()>-><org.springframework.data.redis.connection.util.AbstractSubscription: void close()>
<sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(long)>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: java.lang.Object[] toArray()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashSet: int size()>
<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>-><org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getProxy(org.springframework.aop.framework.AopProxy)>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.lang.String: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1Sequence: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<register-finalize <reactor.core.scheduler.ParallelScheduler: java.util.concurrent.ScheduledExecutorService get()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] toArray()>
<com.google.common.collect.Maps$Values: boolean remove(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><net.logstash.logback.encoder.com.lmax.disruptor.Sequence: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><java.lang.reflect.AccessibleObject: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>
<sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: long getLong(java.lang.Object)>-><sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: byte getByte(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.github.xiaoymin.knife4j.spring.configuration.Knife4jAutoConfiguration: void <init>()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.lang.Throwable: void printStackTrace(java.io.PrintStream)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.Rectangle: java.lang.String toString()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<java.net.InMemoryCookieStore: void getInternal2(java.util.List,java.util.Map,java.lang.Comparable,boolean)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration: javax.servlet.DispatcherType lambda$getDispatcherTypes$0(org.springframework.boot.web.servlet.DispatcherType)>-><javax.servlet.DispatcherType: javax.servlet.DispatcherType valueOf(java.lang.String)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.DefaultTokenServices: org.springframework.security.oauth2.common.OAuth2AccessToken createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType create(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>
<org.springframework.boot.cloud.CloudPlatform: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Hashtable$EntrySet: boolean add(java.lang.Object)>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.Vector: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(long)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: void setFloat(java.lang.Object,float)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(float)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<sun.reflect.UnsafeStaticObjectFieldAccessorImpl: void setDouble(java.lang.Object,double)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(double)>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.authentication.ProviderManager: void setEraseCredentialsAfterAuthentication(boolean)>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><reactor.core.publisher.FluxIterable$IterableSubscription: int size()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.util.concurrent.Queues$ZeroQueue: int size()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void removeAccessToken(java.lang.String)>-><java.util.HashSet: boolean remove(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.http.HttpProperties)>
<com.alibaba.fastjson.serializer.MiscCodec: void writeIterator(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.SerializeWriter,java.util.Iterator)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.ser.std.JsonValueSerializer: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <clinit>()>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$1: void <init>(java.lang.String,int,java.lang.String)>
<org.codehaus.jackson.map.ser.std.IndexedStringListSerializer: void serializeContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration: void <init>(java.util.Map,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.util.stream.Stream orderedStream()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple4: int hashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.SubList$1: boolean hasNext()>
<org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.node.ValueNode: java.lang.String toString()>
<java.lang.reflect.Field: int getInt(java.lang.Object)>-><sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: int getInt(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><cn.hutool.core.date.format.FastDateFormat: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.Clock$SystemClock: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.xml.bind.JAXBException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.GuavaCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.listener.PatternTopic: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.apache.catalina.connector.CoyoteOutputStream: void write(int)>-><org.apache.catalina.connector.CoyoteOutputStream: boolean checkNonBlockingWrite()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.codehaus.jackson.map.deser.std.StdKeyDeserializer: java.lang.Object deserializeKey(java.lang.String,org.codehaus.jackson.map.DeserializationContext)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<org.springframework.boot.autoconfigure.data.couchbase.SpringBootCouchbaseDataConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: boolean equals(java.lang.Object)>-><reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber: int size()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.BitSet: java.lang.String toString()>
<com.google.common.cache.LocalCache: boolean usesAccessEntries()>-><com.google.common.cache.LocalCache: boolean usesAccessQueue()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.MBeanOperationInfo: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<com.alibaba.fastjson.JSONArray: com.alibaba.fastjson.JSONObject getJSONObject(int)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<java.util.Collections: void swap(java.util.List,int,int)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedList: java.lang.Object set(int,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.introspect.AnnotatedParameter: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.asm.Type: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.net.URI: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.HashMap$Node: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: void addOverrideAttributes(java.util.Map,java.lang.reflect.Method,javax.validation.OverridesAttribute[])>-><org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.util.calendar.Era: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.GenericTypeResolver: java.lang.Class resolveTypeArgument(java.lang.Class,java.lang.Class)>
<sun.reflect.UnsafeObjectFieldAccessorImpl: int getInt(java.lang.Object)>-><sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIntIllegalArgumentException()>
<java.text.AttributeEntry: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.springframework.web.client.RestTemplate: void <init>(org.springframework.http.client.ClientHttpRequestFactory)>-><org.springframework.web.client.RestTemplate: void <init>()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyPreparedStatement: void setClob(int,java.io.Reader,long)>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isStartTls()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CompletableFuture: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object,java.lang.Object,int,int[])>-><com.google.common.base.Joiner$3: int size()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<me.zhyd.oauth.utils.GlobalAuthUtil: void lambda$parseMapToString$0(java.util.List,boolean,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: void <init>()>-><javax.management.MBeanInfo: void <init>(java.lang.String,java.lang.String,javax.management.MBeanAttributeInfo[],javax.management.MBeanConstructorInfo[],javax.management.MBeanOperationInfo[],javax.management.MBeanNotificationInfo[])>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.io.FileInputStream: void close()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.BinaryNode: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><java.util.ArrayList: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.InetAddress: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.stream.SortedOps$RefSortingSink: void end()>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.security.util.DerValue: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool$HouseKeeper: void run()>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum findEnum(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.DoubleNode: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.WeakHashMap$EntrySet: boolean remove(java.lang.Object)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.lettuce.core.event.metrics.CommandLatencyEvent: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.HashMap: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.scheduling.config.ScheduledTask: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><javax.print.MimeType$ParameterMapEntrySetIterator: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.ToStringSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.boot.context.properties.source.ConfigurationPropertyName$Elements: java.lang.CharSequence get(int)>-><java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>
<com.wf.captcha.utils.Encoder: void flush_char(java.io.OutputStream)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>-><com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>
<java.util.concurrent.DelayQueue: boolean remove(java.lang.Object)>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getDeclaredSerialFields(java.lang.Class)>-><java.lang.reflect.Field: int getModifiers()>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findClass(java.lang.String)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: void <init>(org.springframework.session.data.redis.RedisIndexedSessionRepository,org.springframework.session.MapSession,boolean)>-><java.util.HashMap: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.springframework.core.MethodParameter: boolean equals(java.lang.Object)>
<io.prometheus.client.CollectorRegistry: void unregister(io.prometheus.client.Collector)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: void setBoolean(java.lang.Object,boolean)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(boolean)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.introspect.AnnotatedConstructor: java.lang.String toString()>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getDefaultSerialFields(java.lang.Class)>-><java.lang.reflect.Field: int getModifiers()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.thymeleaf.extras.java8time.dialect.Java8TimeExpressionFactory: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.lang.Iterable,java.lang.CharSequence)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.lang.invoke.MethodType: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.common.OAuth2AccessToken enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCallableOnAssembly: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<org.apache.catalina.util.LifecycleBase: void init()>-><org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.springframework.session.PrincipalNameIndexResolver: java.lang.String resolveIndexValueFor(org.springframework.session.Session)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(java.lang.Object,java.lang.Class)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.cglib.core.MethodInfo: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><javax.print.MimeType$ParameterMapEntry: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeCharacterFieldAccessorImpl: void setInt(java.lang.Object,int)>-><sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(int)>
<com.p6spy.engine.common.P6Util: java.util.Map getPropertiesMap(java.util.Properties)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.NoOpMeterRegistryConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.TypeNameExtractor getTypeNameExtractor()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.firewall.RequestWrapper: java.lang.String strip(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.AbstractNestablePropertyAccessor: void growCollectionIfNecessary(java.util.Collection,int,java.lang.String,org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler,int)>-><java.util.LinkedList: int size()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doSubscribe(byte[][])>
<org.springframework.web.cors.CorsConfiguration: void <clinit>()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.boot.cloud.CloudPlatform: void <clinit>()>-><org.springframework.boot.cloud.CloudPlatform$1: void <init>(java.lang.String,int)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><sun.security.x509.GeneralName: boolean equals(java.lang.Object)>
<org.apache.catalina.LifecycleException: void <init>(java.lang.String,java.lang.Throwable)>-><java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.Long: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.apache.logging.log4j.Level: int compareTo(java.lang.Object)>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.Property: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.String toString()>
<io.lettuce.core.internal.LettuceLists: java.util.List newList(java.util.Iterator)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$2: void unregistered()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.google.common.base.Suppliers: com.google.common.base.Supplier ofInstance(java.lang.Object)>-><com.google.common.base.Suppliers$SupplierOfInstance: void <init>(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><java.time.ZoneOffset: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<reactor.util.function.Tuple3: int hashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration$WebEndpointServletConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><com.fasterxml.jackson.databind.node.LongNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1BitString: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.util.AbstractConstant: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.springframework.security.oauth2.provider.OAuth2Authentication: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>-><org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.AbstractSet: int hashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><org.springframework.util.MimeType: boolean isWildcardType()>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection: void <clinit>()>-><com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection: java.sql.Connection getClosedConnection()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.BinaryNode: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><javax.management.MBeanAttributeInfo: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><cn.hutool.core.io.resource.UrlResource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken: boolean equals(java.lang.Object)>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><javax.print.MimeType$ParameterMapEntrySetIterator: boolean hasNext()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.classmate.util.ResolvedTypeCache: com.fasterxml.classmate.util.ResolvedTypeCache lruCache(int)>-><com.fasterxml.classmate.util.LRUTypeCache: void <init>(int)>
<java.util.EnumMap: int entryHashCode(int)>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.node.ValueNode: java.lang.String toString()>
<org.codehaus.jackson.map.ser.std.StdKeySerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore$TokenExpiry: void <init>(java.lang.String,java.util.Date)>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><java.util.ArrayList: boolean isEmpty()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.codehaus.jackson.node.IntNode: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.FrameworkServlet: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.AbstractSet: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>-><javax.management.ObjectName: java.lang.String getDomain()>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><cn.hutool.core.date.format.FormatCache$MultipartKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.LinkedHashMap: void <init>()>
<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.UnresolvedPermission: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector: boolean _isIncludableField(java.lang.reflect.Field)>-><java.lang.reflect.Field: int getModifiers()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><sun.security.util.DerValue: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <clinit>()>-><java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.util.Vector: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.baomidou.dynamic.datasource.spring.boot.autoconfigure.hikari.HikariCpConfig: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.aspectj.bridge.IMessage: void <clinit>()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><java.sql.Timestamp: int compareTo(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Clock$SystemClock: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<org.springframework.security.oauth2.provider.endpoint.TokenKeyEndpoint: void <init>(org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter)>-><org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: void <init>()>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: void addClassLoader(java.lang.ClassLoader)>-><com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: boolean add(javax.management.ObjectName,java.lang.ClassLoader)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<reactor.util.function.Tuple4: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<reactor.util.function.Tuple4: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><sun.security.x509.X509CRLEntryImpl: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.authentication.RememberMeAuthenticationToken: int hashCode()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<sun.reflect.Reflection: void registerFieldsToFilter(java.lang.Class,java.lang.String[])>-><sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.codehaus.jackson.map.ser.StdSerializerProvider: org.codehaus.jackson.map.JsonSerializer _createAndCacheUntypedSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.session.data.redis.RedisIndexedSessionRepository$RedisSession: java.time.Instant getLastAccessedTime()>-><org.springframework.session.MapSession: java.time.Instant getLastAccessedTime()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><javax.print.MimeType$ParameterMapEntrySet: int size()>
<reactor.util.function.Tuple2: int hashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<org.springframework.jdbc.core.StatementCreatorUtils: void setValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Integer,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: void <init>(java.lang.String,java.util.List)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed poll()>-><io.netty.util.concurrent.ScheduledFutureTask: long getDelay(java.util.concurrent.TimeUnit)>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><java.security.AllPermission: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyResultSet: boolean next()>-><com.zaxxer.hikari.pool.HikariProxyResultSet: boolean next()>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><org.apache.tomcat.util.modeler.FeatureInfo: void setDescription(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.Provider: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$1: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.net.www.MimeEntry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.hazelcast.HazelcastServerConfiguration$HazelcastServerConfigConfiguration: void <init>()>
<javax.print.MimeType: java.lang.String toUnicodeLowerCase(java.lang.String)>-><java.lang.Character: char toLowerCase(char)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.TreeMap$Values: int size()>
<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>-><org.aspectj.bridge.AbortException: void printStackTrace(java.io.PrintStream)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><java.lang.reflect.Field: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings$Mapping: void <init>(java.lang.String,java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>-><io.lettuce.core.masterslave.MasterSlaveConnectionProvider$ConnectionKey: boolean equals(java.lang.Object)>
<com.p6spy.engine.common.P6Util: java.lang.String joinNullSafe(java.util.Collection,java.lang.String)>-><javax.print.MimeType$ParameterMapEntrySet: java.util.Iterator iterator()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><java.time.chrono.AbstractChronology: int compareTo(java.lang.Object)>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.sun.jmx.mbeanserver.JmxMBeanServer: void initialize()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.wf.captcha.utils.GifEncoder: void writeLSD()>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: boolean equals(java.lang.Object)>-><org.springframework.http.HttpHeaders: int size()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<cn.hutool.http.HttpUtil: java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>-><sun.reflect.UnsafeStaticObjectFieldAccessorImpl: void setLong(java.lang.Object,long)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.FluxCreate$LatestAsyncSink: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
