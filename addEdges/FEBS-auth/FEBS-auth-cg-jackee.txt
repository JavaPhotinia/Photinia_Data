<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.ValueOperations opsForValue()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String)>-><org.springframework.web.servlet.FrameworkServlet$1: void setHeader(java.lang.String,java.lang.String)>
<cc.mrbird.febs.common.datasource.starter.configure.FebsDataSourceAutoConfigure: com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor paginationInterceptor()>-><com.baomidou.mybatisplus.extension.handlers.AbstractSqlParserHandler: com.baomidou.mybatisplus.extension.handlers.AbstractSqlParserHandler setSqlParserList(java.util.List)>
<cc.mrbird.febs.auth.manager.UserManager: java.lang.String findUserPermissions(java.lang.String)>-><java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
<cc.mrbird.febs.common.logging.starter.aspect.ControllerLogAspect: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<cc.mrbird.febs.common.redis.service.RedisService: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.Long getDeptId()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties: java.lang.String getBasePackage()>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><ch.qos.logback.classic.Logger: void info(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.UserConnectionServiceImpl: void deleteByCondition(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: boolean remove(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getMobile()>
<cc.mrbird.febs.common.core.utils.FebsUtil: org.springframework.security.oauth2.provider.OAuth2Authentication getOauth2Authentication()>-><org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext getContext()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void updateOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.handler.FebsWebLoginFailureHandler: void onAuthenticationFailure(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Object get(java.lang.String)>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.ValueOperations opsForValue()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveBind(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse data(java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.model.AuthCallback resolveAuthCallback(me.zhyd.oauth.model.AuthCallback)>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.springframework.security.web.FilterChainProxy$VirtualFilterChain: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthToutiaoRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.FebsUserDetailServiceImpl: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)>-><org.springframework.security.core.authority.AuthorityUtils: java.util.List commaSeparatedStringToAuthorityList(java.lang.String)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties: java.lang.String getLicense()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.model.AuthCallback resolveAuthCallback(me.zhyd.oauth.model.AuthCallback)>-><me.zhyd.oauth.model.AuthCallback: void setState(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void check(java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.core.exception.ValidateCodeException: void <init>(java.lang.String)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono swaggerResources()>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.http.HttpStatus)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken signLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><org.springframework.security.crypto.password.Pbkdf2PasswordEncoder: java.lang.String encode(java.lang.CharSequence)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: void <init>()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveBind(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.common.core.exception.FebsException: void <init>(java.lang.String)>
<cc.mrbird.febs.common.core.utils.FebsUtil: void makeResponse(javax.servlet.http.HttpServletResponse,java.lang.String,int,java.lang.Object)>-><javax.servlet.ServletResponseWrapper: void setContentType(java.lang.String)>
<cc.mrbird.febs.common.core.utils.FebsUtil: void makeResponse(javax.servlet.http.HttpServletResponse,java.lang.String,int,java.lang.Object)>-><java.lang.String: byte[] getBytes()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: java.lang.String lambda$tokenStore$0(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.util.UUID: java.lang.String toString()>
<cc.mrbird.febs.common.core.utils.FebsUtil: void makeResponse(javax.servlet.http.HttpServletResponse,java.lang.String,int,java.lang.Object)>-><javax.servlet.ServletResponseWrapper: javax.servlet.ServletOutputStream getOutputStream()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.entity.UserConnection: void setProviderUserName(java.lang.String)>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthStackOverflowRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties: java.lang.String getDescriptionFontSize()>
<cc.mrbird.febs.common.security.starter.handler.FebsAuthExceptionEntryPoint: void commence(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRequestURI()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser registUser(java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.core.entity.system.SystemUser: void setCreateTime(java.util.Date)>
<cc.mrbird.febs.auth.properties.FebsValidateCodeProperties: void <init>()>-><java.lang.Long: java.lang.Long valueOf(long)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void check(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getRoleName()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties: java.lang.String getVersion()>
<cc.mrbird.febs.common.doc.gateway.properties.FebsDocGatewayProperties: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.common.core.entity.constant.SocialConstant: java.lang.String getSocialLoginPassword()>-><java.lang.ThreadLocal: void remove()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getDeptIds()>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails cacheAndGetClient(java.lang.String)>-><org.apache.commons.collections4.CollectionUtils: boolean isNotEmpty(java.util.Collection)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getDescription()>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void lambda$deleteOauthClientDetails$1(java.lang.Object)>-><cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: void removeRedisCache(java.lang.String)>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><net.logstash.logback.appender.AbstractLogstashTcpSocketAppender: void start()>
<cc.mrbird.febs.auth.controller.SecurityController: cc.mrbird.febs.common.core.entity.FebsResponse signout(javax.servlet.http.HttpServletRequest,java.lang.String)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse message(java.lang.String)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties: java.lang.String getName()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<cc.mrbird.febs.auth.controller.SocialLoginController: cc.mrbird.febs.common.core.entity.FebsResponse signLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono securityConfiguration()>-><springfox.documentation.swagger.web.SecurityConfigurationBuilder: springfox.documentation.swagger.web.SecurityConfigurationBuilder builder()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.entity.BindUser: java.lang.String getBindUsername()>
<cc.mrbird.febs.auth.entity.OauthClientDetails: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthWeChatRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono swaggerResources()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser registUser(java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.core.entity.system.SystemUser: void setAvatar(java.lang.String)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getRoleId()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.Long getUserId()>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><cc.mrbird.febs.common.core.utils.FebsUtil: boolean containChinese(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><cc.mrbird.febs.auth.properties.FebsValidateCodeProperties: java.lang.String getType()>
<cc.mrbird.febs.common.security.starter.handler.FebsAccessDeniedHandler: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.access.AccessDeniedException)>-><cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>
<cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse message(java.lang.String)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse put(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><com.fasterxml.jackson.databind.ObjectMapper: void <init>()>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono uiConfiguration()>-><reactor.core.publisher.Mono: reactor.core.publisher.Mono just(java.lang.Object)>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getStatus()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties: java.lang.String getDescription()>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void permitAll(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry authorizeRequests()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.lang.Enum: java.lang.String toString()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken bindLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>
<java.time.format.DateTimeFormatterBuilder$ZoneTextPrinterParser: java.lang.String getDisplayName(java.lang.String,int,java.util.Locale)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono swaggerResources()>-><java.util.ArrayList: void <init>()>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthGoogleRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><java.lang.StringBuilder: void <init>()>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><java.lang.Enum: java.lang.String toString()>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer: org.springframework.security.config.annotation.web.HttpSecurityBuilder disable()>
<cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser registUser(java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.core.entity.system.SystemUser: void setUsername(java.lang.String)>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void <init>(cc.mrbird.febs.common.logging.starter.properties.FebsLogProperties)>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getMobile()>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: cc.mrbird.febs.common.core.entity.FebsResponse oauthCliendetailsList(cc.mrbird.febs.common.core.entity.QueryRequest,cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>
<cc.mrbird.febs.common.core.entity.system.SystemUser: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.TokenStore tokenStore()>-><org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>
<cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayResourceConfigure: void <init>(org.springframework.cloud.gateway.route.RouteLocator,org.springframework.cloud.gateway.config.GatewayProperties)>-><java.lang.Object: void <init>()>
<cn.hutool.core.map.MapProxy: java.lang.Object put(java.lang.Object,java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry: org.springframework.security.config.annotation.web.HttpSecurityBuilder and()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties: java.lang.String getUrl()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void createOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: cc.mrbird.febs.auth.entity.OauthClientDetails findById(java.lang.String)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getRoleId()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties: java.lang.String getTitle()>
<cc.mrbird.febs.auth.service.impl.UserConnectionServiceImpl: java.util.List selectByCondition(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.security.starter.handler.FebsAuthExceptionEntryPoint: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>-><cc.mrbird.febs.common.redis.service.RedisService: java.lang.Object hget(java.lang.String,java.lang.String)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><me.zhyd.oauth.model.AuthUser: java.lang.String getUuid()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><org.springframework.data.redis.core.DefaultHashOperations: void put(java.lang.Object,java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayAutoConfigure: cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler febsDocGatewayHandler(springfox.documentation.swagger.web.SwaggerResourcesProvider)>-><cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: void <init>()>
<cc.mrbird.febs.common.core.utils.FebsUtil: void makeSuccessResponse(javax.servlet.http.HttpServletResponse,java.lang.Object)>-><cc.mrbird.febs.common.core.utils.FebsUtil: void makeResponse(javax.servlet.http.HttpServletResponse,java.lang.String,int,java.lang.Object)>
<cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser registUser(java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.core.entity.system.SystemUser: void <init>()>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.common.redis.service.RedisService: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: void configure(org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer)>-><cc.mrbird.febs.auth.properties.FebsAuthProperties: java.lang.Boolean getEnableJwt()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.Long getDeptId()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.apache.commons.lang3.StringUtils: boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>
<cc.mrbird.febs.auth.service.impl.FebsUserDetailServiceImpl: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getAvatar()>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler: void clearAuthenticationAttributes(javax.servlet.http.HttpServletRequest)>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void <init>()>-><org.springframework.security.web.savedrequest.HttpSessionRequestCache: void <init>()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.lang.Throwable: java.lang.String getMessage()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.builders.ApiInfoBuilder license(java.lang.String)>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveBind(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.springframework.security.oauth2.provider.token.DefaultTokenServices: int getRefreshTokenValiditySeconds(org.springframework.security.oauth2.provider.OAuth2Request)>-><cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse message(java.lang.String)>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse message(java.lang.String)>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.lang.Throwable: java.lang.String getMessage()>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry: java.lang.Object antMatchers(java.lang.String[])>
<cc.mrbird.febs.common.datasource.starter.configure.FebsDataSourceAutoConfigure: com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor paginationInterceptor()>-><com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor: void <init>()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void updateOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.entity.OauthClientDetails: void setClientSecret(java.lang.String)>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><cc.mrbird.febs.common.core.utils.FebsUtil: boolean isAjaxRequest(javax.servlet.http.HttpServletRequest)>
<cc.mrbird.febs.common.security.starter.handler.FebsAccessDeniedHandler: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.access.AccessDeniedException)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse message(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails cacheAndGetClient(java.lang.String)>-><org.springframework.security.oauth2.provider.client.BaseClientDetails: void setAutoApproveScopes(java.util.Collection)>
<cc.mrbird.febs.common.security.starter.properties.FebsCloudSecurityProperties: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.common.security.starter.interceptor.FebsServerProtectInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>
<cc.mrbird.febs.common.security.starter.interceptor.FebsServerProtectInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spi.service.contexts.SecurityContext securityContext()>-><cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: java.util.List defaultAuth()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: void configure(org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer)>-><org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer: org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer userDetailsService(org.springframework.security.core.userdetails.UserDetailsService)>
<cc.mrbird.febs.common.core.validator.MobileValidator: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono swaggerResources()>-><cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayResourceConfigure: java.lang.Object get()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void createOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.entity.OauthClientDetails: java.lang.String getClientId()>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void <init>(org.springframework.security.crypto.password.PasswordEncoder,cc.mrbird.febs.auth.service.impl.RedisClientDetailsService)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: void <init>()>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>-><com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.Class)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>-><org.springframework.security.oauth2.provider.token.AbstractTokenGranter: org.springframework.security.oauth2.common.OAuth2AccessToken grant(java.lang.String,org.springframework.security.oauth2.provider.TokenRequest)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><cc.mrbird.febs.auth.filter.ValidateCodeFilter: void validateCode(javax.servlet.http.HttpServletRequest)>
<cc.mrbird.febs.common.datasource.starter.inteceptor.DataPermissionInterceptor: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono swaggerResources()>-><java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthTencentCloudRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: void configure(org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer)>-><org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer: org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer accessTokenConverter(org.springframework.security.oauth2.provider.token.AccessTokenConverter)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><cc.mrbird.febs.common.security.starter.properties.FebsCloudSecurityProperties: java.lang.String getAuthUri()>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: boolean lambda$swaggerResources$0(springfox.documentation.swagger.web.SwaggerResource,java.lang.String)>-><springfox.documentation.swagger.web.SwaggerResource: java.lang.String getName()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.lang.Long: long longValue()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: java.util.List defaultAuth()>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>
<cc.mrbird.febs.common.security.starter.interceptor.FebsServerProtectInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse message(java.lang.String)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiKey apiKey()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.controller.SecurityController: void <init>(cc.mrbird.febs.auth.service.ValidateCodeService,cc.mrbird.febs.auth.manager.UserManager,org.springframework.security.oauth2.provider.token.ConsumerTokenServices)>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser registUser(java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.core.entity.system.SystemUser: void setPassword(java.lang.String)>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$AuthorizedUrl: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry authenticated()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken bindLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.common.core.exception.FebsException: void <init>(java.lang.String)>
<cc.mrbird.febs.common.core.utils.FebsUtil: boolean match(java.lang.String,java.lang.String)>-><java.util.regex.Matcher: boolean matches()>
<cc.mrbird.febs.common.core.utils.FebsUtil: void makeResponse(javax.servlet.http.HttpServletResponse,java.lang.String,int,java.lang.Object)>-><com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><me.zhyd.oauth.model.AuthUser: java.lang.String getAvatar()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.service.impl.UserConnectionServiceImpl: void createUserConnection(cc.mrbird.febs.auth.entity.UserConnection)>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter jwtAccessTokenConverter()>-><org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: void setSigningKey(java.lang.String)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getDeptName()>
<cc.mrbird.febs.common.logging.starter.aspect.ControllerLogAspect: java.lang.Object around(org.aspectj.lang.ProceedingJoinPoint)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Object[])>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: boolean isCurrentUser(java.lang.String)>-><cc.mrbird.febs.common.core.utils.FebsUtil: java.lang.String getCurrentUsername()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: void configure(org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer)>-><org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer: org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder withClientDetails(org.springframework.security.oauth2.provider.ClientDetailsService)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><me.zhyd.oauth.model.AuthResponse: java.lang.String getMsg()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><springfox.documentation.builders.PathSelectors: com.google.common.base.Predicate any()>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void permitAll(org.springframework.security.config.annotation.web.builders.HttpSecurity)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.service.ApiInfo build()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse put(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><ch.qos.logback.core.UnsynchronizedAppenderBase: void setName(java.lang.String)>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<cc.mrbird.febs.auth.controller.SocialLoginController: void <init>(cc.mrbird.febs.auth.service.SocialLoginService)>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><ch.qos.logback.classic.Logger: void addAppender(ch.qos.logback.core.Appender)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>-><cc.mrbird.febs.common.core.exception.FebsException: void <init>(java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.entity.UserConnection: void setImageUrl(java.lang.String)>
<cc.mrbird.febs.common.core.utils.FebsUtil: boolean isAjaxRequest(javax.servlet.http.HttpServletRequest)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken bindLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><org.springframework.security.crypto.password.Pbkdf2PasswordEncoder: boolean matches(java.lang.CharSequence,java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono swaggerResources()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: com.wf.captcha.base.Captcha createCaptcha(cc.mrbird.febs.auth.properties.FebsValidateCodeProperties)>-><cc.mrbird.febs.auth.properties.FebsValidateCodeProperties: java.lang.Integer getLength()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void check(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.model.AuthCallback resolveAuthCallback(me.zhyd.oauth.model.AuthCallback)>-><me.zhyd.oauth.model.AuthCallback: java.lang.String getState()>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono swaggerResources()>-><java.util.ArrayList$Itr: boolean hasNext()>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<cc.mrbird.febs.common.core.validator.MobileValidator: void initialize(java.lang.annotation.Annotation)>-><cc.mrbird.febs.common.core.validator.MobileValidator: void initialize(cc.mrbird.febs.common.core.annotation.IsMobile)>
<cc.mrbird.febs.auth.service.impl.FebsUserDetailServiceImpl: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)>-><cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser findByName(java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><cc.mrbird.febs.common.core.utils.FebsUtil: void makeFailureResponse(javax.servlet.http.HttpServletResponse,java.lang.Object)>
<cc.mrbird.febs.common.core.validator.MobileValidator: boolean isValid(java.lang.String,javax.validation.ConstraintValidatorContext)>-><cc.mrbird.febs.common.core.utils.FebsUtil: boolean match(java.lang.String,java.lang.String)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spi.service.contexts.SecurityContext securityContext()>-><springfox.documentation.spi.service.contexts.SecurityContextBuilder: springfox.documentation.spi.service.contexts.SecurityContextBuilder forPaths(com.google.common.base.Predicate)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: void <init>()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: com.baomidou.mybatisplus.core.metadata.IPage findOauthClientDetails(cc.mrbird.febs.common.core.entity.QueryRequest,cc.mrbird.febs.auth.entity.OauthClientDetails)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<cc.mrbird.febs.common.core.utils.FebsUtil: void makeJsonResponse(javax.servlet.http.HttpServletResponse,int,java.lang.Object)>-><cc.mrbird.febs.common.core.utils.FebsUtil: void makeResponse(javax.servlet.http.HttpServletResponse,java.lang.String,int,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.common.core.entity.system.SystemUser: java.lang.String getUsername()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String)>-><javax.servlet.ServletResponseWrapper: void setContentType(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><java.lang.Enum: java.lang.String toString()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>-><org.springframework.security.oauth2.provider.client.BaseClientDetails: java.util.Set getAuthorizedGrantTypes()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void createOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: boolean save(java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.service.impl.UserConnectionServiceImpl: cc.mrbird.febs.auth.entity.UserConnection selectByCondition(java.lang.String,java.lang.String)>
<cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayResourceConfigure: java.util.List get()>-><java.util.ArrayList: void <init>()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><java.lang.Enum: java.lang.String toString()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndBind(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><me.zhyd.oauth.model.AuthUser: java.lang.String getUuid()>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[] retrieveDisplayNamesImpl(java.lang.String,java.util.Locale)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiKey apiKey()>-><springfox.documentation.service.ApiKey: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayAutoConfigure: cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayResourceConfigure febsDocGatewayResourceConfigure(org.springframework.cloud.gateway.route.RouteLocator,org.springframework.cloud.gateway.config.GatewayProperties)>-><cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayResourceConfigure: void <init>(org.springframework.cloud.gateway.route.RouteLocator,org.springframework.cloud.gateway.config.GatewayProperties)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><me.zhyd.oauth.model.AuthResponse: java.lang.Object getData()>
<cc.mrbird.febs.common.core.entity.QueryRequest: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.config.AuthSource getAuthSource(java.lang.String)>-><cc.mrbird.febs.common.core.exception.FebsException: void <init>(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void createOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveBind(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.model.AuthCallback resolveAuthCallback(me.zhyd.oauth.model.AuthCallback)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono uiConfiguration()>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<cc.mrbird.febs.common.security.starter.handler.FebsAuthExceptionEntryPoint: void commence(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><cc.mrbird.febs.common.core.utils.FebsUtil: void makeJsonResponse(javax.servlet.http.HttpServletResponse,int,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken bindLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthHuaweiRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken signLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.entity.BindUser: java.lang.String getBindPassword()>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.request.AuthRequest renderAuth(java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>-><cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails cacheAndGetClient(java.lang.String)>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: void configure(org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer)>-><org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer: org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer exceptionTranslator(org.springframework.security.oauth2.provider.error.WebResponseExceptionTranslator)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void check(java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.redis.service.RedisService: java.lang.Object get(java.lang.String)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono securityConfiguration()>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.http.HttpStatus)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><java.lang.StringBuilder: java.lang.String toString()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.Long getUserId()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><java.util.HashMap: void <init>(int)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.common.core.exception.FebsException: void <init>(java.lang.String)>
<cc.mrbird.febs.common.datasource.starter.inteceptor.DataPermissionInterceptor: void <init>()>-><com.baomidou.mybatisplus.extension.handlers.AbstractSqlParserHandler: void <init>()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void createOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.entity.OauthClientDetails: void setOriginSecret(java.lang.String)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono swaggerResources()>-><java.util.ArrayList: java.util.Iterator iterator()>
<cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayResourceConfigure: java.lang.Object get()>-><cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayResourceConfigure: java.util.List get()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getDescription()>
<cc.mrbird.febs.common.core.utils.FebsUtil: void makeResponse(javax.servlet.http.HttpServletResponse,java.lang.String,int,java.lang.Object)>-><javax.servlet.http.HttpServletResponseWrapper: void setStatus(int)>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: void removeRedisCache(java.lang.String)>-><cc.mrbird.febs.common.redis.service.RedisService: void hdel(java.lang.String,java.lang.Object[])>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.FebsUserDetailServiceImpl: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)>-><org.springframework.security.crypto.password.Pbkdf2PasswordEncoder: java.lang.String encode(java.lang.CharSequence)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveBind(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><com.xkcoding.justauth.AuthRequestFactory: me.zhyd.oauth.request.AuthRequest get(me.zhyd.oauth.config.AuthSource)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono securityConfiguration()>-><reactor.core.publisher.Mono: reactor.core.publisher.Mono just(java.lang.Object)>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter resourceOwnerPasswordTokenGranter(org.springframework.security.authentication.AuthenticationManager,org.springframework.security.oauth2.provider.OAuth2RequestFactory)>-><org.springframework.security.oauth2.provider.token.DefaultTokenServices: void setTokenEnhancer(org.springframework.security.oauth2.provider.token.TokenEnhancer)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getRoleId()>
<cc.mrbird.febs.auth.properties.FebsAuthProperties: void <init>()>-><cc.mrbird.febs.auth.properties.FebsValidateCodeProperties: void <init>()>
<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void deleteOauthCliendetails(java.lang.String)>-><cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void deleteOauthClientDetails(java.lang.String)>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: cc.mrbird.febs.common.logging.starter.aspect.ControllerLogAspect controllerLogAspect()>-><cc.mrbird.febs.common.logging.starter.aspect.ControllerLogAspect: void <init>()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties: java.lang.String getLicenseUrl()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><springfox.documentation.spring.web.plugins.ApiSelectorBuilder: springfox.documentation.spring.web.plugins.Docket build()>
<org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: java.util.Map decode(java.lang.String)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayAutoConfigure: cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler febsDocGatewayHandler(springfox.documentation.swagger.web.SwaggerResourcesProvider)>-><cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: void setSwaggerResources(springfox.documentation.swagger.web.SwaggerResourcesProvider)>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthLinkedinRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>-><org.springframework.security.oauth2.provider.TokenRequest: void <init>(java.util.Map,java.lang.String,java.util.Collection,java.lang.String)>
<cc.mrbird.febs.common.core.utils.FebsUtil: java.lang.String getCurrentUsername()>-><cc.mrbird.febs.common.core.utils.FebsUtil: org.springframework.security.oauth2.provider.OAuth2Authentication getOauth2Authentication()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.entity.UserConnection: void setUserName(java.lang.String)>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: cc.mrbird.febs.common.core.entity.FebsResponse oauthCliendetailsList(cc.mrbird.febs.common.core.entity.QueryRequest,cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse data(java.lang.Object)>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><net.logstash.logback.encoder.LogstashEncoder: void setCustomFields(java.lang.String)>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void updateOauthCliendetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: java.util.List defaultAuth()>-><springfox.documentation.service.AuthorizationScope: void <init>(java.lang.String,java.lang.String)>
<cc.mrbird.febs.common.core.utils.FebsUtil: org.springframework.security.oauth2.provider.OAuth2Authentication getOauth2Authentication()>-><org.springframework.security.core.context.SecurityContextImpl: org.springframework.security.core.Authentication getAuthentication()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getDeptIds()>
<cc.mrbird.febs.common.core.exception.FebsException: void <init>(java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void updateOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper: void <init>()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: cc.mrbird.febs.common.core.entity.FebsResponse getOriginClientSecret(java.lang.String)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse data(java.lang.Object)>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void updateOauthCliendetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.common.core.utils.FebsUtil: javax.servlet.http.HttpServletRequest getHttpServletRequest()>-><org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><me.zhyd.oauth.model.AuthResponse: boolean ok()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><me.zhyd.oauth.model.AuthUser: java.lang.String getNickname()>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><net.logstash.logback.encoder.LogstashEncoder: void <init>()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.builders.ApiInfoBuilder description(java.lang.String)>
<cc.mrbird.febs.common.datasource.starter.configure.FebsDataSourceAutoConfigure: com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor paginationInterceptor()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<cc.mrbird.febs.common.logging.starter.aspect.ControllerLogAspect: java.lang.Object around(org.aspectj.lang.ProceedingJoinPoint)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Object[])>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.DefaultTokenServices defaultTokenServices()>-><cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.TokenStore tokenStore()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void check(java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spi.service.contexts.SecurityContext securityContext()>-><springfox.documentation.spi.service.contexts.SecurityContextBuilder: springfox.documentation.spi.service.contexts.SecurityContextBuilder securityReferences(java.util.List)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Object hget(java.lang.String,java.lang.String)>-><org.springframework.data.redis.core.DefaultHashOperations: java.lang.Object get(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.FebsUserDetailServiceImpl: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)>-><cc.mrbird.febs.common.core.entity.constant.SocialConstant: java.lang.String getSocialLoginPassword()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.runner.StartedUpRunner: void <init>(org.springframework.context.ConfigurableApplicationContext,org.springframework.core.env.Environment)>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.common.datasource.starter.configure.FebsDataSourceAutoConfigure: cc.mrbird.febs.common.datasource.starter.inteceptor.DataPermissionInterceptor dataPermissionInterceptor()>-><cc.mrbird.febs.common.datasource.starter.inteceptor.DataPermissionInterceptor: void <init>()>
<cc.mrbird.febs.common.datasource.starter.configure.FebsDataSourceAutoConfigure: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter resourceOwnerPasswordTokenGranter(org.springframework.security.authentication.AuthenticationManager,org.springframework.security.oauth2.provider.OAuth2RequestFactory)>-><org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter: void <init>(org.springframework.security.authentication.AuthenticationManager,org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices,org.springframework.security.oauth2.provider.ClientDetailsService,org.springframework.security.oauth2.provider.OAuth2RequestFactory)>
<cc.mrbird.febs.common.security.starter.handler.FebsAuthExceptionEntryPoint: void commence(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse message(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.entity.UserConnection: void setProviderName(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void updateOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthTaobaoRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: java.util.List defaultAuth()>-><springfox.documentation.service.SecurityReference: void <init>(java.lang.String,springfox.documentation.service.AuthorizationScope[])>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: com.wf.captcha.base.Captcha createCaptcha(cc.mrbird.febs.auth.properties.FebsValidateCodeProperties)>
<cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayAutoConfigure: cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler febsDocGatewayHandler(springfox.documentation.swagger.web.SwaggerResourcesProvider)>-><cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: void setProperties(cc.mrbird.febs.common.doc.gateway.properties.FebsDocGatewayProperties)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: com.wf.captcha.base.Captcha createCaptcha(cc.mrbird.febs.auth.properties.FebsValidateCodeProperties)>-><org.apache.commons.lang3.StringUtils: boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void createOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails cacheAndGetClient(java.lang.String)>-><cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: boolean isCurrentUser(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void updateOauthCliendetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void updateOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>
<cc.mrbird.febs.common.security.starter.handler.FebsAuthExceptionEntryPoint: void commence(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object[])>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><springfox.documentation.spring.web.plugins.Docket: springfox.documentation.spring.web.plugins.ApiSelectorBuilder select()>
<cc.mrbird.febs.common.security.starter.handler.FebsAccessDeniedHandler: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>-><org.springframework.security.oauth2.provider.client.BaseClientDetails: java.lang.String getClientId()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void validateCode(javax.servlet.http.HttpServletRequest)>-><javax.servlet.ServletRequestWrapper: java.lang.String getParameter(java.lang.String)>
<cc.mrbird.febs.auth.properties.FebsValidateCodeProperties: void <init>()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono uiConfiguration()>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayResourceConfigure: java.util.List get()>-><org.springframework.cloud.gateway.route.RouteLocator: reactor.core.publisher.Flux getRoutes()>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthDouyinRequest: java.lang.String authorize(java.lang.String)>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Object hget(java.lang.String,java.lang.String)>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.HashOperations opsForHash()>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void permitAll(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry: java.lang.Object anyRequest()>
<cc.mrbird.febs.common.core.utils.FebsUtil: boolean containChinese(java.lang.String)>-><java.util.regex.Matcher: boolean find()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: com.wf.captcha.base.Captcha createCaptcha(cc.mrbird.febs.auth.properties.FebsValidateCodeProperties)>-><cc.mrbird.febs.auth.properties.FebsValidateCodeProperties: java.lang.Integer getCharType()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.util.Date getLastLoginTime()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.lang.Throwable: java.lang.String getMessage()>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthAlipayRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken signLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.entity.BindUser: java.lang.String getBindUsername()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.Long getDeptId()>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.databind.JsonSerializer findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.core.utils.FebsUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthWeChatEnterpriseRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.auth.controller.SecurityController: cc.mrbird.febs.common.core.entity.FebsResponse signout(javax.servlet.http.HttpServletRequest,java.lang.String)>-><cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthPinterestRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void <clinit>()>-><ch.qos.logback.classic.LoggerContext: ch.qos.logback.classic.Logger getLogger(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser findByName(java.lang.String)>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.TokenStore tokenStore()>-><cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter jwtAccessTokenConverter()>
<cc.mrbird.febs.auth.controller.SocialLoginController: cc.mrbird.febs.common.core.entity.FebsResponse findUserConnections(java.lang.String)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: java.util.List findUserConnections(java.lang.String)>
<cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties: void <init>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><java.lang.StringBuilder: void <init>()>
<cc.mrbird.febs.common.security.starter.interceptor.FebsServerProtectInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.lang.String: void <init>(byte[])>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void addOauthCliendetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void createOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken signLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser registUser(java.lang.String,java.lang.String)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.entity.UserConnection: void setNickName(java.lang.String)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Collection)>-><org.springframework.security.core.userdetails.User: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Collection)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.util.Date getLastLoginTime()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><springfox.documentation.spring.web.plugins.Docket: springfox.documentation.spring.web.plugins.Docket securityContexts(java.util.List)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getStatus()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><javax.servlet.ServletResponseWrapper: javax.servlet.ServletOutputStream getOutputStream()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.config.AuthSource getAuthSource(java.lang.String)>-><cn.hutool.core.util.StrUtil: boolean isNotBlank(java.lang.CharSequence)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void updateOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.entity.OauthClientDetails: java.lang.String getClientId()>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void addOauthCliendetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono swaggerResources()>-><cc.mrbird.febs.common.doc.gateway.properties.FebsDocGatewayProperties: java.lang.String getResources()>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void deleteOauthCliendetails(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void permitAll(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.configurers.CsrfConfigurer csrf()>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><net.logstash.logback.appender.LogstashTcpSocketAppender: void <init>()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.controller.SocialLoginController: cc.mrbird.febs.common.core.entity.FebsResponse findUserConnections(java.lang.String)>-><cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: com.baomidou.mybatisplus.core.metadata.IPage findOauthClientDetails(cc.mrbird.febs.common.core.entity.QueryRequest,cc.mrbird.febs.auth.entity.OauthClientDetails)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getDeptName()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void updateOauthCliendetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.common.core.exception.FebsException: void <init>(java.lang.String)>
<cc.mrbird.febs.common.security.starter.handler.FebsAuthExceptionEntryPoint: void commence(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>
<cc.mrbird.febs.auth.service.impl.RedisAuthenticationCodeService: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.security.oauth2.provider.code.RandomValueAuthorizationCodeServices: void <init>()>
<cc.mrbird.febs.common.core.entity.constant.SocialConstant: java.lang.String setSocialLoginPassword()>-><org.apache.commons.lang3.RandomStringUtils: java.lang.String randomAlphanumeric(int)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><cc.mrbird.febs.common.core.exception.ValidateCodeException: void <init>(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void deleteOauthClientDetails(java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayResourceConfigure: boolean lambda$null$2(org.springframework.cloud.gateway.handler.predicate.PredicateDefinition)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><cc.mrbird.febs.auth.properties.FebsValidateCodeProperties: java.lang.Long getTime()>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void <init>(cc.mrbird.febs.auth.service.OauthClientDetailsService)>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: java.util.List findUserConnections(java.lang.String)>-><cc.mrbird.febs.auth.service.impl.UserConnectionServiceImpl: java.util.List selectByCondition(java.lang.String)>
<cc.mrbird.febs.common.logging.starter.aspect.ControllerLogAspect: java.lang.Object around(org.aspectj.lang.ProceedingJoinPoint)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Object[])>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.entity.UserConnection: void setProviderUserId(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: com.baomidou.mybatisplus.core.metadata.IPage findOauthClientDetails(cc.mrbird.febs.common.core.entity.QueryRequest,cc.mrbird.febs.auth.entity.OauthClientDetails)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: com.baomidou.mybatisplus.core.metadata.IPage page(com.baomidou.mybatisplus.core.metadata.IPage,com.baomidou.mybatisplus.core.conditions.Wrapper)>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean matches(javax.servlet.http.HttpServletRequest)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser registUser(java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.core.entity.system.SystemUser: void setSex(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails cacheAndGetClient(java.lang.String)>-><com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spi.service.contexts.SecurityContext securityContext()>-><springfox.documentation.spi.service.contexts.SecurityContext: springfox.documentation.spi.service.contexts.SecurityContextBuilder builder()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void deleteOauthClientDetails(java.lang.String)>-><java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
<cc.mrbird.febs.common.security.starter.interceptor.FebsServerProtectInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><cc.mrbird.febs.common.core.utils.FebsUtil: void makeJsonResponse(javax.servlet.http.HttpServletResponse,int,java.lang.Object)>
<cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser registUser(java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.core.entity.system.SystemUser: java.lang.Long getUserId()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>
<cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser registUser(java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.core.entity.system.UserRole: void <init>()>
<cc.mrbird.febs.common.core.entity.constant.FebsConstant: void <clinit>()>-><java.lang.Long: java.lang.Long valueOf(long)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getSex()>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.ILoggerFactory getILoggerFactory()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: void configure(org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer)>-><cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.TokenStore tokenStore()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse data(java.lang.Object)>
<cc.mrbird.febs.common.core.utils.FebsUtil: void makeFailureResponse(javax.servlet.http.HttpServletResponse,java.lang.Object)>-><cc.mrbird.febs.common.core.utils.FebsUtil: void makeResponse(javax.servlet.http.HttpServletResponse,java.lang.String,int,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>-><org.springframework.security.oauth2.provider.client.BaseClientDetails: java.util.Set getScope()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void deleteOauthCliendetails(java.lang.String)>-><cc.mrbird.febs.common.core.exception.FebsException: void <init>(java.lang.String)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono uiConfiguration()>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.http.HttpStatus)>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails cacheAndGetClient(java.lang.String)>-><java.util.Collection: java.util.stream.Stream stream()>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void permitAll(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$AuthorizedUrl: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry permitAll()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void createOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><ch.qos.logback.classic.Logger: void info(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthBaiduRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.lang.Throwable: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String)>-><javax.servlet.http.HttpServletResponseWrapper: void setDateHeader(java.lang.String,long)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void deleteOauthClientDetails(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper: void <init>()>
<cc.mrbird.febs.common.core.entity.constant.SocialConstant: java.lang.String getSocialLoginPassword()>-><java.lang.ThreadLocal: java.lang.Object get()>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler: org.springframework.security.web.RedirectStrategy getRedirectStrategy()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><me.zhyd.oauth.request.AuthDefaultRequest: me.zhyd.oauth.model.AuthResponse login(me.zhyd.oauth.model.AuthCallback)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getDeptName()>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthCodingRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getRoleName()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken bindLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser findByName(java.lang.String)>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: void configure(org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer)>-><org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer: org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer authenticationManager(org.springframework.security.authentication.AuthenticationManager)>
<cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse put(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.FebsUserDetailServiceImpl: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)>-><org.springframework.security.core.userdetails.UsernameNotFoundException: void <init>(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void lambda$deleteOauthClientDetails$1(java.lang.Object)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser registUser(java.lang.String,java.lang.String)>-><java.util.Date: void <init>()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void updateOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><ch.qos.logback.classic.Logger: void info(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails cacheAndGetClient(java.lang.String)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.builders.ApiInfoBuilder termsOfServiceUrl(java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<cc.mrbird.febs.common.datasource.starter.configure.FebsDataSourceAutoConfigure: com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor paginationInterceptor()>-><com.baomidou.mybatisplus.extension.parsers.BlockAttackSqlParser: void <init>()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><org.springframework.data.redis.core.DefaultValueOperations: void set(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono swaggerResources()>-><org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties: java.lang.String getDescriptionColor()>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails cacheAndGetClient(java.lang.String)>-><java.util.stream.Collectors: java.util.stream.Collector toSet()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><springfox.documentation.spring.web.plugins.ApiSelectorBuilder: springfox.documentation.spring.web.plugins.ApiSelectorBuilder paths(com.google.common.base.Predicate)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.config.AuthSource getAuthSource(java.lang.String)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void <init>(cc.mrbird.febs.auth.service.ValidateCodeService)>-><org.springframework.web.filter.OncePerRequestFilter: void <init>()>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthMicrosoftRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.FebsUserDetailServiceImpl: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Collection)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.commons.lang3.StringUtils: java.lang.String lowerCase(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.UserConnectionServiceImpl: void <init>()>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: void <init>()>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: cc.mrbird.febs.common.core.entity.FebsResponse oauthCliendetailsList(cc.mrbird.febs.common.core.entity.QueryRequest,cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: com.baomidou.mybatisplus.core.metadata.IPage findOauthClientDetails(cc.mrbird.febs.common.core.entity.QueryRequest,cc.mrbird.febs.auth.entity.OauthClientDetails)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><springfox.documentation.spring.web.plugins.Docket: springfox.documentation.spring.web.plugins.Docket securitySchemes(java.util.List)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><cc.mrbird.febs.auth.properties.FebsAuthProperties: cc.mrbird.febs.auth.properties.FebsValidateCodeProperties getCode()>
<cc.mrbird.febs.auth.handler.FebsWebLoginFailureHandler: void onAuthenticationFailure(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse message(java.lang.String)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.builders.ApiInfoBuilder title(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken signLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthKujialeRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.common.core.utils.FebsUtil: java.util.Map getDataTable(com.baomidou.mybatisplus.core.metadata.IPage)>-><java.lang.Long: java.lang.Long valueOf(long)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void updateOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: void removeRedisCache(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void updateOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>-><cc.mrbird.febs.auth.properties.FebsAuthProperties: java.lang.String getSocialLoginClientId()>
<cc.mrbird.febs.common.core.utils.FebsUtil: boolean containChinese(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: void configure(org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer)>-><cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter jwtAccessTokenConverter()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void createOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.entity.OauthClientDetails: void setClientSecret(java.lang.String)>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.auth.service.impl.UserConnectionServiceImpl: cc.mrbird.febs.auth.entity.UserConnection selectByCondition(java.lang.String,java.lang.String)>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter resourceOwnerPasswordTokenGranter(org.springframework.security.authentication.AuthenticationManager,org.springframework.security.oauth2.provider.OAuth2RequestFactory)>-><cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.DefaultTokenServices defaultTokenServices()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveBind(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdateStringKeyMap(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><org.apache.commons.lang3.StringUtils: java.lang.String substringAfterLast(java.lang.String,java.lang.String)>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer httpBasic()>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void <init>()>-><org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter: void <init>()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveBind(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><me.zhyd.oauth.model.AuthResponse: java.lang.String getMsg()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><me.zhyd.oauth.model.AuthUser: java.lang.String getUsername()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><org.springframework.data.redis.core.DefaultValueOperations: void set(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>
<cc.mrbird.febs.common.security.starter.handler.FebsAccessDeniedHandler: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.access.AccessDeniedException)>-><cc.mrbird.febs.common.core.utils.FebsUtil: void makeJsonResponse(javax.servlet.http.HttpServletResponse,int,java.lang.Object)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><springfox.documentation.service.Contact: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void check(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.builders.ApiInfoBuilder contact(springfox.documentation.service.Contact)>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void check(java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><ch.qos.logback.core.spi.ContextAwareBase: void setContext(ch.qos.logback.core.Context)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void deleteOauthClientDetails(java.lang.String)>-><org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)>
<cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser registUser(java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.core.entity.system.SystemUser: void setDescription(java.lang.String)>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter jwtAccessTokenConverter()>-><org.springframework.security.oauth2.provider.token.DefaultUserAuthenticationConverter: void <init>()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>
<com.fasterxml.jackson.databind.deser.impl.PropertyValue$Map: void assign(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void updateOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.entity.OauthClientDetails: void setClientId(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.FebsUserDetailServiceImpl: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)>-><cc.mrbird.febs.auth.manager.UserManager: java.lang.String findUserPermissions(java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Object get(java.lang.String)>-><org.springframework.data.redis.core.DefaultValueOperations: java.lang.Object get(java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>-><cc.mrbird.febs.common.core.entity.constant.SocialConstant: java.lang.String setSocialLoginPassword()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>-><java.util.HashMap: void <init>(int)>
<com.alibaba.fastjson.JSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: com.baomidou.mybatisplus.core.metadata.IPage findOauthClientDetails(cc.mrbird.febs.common.core.entity.QueryRequest,cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.common.core.entity.QueryRequest: int getPageNum()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.model.AuthCallback resolveAuthCallback(me.zhyd.oauth.model.AuthCallback)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.TokenStore tokenStore()>-><org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore: void setAuthenticationKeyGenerator(org.springframework.security.oauth2.provider.token.AuthenticationKeyGenerator)>
<cc.mrbird.febs.common.security.starter.interceptor.FebsServerProtectInterceptor: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: com.baomidou.mybatisplus.core.metadata.IPage findOauthClientDetails(cc.mrbird.febs.common.core.entity.QueryRequest,cc.mrbird.febs.auth.entity.OauthClientDetails)>-><com.baomidou.mybatisplus.extension.plugins.pagination.Page: void <init>(long,long)>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry authorizeRequests()>
<cc.mrbird.febs.common.logging.starter.aspect.ControllerLogAspect: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void deleteOauthClientDetails(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object in(java.lang.Object,java.lang.Object[])>
<ch.qos.logback.core.joran.action.AbstractEventEvaluatorAction: void end(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: com.wf.captcha.base.Captcha createCaptcha(cc.mrbird.febs.auth.properties.FebsValidateCodeProperties)>-><com.wf.captcha.SpecCaptcha: void <init>(int,int,int)>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<cc.mrbird.febs.common.core.utils.FebsUtil: boolean match(java.lang.String,java.lang.String)>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void updateOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: boolean update(java.lang.Object,com.baomidou.mybatisplus.core.conditions.Wrapper)>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter jwtAccessTokenConverter()>-><org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: org.springframework.security.oauth2.provider.token.AccessTokenConverter getAccessTokenConverter()>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.utils.AuthStateUtils: java.lang.String createState()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.controller.SocialLoginController: cc.mrbird.febs.common.core.entity.FebsResponse bindLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse data(java.lang.Object)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$AuthorizedUrl: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry permitAll()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.springframework.security.oauth2.provider.token.DefaultUserAuthenticationConverter: org.springframework.security.core.Authentication extractAuthentication(java.util.Map)>-><cc.mrbird.febs.auth.service.impl.FebsUserDetailServiceImpl: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: boolean isCurrentUser(java.lang.String)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.builders.ApiInfoBuilder version(java.lang.String)>
<cc.mrbird.febs.auth.controller.SocialLoginController: cc.mrbird.febs.common.core.entity.FebsResponse bindLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken bindLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: cc.mrbird.febs.common.core.entity.FebsResponse getOriginClientSecret(java.lang.String)>-><cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: cc.mrbird.febs.auth.entity.OauthClientDetails findById(java.lang.String)>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer)>-><org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer: org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer authenticationEntryPoint(org.springframework.security.web.AuthenticationEntryPoint)>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity$RequestMatcherConfigurer: org.springframework.security.config.annotation.web.builders.HttpSecurity and()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: boolean equals(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getEmail()>
<cc.mrbird.febs.auth.controller.SecurityController: cc.mrbird.febs.common.core.entity.FebsResponse signout(javax.servlet.http.HttpServletRequest,java.lang.String)>-><org.springframework.security.oauth2.provider.token.DefaultTokenServices: boolean revokeToken(java.lang.String)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono uiConfiguration()>-><springfox.documentation.swagger.web.UiConfigurationBuilder: springfox.documentation.swagger.web.UiConfiguration build()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.DefaultTokenServices defaultTokenServices()>-><org.springframework.security.oauth2.provider.token.DefaultTokenServices: void setClientDetailsService(org.springframework.security.oauth2.provider.ClientDetailsService)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken bindLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.entity.BindUser: java.lang.String getBindPassword()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: com.baomidou.mybatisplus.core.metadata.IPage findOauthClientDetails(cc.mrbird.febs.common.core.entity.QueryRequest,cc.mrbird.febs.auth.entity.OauthClientDetails)>-><java.util.ArrayList: void <init>()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties: java.lang.String getTermsOfServiceUrl()>
<cc.mrbird.febs.common.core.entity.constant.SocialConstant: void <clinit>()>-><java.lang.ThreadLocal: void <init>()>
<cc.mrbird.febs.auth.controller.SecurityController: cc.mrbird.febs.common.core.entity.FebsResponse signout(javax.servlet.http.HttpServletRequest,java.lang.String)>-><org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getEmail()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getEmail()>
<cc.mrbird.febs.common.core.validator.MobileValidator: boolean isValid(java.lang.String,javax.validation.ConstraintValidatorContext)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void createOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><org.springframework.security.crypto.password.Pbkdf2PasswordEncoder: java.lang.String encode(java.lang.CharSequence)>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: void <init>(javax.sql.DataSource,cc.mrbird.febs.common.redis.service.RedisService)>-><org.springframework.security.oauth2.provider.client.JdbcClientDetailsService: void <init>(javax.sql.DataSource)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.security.starter.handler.FebsAuthExceptionEntryPoint: void commence(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Object[])>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><me.zhyd.oauth.model.AuthUser: me.zhyd.oauth.config.AuthSource getSource()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: void <init>(java.lang.String,java.lang.String)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: boolean lambda$swaggerResources$0(springfox.documentation.swagger.web.SwaggerResource,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.entity.UserConnection: void <init>()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void createOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.common.core.exception.FebsException: void <init>(java.lang.String)>
<cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayResourceConfigure: java.util.List get()>-><org.springframework.cloud.gateway.config.GatewayProperties: java.util.List getRoutes()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><springfox.documentation.spring.web.plugins.Docket: void <init>(springfox.documentation.spi.DocumentationType)>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse message(java.lang.String)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getDescription()>
<cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse put(java.lang.String,java.lang.Object)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<cc.mrbird.febs.common.security.starter.interceptor.FebsServerProtectInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><cc.mrbird.febs.common.security.starter.properties.FebsCloudSecurityProperties: java.lang.Boolean getOnlyFetchByGateway()>
<cc.mrbird.febs.auth.entity.BindUser: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getAvatar()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void updateOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.config.AuthSource getAuthSource(java.lang.String)>-><me.zhyd.oauth.config.AuthSource: me.zhyd.oauth.config.AuthSource valueOf(java.lang.String)>
<cc.mrbird.febs.common.core.utils.FebsUtil: boolean isAjaxRequest(javax.servlet.http.HttpServletRequest)>-><java.lang.String: boolean equals(java.lang.Object)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: com.wf.captcha.base.Captcha createCaptcha(cc.mrbird.febs.auth.properties.FebsValidateCodeProperties)>-><com.wf.captcha.base.Captcha: void setCharType(int)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveBind(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><me.zhyd.oauth.request.AuthDefaultRequest: me.zhyd.oauth.model.AuthResponse login(me.zhyd.oauth.model.AuthCallback)>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: cc.mrbird.febs.common.core.entity.FebsResponse oauthCliendetailsList(cc.mrbird.febs.common.core.entity.QueryRequest,cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.common.core.utils.FebsUtil: java.util.Map getDataTable(com.baomidou.mybatisplus.core.metadata.IPage)>
<cc.mrbird.febs.auth.properties.FebsValidateCodeProperties: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.builders.ApiInfoBuilder licenseUrl(java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: void hdel(java.lang.String,java.lang.Object[])>-><org.springframework.data.redis.core.DefaultHashOperations: java.lang.Long delete(java.lang.Object,java.lang.Object[])>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter resourceOwnerPasswordTokenGranter(org.springframework.security.authentication.AuthenticationManager,org.springframework.security.oauth2.provider.OAuth2RequestFactory)>-><cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter jwtAccessTokenConverter()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void unbind(cc.mrbird.febs.auth.entity.BindUser,java.lang.String)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: boolean isCurrentUser(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: com.baomidou.mybatisplus.core.metadata.IPage findOauthClientDetails(cc.mrbird.febs.common.core.entity.QueryRequest,cc.mrbird.febs.auth.entity.OauthClientDetails)>-><com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper: void <init>()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.util.Date getLastLoginTime()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.TokenStore tokenStore()>-><cc.mrbird.febs.auth.properties.FebsAuthProperties: java.lang.Boolean getEnableJwt()>
<cc.mrbird.febs.auth.service.impl.UserConnectionServiceImpl: cc.mrbird.febs.auth.entity.UserConnection selectByCondition(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper: void <init>()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spi.service.contexts.SecurityContext securityContext()>
<cc.mrbird.febs.common.security.starter.interceptor.FebsServerProtectInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spi.service.contexts.SecurityContext securityContext()>-><springfox.documentation.builders.PathSelectors: com.google.common.base.Predicate regex(java.lang.String)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono securityConfiguration()>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void deleteOauthCliendetails(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse data(java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse put(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void check(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono swaggerResources()>-><reactor.core.publisher.Mono: reactor.core.publisher.Mono just(java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.common.core.entity.system.SystemUser: void setUsername(java.lang.String)>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: void configure(org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer)>-><org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer: org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer tokenStore(org.springframework.security.oauth2.provider.token.TokenStore)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void createOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.entity.OauthClientDetails: java.lang.String getClientSecret()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><javax.servlet.http.HttpServletResponseWrapper: void sendRedirect(java.lang.String)>
<cc.mrbird.febs.common.logging.starter.aspect.ControllerLogAspect: java.lang.Object around(org.aspectj.lang.ProceedingJoinPoint)>-><ch.qos.logback.classic.Logger: void info(java.lang.String,java.lang.Object[])>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse data(java.lang.Object)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getSex()>
<cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayAutoConfigure: void <init>(cc.mrbird.febs.common.doc.gateway.properties.FebsDocGatewayProperties)>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter jwtAccessTokenConverter()>-><org.springframework.security.oauth2.provider.token.DefaultUserAuthenticationConverter: void setUserDetailsService(org.springframework.security.core.userdetails.UserDetailsService)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void unbind(cc.mrbird.febs.auth.entity.BindUser,java.lang.String)>-><cc.mrbird.febs.common.core.exception.FebsException: void <init>(java.lang.String)>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void <init>()>-><org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler: void <init>()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.wf.captcha.GifCaptcha: boolean out(java.io.OutputStream)>
<org.springframework.security.oauth2.provider.token.AbstractTokenGranter: org.springframework.security.oauth2.common.OAuth2AccessToken grant(java.lang.String,org.springframework.security.oauth2.provider.TokenRequest)>-><cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.model.AuthCallback resolveAuthCallback(me.zhyd.oauth.model.AuthCallback)>-><org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity$RequestMatcherConfigurer requestMatchers()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void unbind(cc.mrbird.febs.auth.entity.BindUser,java.lang.String)>-><cc.mrbird.febs.auth.service.impl.UserConnectionServiceImpl: void deleteByCondition(java.lang.String,java.lang.String)>
<cc.mrbird.febs.common.security.starter.interceptor.FebsServerProtectInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.springframework.util.Base64Utils: byte[] encode(byte[])>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter jwtAccessTokenConverter()>-><org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter: void setUserTokenConverter(org.springframework.security.oauth2.provider.token.UserAuthenticationConverter)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.request.AuthRequest renderAuth(java.lang.String)>-><com.xkcoding.justauth.AuthRequestFactory: me.zhyd.oauth.request.AuthRequest get(me.zhyd.oauth.config.AuthSource)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails cacheAndGetClient(java.lang.String)>-><org.springframework.security.oauth2.provider.client.JdbcClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory oAuth2RequestFactory()>-><org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory: void <init>(org.springframework.security.oauth2.provider.ClientDetailsService)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.HashOperations opsForHash()>
<cc.mrbird.febs.common.core.exception.ValidateCodeException: void <init>(java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void deleteOauthClientDetails(java.lang.String)>-><java.util.stream.ReferencePipeline$Head: void forEach(java.util.function.Consumer)>
<cc.mrbird.febs.common.security.starter.handler.FebsAuthExceptionEntryPoint: void commence(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Object[])>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.lang.Throwable: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><me.zhyd.oauth.model.AuthUser: java.lang.String getLocation()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.TokenStore tokenStore()>-><org.springframework.security.oauth2.provider.token.store.JwtTokenStore: void <init>(org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter)>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><cc.mrbird.febs.common.logging.starter.properties.FebsLogProperties: java.lang.String getLogstashHost()>
<cc.mrbird.febs.common.core.utils.FebsUtil: boolean match(java.lang.String,java.lang.String)>-><java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<com.sun.naming.internal.ResourceManager: java.lang.Object getFactory(java.lang.String,java.util.Hashtable,javax.naming.Context,java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void updateOauthCliendetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.auth.controller.SocialLoginController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<cc.mrbird.febs.common.core.entity.system.UserRole: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.common.security.starter.interceptor.FebsServerProtectInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.lang.String: byte[] getBytes()>
<org.springframework.security.oauth2.provider.token.DefaultTokenServices: int getAccessTokenValiditySeconds(org.springframework.security.oauth2.provider.OAuth2Request)>-><cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.springframework.security.web.DefaultRedirectStrategy: void sendRedirect(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: void <init>(cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties)>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.common.datasource.starter.configure.FebsDataSourceAutoConfigure: com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor paginationInterceptor()>-><java.util.ArrayList: void <init>()>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.entity.UserConnection: void setLocation(java.lang.String)>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><net.logstash.logback.appender.AbstractLogstashTcpSocketAppender: void setEncoder(ch.qos.logback.core.encoder.Encoder)>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: java.lang.String convert(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<cc.mrbird.febs.common.core.utils.FebsUtil: boolean containChinese(java.lang.String)>-><java.lang.Boolean: boolean booleanValue()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: com.wf.captcha.base.Captcha createCaptcha(cc.mrbird.febs.auth.properties.FebsValidateCodeProperties)>-><cc.mrbird.febs.auth.properties.FebsValidateCodeProperties: java.lang.String getType()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: com.wf.captcha.base.Captcha createCaptcha(cc.mrbird.febs.auth.properties.FebsValidateCodeProperties)>-><java.lang.Integer: int intValue()>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthGitlabRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.common.core.validator.MobileValidator: boolean isValid(java.lang.Object,javax.validation.ConstraintValidatorContext)>-><cc.mrbird.febs.common.core.validator.MobileValidator: boolean isValid(java.lang.String,javax.validation.ConstraintValidatorContext)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.String toString()>
<cc.mrbird.febs.common.logging.starter.aspect.ControllerLogAspect: java.lang.Object around(org.aspectj.lang.ProceedingJoinPoint)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String,java.lang.Object[])>
<cc.mrbird.febs.common.doc.gateway.filter.FebsDocGatewayHeaderFilter: void <init>()>-><org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory: void <init>()>
<cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser registUser(java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.core.entity.system.UserRole: void setUserId(java.lang.Long)>
<cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayAutoConfigure: cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler febsDocGatewayHandler(springfox.documentation.swagger.web.SwaggerResourcesProvider)>-><cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: void setSecurityConfiguration(springfox.documentation.swagger.web.SecurityConfiguration)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><me.zhyd.oauth.model.AuthUser: me.zhyd.oauth.config.AuthSource getSource()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><me.zhyd.oauth.model.AuthUser: me.zhyd.oauth.config.AuthSource getSource()>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken signLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.common.core.exception.FebsException: void <init>(java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<cc.mrbird.febs.common.logging.starter.aspect.ControllerLogAspect: java.lang.Object around(org.aspectj.lang.ProceedingJoinPoint)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object[])>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveBind(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.config.AuthSource getAuthSource(java.lang.String)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><springfox.documentation.builders.RequestHandlerSelectors: com.google.common.base.Predicate basePackage(java.lang.String)>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void addOauthCliendetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><me.zhyd.oauth.model.AuthUser: java.lang.String getUuid()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void validateCode(javax.servlet.http.HttpServletRequest)>-><cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void check(java.lang.String,java.lang.String)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.time.format.ZoneName: void <clinit>()>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void unbind(cc.mrbird.febs.auth.entity.BindUser,java.lang.String)>-><cc.mrbird.febs.auth.entity.BindUser: java.lang.String getBindUsername()>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails cacheAndGetClient(java.lang.String)>-><org.springframework.security.oauth2.provider.client.BaseClientDetails: java.util.Set getAutoApproveScopes()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: void <init>(org.springframework.security.authentication.AuthenticationManager,org.springframework.security.core.userdetails.UserDetailsService,org.springframework.security.crypto.password.PasswordEncoder,cc.mrbird.febs.auth.translator.FebsWebResponseExceptionTranslator,cc.mrbird.febs.auth.properties.FebsAuthProperties,cc.mrbird.febs.auth.service.impl.RedisAuthenticationCodeService,cc.mrbird.febs.auth.service.impl.RedisClientDetailsService,org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter: void <init>()>
<cc.mrbird.febs.auth.controller.SocialLoginController: cc.mrbird.febs.common.core.entity.FebsResponse bindLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: cc.mrbird.febs.common.core.entity.FebsResponse getOriginClientSecret(java.lang.String)>-><cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>
<cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>-><java.util.HashMap: void <init>()>
<cc.mrbird.febs.auth.controller.SocialLoginController: cc.mrbird.febs.common.core.entity.FebsResponse findUserConnections(java.lang.String)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse data(java.lang.Object)>
<cc.mrbird.febs.common.logging.starter.properties.FebsLogProperties: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.service.impl.UserConnectionServiceImpl: void deleteByCondition(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper: void <init>()>
<cc.mrbird.febs.auth.service.impl.FebsUserDetailServiceImpl: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)>-><cc.mrbird.febs.common.core.utils.FebsUtil: javax.servlet.http.HttpServletRequest getHttpServletRequest()>
<cc.mrbird.febs.common.core.exception.FileDownloadException: void <init>(java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveBind(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><me.zhyd.oauth.model.AuthResponse: java.lang.Object getData()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.model.AuthCallback resolveAuthCallback(me.zhyd.oauth.model.AuthCallback)>-><java.lang.StringBuilder: java.lang.String toString()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><javax.servlet.ServletRequestWrapper: java.lang.String getParameter(java.lang.String)>
<cc.mrbird.febs.common.core.utils.FebsUtil: boolean containChinese(java.lang.String)>-><java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void permitAll(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer: org.springframework.security.config.annotation.web.HttpSecurityBuilder disable()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<cc.mrbird.febs.common.core.utils.FebsUtil: javax.servlet.http.HttpServletRequest getHttpServletRequest()>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken signLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser findByName(java.lang.String)>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spi.service.contexts.SecurityContext securityContext()>-><springfox.documentation.spi.service.contexts.SecurityContextBuilder: springfox.documentation.spi.service.contexts.SecurityContext build()>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.DefaultTokenServices defaultTokenServices()>-><org.springframework.security.oauth2.provider.token.DefaultTokenServices: void setSupportRefreshToken(boolean)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void deleteOauthClientDetails(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.FebsUserDetailServiceImpl: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getMobile()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken signLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>
<cc.mrbird.febs.auth.handler.FebsWebLoginFailureHandler: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveBind(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><me.zhyd.oauth.model.AuthResponse: boolean ok()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.DefaultTokenServices defaultTokenServices()>-><org.springframework.security.oauth2.provider.token.DefaultTokenServices: void setTokenStore(org.springframework.security.oauth2.provider.token.TokenStore)>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveBind(java.lang.String,me.zhyd.oauth.model.AuthCallback)>
<cc.mrbird.febs.common.security.starter.interceptor.FebsServerProtectInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.lang.Boolean: boolean booleanValue()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getRoleName()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.DefaultTokenServices defaultTokenServices()>-><org.springframework.security.oauth2.provider.token.DefaultTokenServices: void <init>()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void <init>(cc.mrbird.febs.common.redis.service.RedisService,cc.mrbird.febs.auth.properties.FebsAuthProperties)>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void addOauthCliendetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: com.wf.captcha.base.Captcha createCaptcha(cc.mrbird.febs.auth.properties.FebsValidateCodeProperties)>-><com.wf.captcha.GifCaptcha: void <init>(int,int,int)>
<cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser findByName(java.lang.String)>-><java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
<cc.mrbird.febs.auth.handler.FebsWebLoginFailureHandler: void onAuthenticationFailure(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><cc.mrbird.febs.common.core.utils.FebsUtil: void makeFailureResponse(javax.servlet.http.HttpServletResponse,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.wf.captcha.SpecCaptcha: boolean out(java.io.OutputStream)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getSex()>
<cc.mrbird.febs.auth.service.impl.RedisAuthenticationCodeService: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono uiConfiguration()>-><springfox.documentation.swagger.web.UiConfigurationBuilder: springfox.documentation.swagger.web.UiConfigurationBuilder builder()>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: void <init>()>
<cc.mrbird.febs.auth.properties.FebsAuthProperties: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser registUser(java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.core.entity.system.SystemUser: void setStatus(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.config.AuthSource getAuthSource(java.lang.String)>-><java.lang.String: java.lang.String toUpperCase()>
<cc.mrbird.febs.common.logging.starter.aspect.ControllerLogAspect: java.lang.Object around(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.System: long currentTimeMillis()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void deleteOauthClientDetails(java.lang.String)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: boolean remove(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: boolean checkUserName(java.lang.String)>-><cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: cc.mrbird.febs.auth.entity.OauthClientDetails findById(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails cacheAndGetClient(java.lang.String)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void createOauthClientDetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono swaggerResources()>-><java.util.stream.ReferencePipeline: boolean anyMatch(java.util.function.Predicate)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>-><cc.mrbird.febs.common.core.entity.system.SystemUser: java.lang.String getUsername()>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.String toString()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.FebsUserDetailServiceImpl: void <init>(org.springframework.security.crypto.password.PasswordEncoder,cc.mrbird.febs.auth.manager.UserManager)>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: java.lang.String lambda$tokenStore$0(org.springframework.security.oauth2.provider.OAuth2Authentication)>-><java.util.UUID: java.util.UUID randomUUID()>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void addOauthCliendetails(cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.common.core.exception.FebsException: void <init>(java.lang.String)>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: void configure(org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer)>-><org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer: org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer authorizationCodeServices(org.springframework.security.oauth2.provider.code.AuthorizationCodeServices)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void <init>(cc.mrbird.febs.auth.manager.UserManager,com.xkcoding.justauth.AuthRequestFactory,cc.mrbird.febs.auth.properties.FebsAuthProperties,org.springframework.security.crypto.password.PasswordEncoder,cc.mrbird.febs.auth.service.UserConnectionService,org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter,cc.mrbird.febs.auth.service.impl.RedisClientDetailsService)>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<cc.mrbird.febs.common.security.starter.handler.FebsAuthExceptionEntryPoint: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><cc.mrbird.febs.common.security.starter.properties.FebsCloudSecurityProperties: java.lang.String getAnonUris()>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.apache.commons.lang3.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><springfox.documentation.spring.web.plugins.ApiSelectorBuilder: springfox.documentation.spring.web.plugins.ApiSelectorBuilder apis(com.google.common.base.Predicate)>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.controller.SocialLoginController: void unbind(cc.mrbird.febs.auth.entity.BindUser,java.lang.String)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void unbind(cc.mrbird.febs.auth.entity.BindUser,java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: void deleteOauthClientDetails(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Object)>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><cc.mrbird.febs.common.core.utils.FebsUtil: void makeFailureResponse(javax.servlet.http.HttpServletResponse,java.lang.Object)>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthMiRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.wf.captcha.base.Captcha: java.lang.String text()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.common.core.exception.FebsException: void <init>(java.lang.String)>
<cc.mrbird.febs.common.logging.starter.aspect.ControllerLogAspect: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.common.core.entity.system.SystemUser: void <init>()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void createConnection(cc.mrbird.febs.common.core.entity.system.SystemUser,me.zhyd.oauth.model.AuthUser)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getStatus()>
<cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayAutoConfigure: cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler febsDocGatewayHandler(springfox.documentation.swagger.web.SwaggerResourcesProvider)>-><cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: void setUiConfiguration(springfox.documentation.swagger.web.UiConfiguration)>
<org.springframework.security.oauth2.provider.token.DefaultTokenServices: boolean isSupportRefreshToken(org.springframework.security.oauth2.provider.OAuth2Request)>-><cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><com.fasterxml.jackson.databind.ObjectMapper: java.lang.String writeValueAsString(java.lang.Object)>
<cc.mrbird.febs.auth.controller.SocialLoginController: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>
<cc.mrbird.febs.auth.manager.UserManager: cc.mrbird.febs.common.core.entity.system.SystemUser registUser(java.lang.String,java.lang.String)>-><cc.mrbird.febs.common.core.entity.system.UserRole: void setRoleId(java.lang.Long)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getDeptIds()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.Long getUserId()>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono securityConfiguration()>-><springfox.documentation.swagger.web.SecurityConfigurationBuilder: springfox.documentation.swagger.web.SecurityConfiguration build()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter resourceOwnerPasswordTokenGranter(org.springframework.security.authentication.AuthenticationManager,org.springframework.security.oauth2.provider.OAuth2RequestFactory)>-><cc.mrbird.febs.auth.properties.FebsAuthProperties: java.lang.Boolean getEnableJwt()>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<cc.mrbird.febs.auth.service.impl.FebsUserDetailServiceImpl: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)>-><org.springframework.beans.BeanUtils: void copyProperties(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.entity.UserConnection: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><javax.servlet.ServletRequestWrapper: java.lang.String getParameter(java.lang.String)>
<cc.mrbird.febs.common.core.entity.constant.RegexpConstant: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>-><cc.mrbird.febs.common.core.utils.FebsUtil: javax.servlet.http.HttpServletRequest getHttpServletRequest()>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.translator.FebsWebResponseExceptionTranslator: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.common.core.entity.constant.SocialConstant: java.lang.String setSocialLoginPassword()>-><java.lang.ThreadLocal: void set(java.lang.Object)>
<cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties: void <init>()>-><java.lang.Object: void <init>()>
<cc.mrbird.febs.common.doc.gateway.configure.FebsDocGatewayAutoConfigure: cc.mrbird.febs.common.doc.gateway.filter.FebsDocGatewayHeaderFilter febsDocGatewayHeaderFilter()>-><cc.mrbird.febs.common.doc.gateway.filter.FebsDocGatewayHeaderFilter: void <init>()>
<cc.mrbird.febs.auth.controller.OauthClientDetailsController: void deleteOauthCliendetails(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.auth.controller.SecurityController: void captcha(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><cc.mrbird.febs.common.core.utils.FebsUtil: void makeSuccessResponse(javax.servlet.http.HttpServletResponse,java.lang.Object)>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.springframework.security.web.savedrequest.HttpSessionRequestCache: org.springframework.security.web.savedrequest.SavedRequest getRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.controller.SocialLoginController: cc.mrbird.febs.common.core.entity.FebsResponse signLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken signLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>
<cc.mrbird.febs.common.logging.starter.aspect.ControllerLogAspect: java.lang.Object around(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Long: java.lang.Long valueOf(long)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.service.ApiInfo groupApiInfo()>-><cc.mrbird.febs.common.doc.starter.properties.FebsDocProperties: java.lang.String getEmail()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><com.xkcoding.justauth.AuthRequestFactory: me.zhyd.oauth.request.AuthRequest get(me.zhyd.oauth.config.AuthSource)>
<cc.mrbird.febs.auth.service.impl.UserConnectionServiceImpl: java.util.List selectByCondition(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper: void <init>()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken bindLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.auth.entity.BindUser: java.lang.String getBindUsername()>
<cc.mrbird.febs.auth.manager.UserManager: java.lang.String lambda$findByName$0(cc.mrbird.febs.common.core.entity.system.UserDataPermission)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: com.wf.captcha.base.Captcha createCaptcha(cc.mrbird.febs.auth.properties.FebsValidateCodeProperties)>-><cc.mrbird.febs.auth.properties.FebsValidateCodeProperties: java.lang.Integer getWidth()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.request.AuthRequest renderAuth(java.lang.String)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.config.AuthSource getAuthSource(java.lang.String)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean hset(java.lang.String,java.lang.String,java.lang.Object)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<cc.mrbird.febs.common.doc.starter.configure.FebsDocAutoConfigure: springfox.documentation.spring.web.plugins.Docket groupRestApi()>-><springfox.documentation.spring.web.plugins.Docket: springfox.documentation.spring.web.plugins.Docket apiInfo(springfox.documentation.service.ApiInfo)>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: com.baomidou.mybatisplus.core.metadata.IPage findOauthClientDetails(cc.mrbird.febs.common.core.entity.QueryRequest,cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.common.core.entity.QueryRequest: int getPageSize()>
<cc.mrbird.febs.auth.handler.FebsWebLoginSuccessHandler: void onAuthenticationSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><cc.mrbird.febs.common.core.entity.FebsResponse: void <init>()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object,java.lang.Long)>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.ValueOperations opsForValue()>
<cc.mrbird.febs.auth.service.impl.ValidateCodeServiceImpl: com.wf.captcha.base.Captcha createCaptcha(cc.mrbird.febs.auth.properties.FebsValidateCodeProperties)>-><cc.mrbird.febs.auth.properties.FebsValidateCodeProperties: java.lang.Integer getHeight()>
<cc.mrbird.febs.common.redis.service.RedisService: void hdel(java.lang.String,java.lang.Object[])>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.HashOperations opsForHash()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter jwtAccessTokenConverter()>-><org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: void <init>()>
<cc.mrbird.febs.auth.service.impl.UserConnectionServiceImpl: void deleteByCondition(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer)>-><org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer: org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer accessDeniedHandler(org.springframework.security.web.access.AccessDeniedHandler)>
<cc.mrbird.febs.common.security.starter.configure.FebsCloudResourceServerConfigure: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.configurers.CsrfConfigurer csrf()>
<cc.mrbird.febs.auth.configure.FebsAuthorizationServerConfigure: org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter jwtAccessTokenConverter()>-><cc.mrbird.febs.auth.properties.FebsAuthProperties: java.lang.String getJwtAccessKey()>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>
<cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: java.lang.String convert(java.lang.String)>-><java.lang.Boolean: java.lang.String toString()>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>-><cc.mrbird.febs.auth.service.impl.RedisClientDetailsService: org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthDefaultRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String toString()>-><cc.mrbird.febs.common.core.entity.FebsAuthUser: java.lang.String getAvatar()>
<cc.mrbird.febs.auth.service.impl.OauthClientDetailsServiceImpl: com.baomidou.mybatisplus.core.metadata.IPage findOauthClientDetails(cc.mrbird.febs.common.core.entity.QueryRequest,cc.mrbird.febs.auth.entity.OauthClientDetails)>-><cc.mrbird.febs.auth.entity.OauthClientDetails: java.lang.String getClientId()>
<ch.qos.logback.core.joran.action.ConversionRuleAction: void begin(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String,org.xml.sax.Attributes)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.controller.SocialLoginController: void renderAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse)>-><me.zhyd.oauth.request.AuthDingTalkRequest: java.lang.String authorize(java.lang.String)>
<cc.mrbird.febs.auth.controller.SocialLoginController: java.lang.String login(java.lang.String,me.zhyd.oauth.model.AuthCallback,java.lang.String,org.springframework.ui.Model)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<cc.mrbird.febs.common.redis.service.RedisService: java.lang.Boolean set(java.lang.String,java.lang.Object)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<cc.mrbird.febs.auth.service.impl.UserConnectionServiceImpl: cc.mrbird.febs.auth.entity.UserConnection selectByCondition(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.logging.starter.properties.FebsLogProperties: void <init>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: org.springframework.security.oauth2.common.OAuth2AccessToken getOauth2AccessToken(cc.mrbird.febs.common.core.entity.system.SystemUser)>-><java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.model.AuthCallback resolveAuthCallback(me.zhyd.oauth.model.AuthCallback)>-><java.lang.StringBuilder: void <init>()>
<cc.mrbird.febs.common.logging.starter.configure.FebsLogAutoConfigure: void enableElk()>-><net.logstash.logback.appender.AbstractLogstashTcpSocketAppender: void addDestination(java.lang.String)>
<cc.mrbird.febs.auth.controller.SocialLoginController: cc.mrbird.febs.common.core.entity.FebsResponse signLogin(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><cc.mrbird.febs.common.core.entity.FebsResponse: cc.mrbird.febs.common.core.entity.FebsResponse data(java.lang.Object)>
<cc.mrbird.febs.auth.manager.UserManager: void <init>(cc.mrbird.febs.auth.mapper.UserMapper,cc.mrbird.febs.auth.mapper.MenuMapper,cc.mrbird.febs.auth.mapper.UserRoleMapper)>-><java.lang.Object: void <init>()>
<ch.qos.logback.core.joran.action.AppenderAction: void begin(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String,org.xml.sax.Attributes)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void put(java.lang.Object,java.lang.Object)>-><cc.mrbird.febs.common.core.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.common.core.utils.FebsUtil: java.util.Map getDataTable(com.baomidou.mybatisplus.core.metadata.IPage)>-><java.util.HashMap: void <init>(int)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: void bind(cc.mrbird.febs.auth.entity.BindUser,me.zhyd.oauth.model.AuthUser)>-><java.lang.StringBuilder: java.lang.String toString()>
<cc.mrbird.febs.common.core.utils.FebsUtil: java.util.Map getDataTable(com.baomidou.mybatisplus.core.metadata.IPage)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: cc.mrbird.febs.common.core.entity.FebsResponse resolveLogin(java.lang.String,me.zhyd.oauth.model.AuthCallback)>-><cc.mrbird.febs.auth.service.impl.SocialLoginServiceImpl: me.zhyd.oauth.config.AuthSource getAuthSource(java.lang.String)>
<cc.mrbird.febs.auth.filter.ValidateCodeFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<cc.mrbird.febs.common.doc.gateway.handler.FebsDocGatewayHandler: reactor.core.publisher.Mono securityConfiguration()>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
