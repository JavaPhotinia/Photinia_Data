<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.util.UUID: java.util.UUID randomUUID()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findByUserName(java.lang.String)>
<com.favorites.web.FavoritesController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.FavoritesRepositoryImpl getFavoritesRepositoryImpl()>
<com.favorites.web.HomeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.HomeController$$SpringCGLIB: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getUserId(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.Favorites: java.lang.Long getId()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<org.hibernate.tool.schema.Action: org.hibernate.tool.schema.Action interpretJpaSetting(java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><com.favorites.domain.Letter: void setSendUserId(java.lang.Long)>
<org.codehaus.groovy.runtime.ProxyGeneratorAdapter: void <init>(java.util.Map,java.lang.Class,java.lang.Class[],java.lang.ClassLoader,boolean,java.lang.Class)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.CommentController: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: java.util.List getFavorites()>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Notice: void setType(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><synthetic.method.ConfigRepositoryImpl: com.favorites.domain.Config findByUserIdAndDefaultFavorties(java.lang.Long,java.lang.String)>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String encode(java.lang.String,java.lang.String)>-><com.favorites.utils.Des3EncryptionUtil: byte[] encode(byte[],byte[])>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostFollowedUser(java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String forgotPassword()>
<com.favorites.web.CollectController$$SpringCGLIB: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$1: boolean hasNext()>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.CollectRepositoryImpl: java.lang.Long countByUserIdAndTypeAndIsDelete(java.lang.Long,com.favorites.domain.enums.CollectType,com.favorites.domain.enums.IsDelete)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.ResponseData addImportFavorites()>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String index(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><synthetic.method.CollectRepositoryImpl: org.springframework.data.domain.Page findViewByUserIdAndType(java.lang.Long,org.springframework.data.domain.Pageable,com.favorites.domain.enums.CollectType)>
<com.favorites.web.NoticeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setId(java.lang.Long)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<com.favorites.service.impl.LetterServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.UserRepositoryImpl getUserRepositoryImpl()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response changePrivacy(java.lang.Long,com.favorites.domain.enums.CollectType)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<org.hibernate.tool.schema.internal.Helper: org.hibernate.tool.schema.spi.ScriptSourceInput interpretScriptSourceSetting(java.lang.Object,org.hibernate.boot.registry.classloading.spi.ClassLoaderService,java.lang.String)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.service.impl.ConfigServiceImpl: void updateConfig(long,java.lang.String,java.lang.String)>-><synthetic.method.ConfigRepositoryImpl: int updateFavoritesById(java.lang.Long,java.lang.String,java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: com.favorites.domain.enums.CollectType getType()>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.FollowRepositoryImpl: java.util.List findFollowUserByUserId(java.lang.Long)>
<synthetic.method.LookRecordRepositoryImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><java.util.ArrayList: void <init>()>
<com.favorites.domain.Favorites: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.FavoritesController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.FavoritesController$$SpringCGLIB: java.lang.String getfavoritesName()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.Throwable: void printStackTrace()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchMy(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><synthetic.method.CollectRepositoryImpl: org.springframework.data.domain.Page searchMyByKey(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.WebJarController: void callEntry_synthetic()>
<com.favorites.web.IndexController: java.lang.String feedback(org.springframework.ui.Model)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.sql.Timestamp: long getTime()>
<com.favorites.utils.DateUtils: long getDayBegin(long)>-><org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>
<com.favorites.web.FavoritesController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.io.File: boolean mkdir()>
<com.favorites.web.CommentController: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setProfilePicture(java.lang.String)>
<org.hibernate.tool.schema.internal.Helper: org.hibernate.tool.schema.spi.ScriptSourceInput interpretScriptSourceSetting(java.lang.Object,org.hibernate.boot.registry.classloading.spi.ClassLoaderService,java.lang.String)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><com.favorites.domain.Favorites: void setUserId(java.lang.Long)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void collectLike(java.lang.Long,long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: void applyPropertyToBeanDefinition(java.lang.String,java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void setLogoUrl(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<com.favorites.web.HomeController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.UserRepositoryImpl getUserRepositoryImpl()>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setCollectTime(java.lang.String)>
<com.favorites.web.WebJarController: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.IndexController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CollectRepositoryImpl getCollectRepositoryImpl()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<com.favorites.web.FavoritesController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.ConfigRepositoryImpl getConfigRepositoryImpl()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<org.codehaus.groovy.runtime.typehandling.ShortTypeHandling: java.lang.Character castToChar(java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.hibernate.boot.registry.selector.internal.StrategySelectorImpl: java.lang.Object resolveStrategy(java.lang.Class,java.lang.Object,java.util.concurrent.Callable,org.hibernate.boot.registry.selector.spi.StrategyCreator)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String uploadBackground()>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.HomeController: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setIsDelete(com.favorites.domain.enums.IsDelete)>
<com.favorites.service.impl.CollectServiceImpl: java.lang.Long createfavorites(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getNewFavorites()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><synthetic.method.FavoritesRepositoryImpl: com.favorites.domain.Favorites findById(long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<com.favorites.web.LetterController$$SpringCGLIB: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<org.hibernate.internal.util.config.ConfigurationHelper: java.lang.Integer getInteger(java.lang.String,java.util.Map)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.NoticeController$$SpringCGLIB: void <init>()>
<com.favorites.service.impl.ConfigServiceImpl: com.favorites.domain.Config saveConfig(java.lang.Long,java.lang.String)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$SingletonMap: java.util.Set entrySet()>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><java.lang.Long: long longValue()>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><com.favorites.domain.Letter: java.lang.Long getPid()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: void setContent(java.lang.String)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPraisedUser(java.lang.String)>-><com.favorites.repository.BaseNativeSqlRepository: java.util.List sqlArrayList(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findByEmail(java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setCollectTime(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<synthetic.method.NoticeRepositoryImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.CollectController$$SpringCGLIB: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.web.CollectController getCollectController()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.HomeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.HomeController$$SpringCGLIB: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String feedback(org.springframework.ui.Model)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>
<com.favorites.service.impl.LookRecordServiceImpl: void deleteLookRecord(java.lang.Long,java.lang.Long)>-><synthetic.method.LookRecordRepositoryImpl: java.lang.Long deleteByUserIdAndCollectId(java.lang.Long,java.lang.Long)>
<com.favorites.web.CollectController$$SpringCGLIB: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.util.Base64$Decoder: byte[] decode(java.lang.String)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.WebJarController: void <init>()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(java.lang.Long,java.lang.String)>-><com.favorites.domain.Favorites: void setUserId(java.lang.Long)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String login()>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.Config getConfig()>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.WeakHashMap: java.util.Set entrySet()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.web.LetterController: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.springframework.mail.javamail.JavaMailSenderImpl: void send(javax.mail.internet.MimeMessage)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setNewFavorites(java.lang.String)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.domain.view.IndexCollectorView: void setMostCollectUser(com.favorites.domain.User)>
<com.favorites.web.FollowController$$SpringCGLIB: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.web.FollowController getFollowController()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String feedback(org.springframework.ui.Model)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.domain.Favorites: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>-><synthetic.method.PraiseRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.favorites.web.CommentController: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setUserId(java.lang.Long)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Object)>
<com.favorites.utils.HtmlUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPopularUser(java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.domain.Favorites: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.FavoritesController$$SpringCGLIB: java.util.List getFavorites(java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.HomeController$$SpringCGLIB: void <init>()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.comm.exception.GlobalExceptionHandler: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String newFavorites()>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.FavoritesController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.ResponseData addImportFavorites()>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findById(long)>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void <init>()>-><com.favorites.cache.CacheService: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.User: void <init>()>
<com.favorites.WebConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean filterRegistration()>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void setName(java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String login()>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String forgotPassword()>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.HomeController: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><synthetic.method.NoticeRepositoryImpl: int updateReadedByUserId(java.lang.String,long,java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: java.lang.String getCollectLogoUrl(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: boolean checkCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.Long getId()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<org.hibernate.tool.schema.internal.Helper: org.hibernate.tool.schema.spi.ScriptTargetOutput interpretScriptTargetSetting(java.lang.Object,org.hibernate.boot.registry.classloading.spi.ClassLoaderService,java.lang.String)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.CommentController: void callEntry_synthetic()>-><com.favorites.web.CommentController: java.util.List list(java.lang.Long)>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.http.HttpStatus)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void <init>()>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.service.impl.CollectServiceImpl: boolean checkCollect(com.favorites.domain.Collect)>-><synthetic.method.FavoritesRepositoryImpl: com.favorites.domain.Favorites findByUserIdAndName(java.lang.Long,java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String mobile()>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.FeedbackController: void callEntry_synthetic()>-><com.favorites.domain.Feedback: void <init>()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.NoticeController$$SpringCGLIB: com.favorites.domain.result.ResponseData getNoticeNum()>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.LetterServiceImpl: java.util.List findLetter(java.lang.Long,org.springframework.data.domain.Pageable)>-><com.favorites.domain.view.LetterSummary: void <init>(com.favorites.domain.view.LetterView)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><java.lang.Long: long longValue()>
<com.favorites.web.CollectController: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><synthetic.method.FavoritesRepositoryImpl: java.util.List findByUserIdOrderByLastModifyTimeDesc(java.lang.Long)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><com.favorites.web.IndexController: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><synthetic.method.CollectRepositoryImpl: org.springframework.data.domain.Page findViewByUserIdAndTypeAndFavoritesId(java.lang.Long,org.springframework.data.domain.Pageable,com.favorites.domain.enums.CollectType,java.lang.Long)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String uploadBackground()>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.utils.Base64: byte[] encodeBase64(byte[],boolean)>-><java.lang.Math: double ceil(double)>
<com.favorites.utils.Des3EncryptionUtil: byte[] decode(byte[],byte[])>-><javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.favorites.web.UserController: java.util.List getFavorites()>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.domain.view.CollectSummary: void <init>(com.favorites.domain.view.CollectView)>-><java.lang.Object: void <init>()>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteAll()>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: java.util.List getFollows()>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.codehaus.groovy.syntax.SyntaxException: java.lang.String getMessage()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String export(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String encode(java.lang.String,java.lang.String)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.FollowRepositoryImpl: java.lang.Integer countByUserIdAndFollowIdAndStatus(java.lang.Long,java.lang.Long,com.favorites.domain.enums.FollowStatus)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.service.impl.CollectorServiceImpl: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>
<synthetic.method.FavoritesRepositoryImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.domain.UserIsFollow: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String feedback(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.security.MessageDigest: byte[] digest()>
<com.favorites.comm.aop.LoggerAdvice: java.lang.String parseParames(java.lang.Object[])>-><org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.service.impl.LookRecordServiceImpl: java.util.List getLookRecords(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.util.Base64$Decoder: byte[] decode(java.lang.String)>
<com.zaxxer.hikari.util.DriverDataSource: void <init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.ResponseData addImportFavorites()>-><com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response delete(java.lang.Long)>-><synthetic.method.CommentRepositoryImpl: void deleteById(java.lang.Long)>
<com.favorites.web.FeedbackController: void callEntry_synthetic()>-><com.favorites.domain.Feedback: void setFeedbackAdvice(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><synthetic.method.CollectRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.CollectController: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteLookRecord(java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.UserController: com.favorites.domain.Config getConfig()>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController$$SpringCGLIB: void <init>()>-><com.favorites.web.CollectController: void <init>()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<org.hibernate.engine.config.spi.StandardConverters$1: java.lang.Boolean convert(java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<org.codehaus.groovy.runtime.InvokerHelper: java.lang.String format(java.lang.Object,boolean,int,boolean)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.util.Date: void <init>()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.domain.view.LetterSummary: void <init>(com.favorites.domain.view.LetterView)>-><java.lang.Object: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><com.favorites.domain.Letter: void setType(com.favorites.domain.enums.LetterType)>
<org.hibernate.engine.config.spi.StandardConverters$1: java.lang.Boolean convert(java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.FeedbackController: void callEntry_synthetic()>-><com.favorites.domain.Feedback: void setCreateTime(java.lang.Long)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.io.FileOutputStream: void <init>(java.lang.String)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.io.File: void <init>(java.lang.String)>
<com.favorites.utils.DateUtils: long getDayBegin(long)>-><java.util.Date: long getTime()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String regist()>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.ResponseData addImportFavorites()>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findById(long)>
<com.favorites.web.UserController$$SpringCGLIB: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.web.UserController getUserController()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostFollowedUser(java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.springframework.mail.javamail.MimeMessageHelper: void setSubject(java.lang.String)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Integer: int intValue()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPopularUser(java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><synthetic.method.HttpServletResponseImpl: java.io.PrintWriter getWriter()>
<com.favorites.web.UserController$$SpringCGLIB: java.util.List getFollows()>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>
<com.favorites.web.UserController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.ConfigServiceImpl getConfigServiceImpl()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Long: long longValue()>
<com.favorites.web.FavoritesController$$SpringCGLIB: java.util.List getFavorites(java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.hibernate.tool.schema.SourceType: org.hibernate.tool.schema.SourceType interpret(java.lang.Object,org.hibernate.tool.schema.SourceType)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setCommentCount(java.lang.Long)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getNewFavorites()>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.NoticeController$$SpringCGLIB: com.favorites.domain.result.ResponseData getNoticeNum()>-><com.favorites.web.NoticeController: com.favorites.domain.result.ResponseData getNoticeNum()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.io.File: long length()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><synthetic.method.CollectRepositoryImpl: org.springframework.data.domain.Page findExploreViewByCategory(java.lang.String,org.springframework.data.domain.Pageable)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.IdentityHashMap: java.util.Set entrySet()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String tool(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><com.favorites.domain.UrlLibrary: void setUrl(java.lang.String)>
<com.favorites.domain.Letter: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><java.lang.Enum: java.lang.String name()>
<com.favorites.web.IndexController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.CollectServiceImpl getCollectServiceImpl()>
<groovyjarjarasm.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.HomeController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CollectRepositoryImpl getCollectRepositoryImpl()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response changePrivacy(java.lang.Long,com.favorites.domain.enums.CollectType)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><com.favorites.service.impl.CollectServiceImpl: java.lang.StringBuilder exportToHtml(long)>
<com.favorites.web.FollowController$$SpringCGLIB: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.LookRecordController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.LookRecordServiceImpl getLookRecordServiceImpl()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.domain.Collect: long getUserId()>-><java.lang.Long: long longValue()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.domain.Collect: void setTitle(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.LookRecordController: void <init>()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.HomeController: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.ResponseData addImportFavorites()>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.FavoritesServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CollectRepositoryImpl getCollectRepositoryImpl()>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response saveLookRecord(java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setRemark(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.util.ArrayList: int size()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><java.lang.String: int length()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><synthetic.method.ConfigRepositoryImpl: com.favorites.domain.Config findByUserId(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><com.favorites.service.impl.CollectServiceImpl: java.lang.Long createfavorites(com.favorites.domain.Collect)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.utils.DateUtils: long getDayBegin(long)>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.security.MessageDigest: void update(byte[])>
<com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getImge(java.lang.String)>-><java.lang.String: int length()>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response like(java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.FeedbackController: void callEntry_synthetic()>-><com.favorites.domain.Feedback: void setFeedbackName(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.NoticeServiceImpl: java.util.List getNoticeCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<com.favorites.web.IndexController: java.lang.String export(org.springframework.ui.Model)>-><org.springframework.ui.ExtendedModelMap: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String newPassword(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>
<com.favorites.web.HomeController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.LetterServiceImpl getLetterServiceImpl()>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.User: void setProfilePicture(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>
<com.favorites.web.CollectController: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.UserController$$SpringCGLIB: void <init>()>-><com.favorites.web.UserController: void <init>()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.lang.String getCollectLogoUrl(java.lang.String)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Notice: void setUserId(java.lang.Long)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.CollectRepositoryImpl: java.lang.Long countByUserIdAndIsDelete(java.lang.Long,com.favorites.domain.enums.IsDelete)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.FollowController$$SpringCGLIB: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.FavoritesRepositoryImpl: java.util.List findByUserId(java.lang.Long)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.nodes.Element: java.lang.String text()>
<com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>-><com.favorites.domain.Feedback: void setUserId(java.lang.Long)>
<com.favorites.web.LetterController$$SpringCGLIB: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchOther(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.domain.User: java.lang.String getUserName()>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><com.favorites.domain.LookRecord: void setCollectId(java.lang.Long)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setUserId(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchMy(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.utils.DateUtils: long getCurrentTime()>-><java.lang.System: long currentTimeMillis()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><synthetic.method.CollectRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.web.FeedbackController: void callEntry_synthetic()>-><com.favorites.domain.Feedback: void setUserId(java.lang.Long)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><groovy.lang.GroovyRuntimeException: java.lang.String getMessage()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>
<com.favorites.comm.Const: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.LetterController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.LetterController$$SpringCGLIB: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String encode(java.lang.String,java.lang.String)>-><java.lang.Throwable: void printStackTrace()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.ResponseData addImportFavorites()>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.LookRecordServiceImpl: void deleteLookRecordByUserID(java.lang.Long)>-><synthetic.method.LookRecordRepositoryImpl: java.lang.Long deleteByUserId(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.io.FileOutputStream: void close()>
<com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>-><com.favorites.web.BaseController: javax.servlet.http.HttpServletRequest getRequest()>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String home(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteLookRecord(java.lang.Long)>-><com.favorites.service.impl.LookRecordServiceImpl: void deleteLookRecord(java.lang.Long,java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><org.jsoup.nodes.Element: org.jsoup.select.Elements select(java.lang.String)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><synthetic.method.UserRepositoryImpl: int setProfilePicture(java.lang.String,java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.sql.Timestamp: long getTime()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.ConfigServiceImpl: void updateConfig(long,java.lang.String,java.lang.String)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.domain.view.IndexCollectorView: void setMostPopularUser(com.favorites.domain.User)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.domain.Follow: void setUserId(java.lang.Long)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response changePrivacy(java.lang.Long,com.favorites.domain.enums.CollectType)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<register-finalize <com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>-><com.favorites.domain.Notice: void setUserId(java.lang.Long)>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><synthetic.method.UrlLibraryRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.domain.view.IndexCollectorView: void setMostActiveUser(com.favorites.domain.User)>
<com.favorites.repository.impl.CollectorRepositoryImpl: void <init>()>-><com.favorites.repository.BaseNativeSqlRepository: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void collectLike(java.lang.Long,long)>-><synthetic.method.PraiseRepositoryImpl: com.favorites.domain.Praise findByUserIdAndCollectId(java.lang.Long,java.lang.Long)>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><java.lang.Long: long longValue()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void setUserId(java.lang.Long)>
<com.favorites.web.NoticeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setCreateTime(java.lang.Long)>
<com.favorites.domain.result.Response: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$1: java.lang.Object next()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><org.jsoup.nodes.Element: java.lang.String text()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.domain.result.Response: void <init>(com.favorites.domain.result.ExceptionMsg)>-><com.favorites.domain.result.ExceptionMsg: java.lang.String getCode()>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.IndexController: java.lang.String export(org.springframework.ui.Model)>-><synthetic.method.FavoritesRepositoryImpl: java.util.List findByUserId(java.lang.Long)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><com.favorites.domain.UserIsFollow: void setUserName(java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springframework.mock.web.MockFilterChain: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>
<com.favorites.web.UserController$$SpringCGLIB: java.util.List getFavorites()>-><com.favorites.web.UserController: java.util.List getFavorites()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.favorites.comm.filter.SecurityFilter: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.web.LetterController$$SpringCGLIB: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CommentController: void callEntry_synthetic()>-><com.favorites.domain.Comment: void <init>()>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.ResponseData addImportFavorites()>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.web.FavoritesController: void <init>()>
<com.favorites.web.CommentController: void callEntry_synthetic()>-><com.favorites.web.CommentController: com.favorites.domain.result.Response delete(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><synthetic.method.CollectRepositoryImpl: java.util.List findByFavoritesIdAndUrlAndUserIdAndIsDelete(java.lang.Long,java.lang.String,java.lang.Long,com.favorites.domain.enums.IsDelete)>
<com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.FollowController$$SpringCGLIB: void callEntry_synthetic()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getDescription()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.favorites.web.FavoritesController$$SpringCGLIB: java.util.List getFavorites(java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.domain.enums.CollectType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.codehaus.groovy.runtime.typehandling.ShortTypeHandling: java.lang.Class castToClass(java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.comm.exception.GlobalExceptionHandler: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.domain.enums.IsDelete: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.favorites.web.IndexController: java.lang.String index(org.springframework.ui.Model)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Object)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.domain.view.CollectorView: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.IndexController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.NoticeRepositoryImpl getNoticeRepositoryImpl()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String newFavorites()>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><synthetic.method.UserRepositoryImpl: int setBackgroundPicture(java.lang.String,java.lang.Long)>
<com.favorites.domain.enums.FollowStatus: void <clinit>()>-><com.favorites.domain.enums.FollowStatus: void <init>(java.lang.String,int)>
<com.favorites.web.UserController$$SpringCGLIB: java.util.List getFollows()>-><com.favorites.web.UserController: java.util.List getFollows()>
<com.favorites.web.FeedbackController: void callEntry_synthetic()>-><com.favorites.domain.Feedback: void setPhone(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.io.File: boolean exists()>
<com.favorites.web.LetterController: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CollectController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.FavoritesRepositoryImpl getFavoritesRepositoryImpl()>
<com.favorites.domain.enums.LetterType: void <clinit>()>-><com.favorites.domain.enums.LetterType: void <init>(java.lang.String,int)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.web.servlet.support.ErrorPageFilter$ErrorWrapperResponse: java.io.PrintWriter getWriter()>
<com.favorites.domain.Feedback: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.LetterController$$SpringCGLIB: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.FavoritesRepositoryImpl: java.util.List findByUserId(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.Long getId()>
<com.favorites.domain.enums.IsDelete: void <clinit>()>-><com.favorites.domain.enums.IsDelete: void <init>(java.lang.String,int)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response like(java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.HomeController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.CollectServiceImpl getCollectServiceImpl()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.HomeController: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String regist()>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.LetterServiceImpl: java.util.List findLetter(java.lang.Long,org.springframework.data.domain.Pageable)>-><java.util.ArrayList: void <init>()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.LetterController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Letter: void setContent(java.lang.String)>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.io.FileOutputStream: void write(byte[])>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><synthetic.method.HttpServletResponseImpl: void <init>()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.lang.String geturl()>
<com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><javax.servlet.http.Cookie: void setMaxAge(int)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.domain.Collect: void setFavoritesId(java.lang.Long)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setLastModifyTime(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.io.File: boolean exists()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.UserRepositoryImpl getUserRepositoryImpl()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: java.lang.String gettype()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.CollectController: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.service.impl.CollectServiceImpl: java.lang.Long createfavorites(com.favorites.domain.Collect)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.SubList$1: java.lang.Object next()>
<com.favorites.utils.Base64: byte[] encodeBase64(byte[],boolean)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.web.WebJarController: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.awt.image.BufferedImage: int getWidth()>
<com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>-><com.favorites.domain.Notice: void setType(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.String: int length()>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><com.favorites.domain.Letter: void setCreateTime(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CommentRepositoryImpl getCommentRepositoryImpl()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.domain.User: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><org.jsoup.nodes.Attribute: java.lang.Object getKey()>
<com.favorites.web.IndexController: java.lang.String tool(org.springframework.ui.Model)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.FollowController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.FollowController$$SpringCGLIB: java.lang.String getstatus()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(java.lang.Long,java.lang.String)>-><com.favorites.domain.Favorites: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: java.util.List getFavorites()>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.lang.String getkey()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.Long getFavoritesId()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.service.impl.NoticeServiceImpl: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.web.IndexController: void <init>()>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>
<com.favorites.domain.Entitys: java.lang.String toString()>-><org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>
<com.favorites.utils.HtmlUtil: java.lang.String getImge(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CommentController: java.util.List list(java.lang.Long)>-><synthetic.method.CommentRepositoryImpl: java.util.List findByCollectIdOrderByIdDesc(java.lang.Long)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.UserController: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><com.favorites.service.impl.ConfigServiceImpl: void updateConfig(long,java.lang.String,java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<com.favorites.web.NoticeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setCommentTime(java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><org.springframework.ui.ExtendedModelMap: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.util.ArrayList: java.lang.Object get(int)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<com.favorites.service.impl.LookAroundServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String collect(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.NoticeController$$SpringCGLIB: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String index(org.springframework.ui.Model)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$SynchronizedMap: java.util.Set entrySet()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.apache.catalina.connector.Request: javax.servlet.ServletContext getServletContext()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setFavoritesId(java.lang.Long)>
<com.favorites.domain.Favorites: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.comm.aop.LoggerAdvice: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getTitle()>
<com.favorites.service.impl.CollectServiceImpl: void collectLike(java.lang.Long,long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.jsoup.helper.StringUtil: java.lang.String join(java.util.Iterator,java.lang.String)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPopularUser(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><java.util.regex.Matcher: boolean find()>
<com.favorites.web.UserController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.FavoritesServiceImpl getFavoritesServiceImpl()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.CollectRepositoryImpl: java.lang.Long countByFavoritesIdAndTypeAndIsDelete(java.lang.Long,com.favorites.domain.enums.CollectType,com.favorites.domain.enums.IsDelete)>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.service.impl.LookRecordServiceImpl: java.util.List getLookRecords(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String uploadHeadPortrait()>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><synthetic.method.FollowRepositoryImpl: java.util.List findByUserId(java.lang.Long)>
<com.favorites.web.BaseController: long getUserId()>-><java.lang.Long: long longValue()>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void collectLike(java.lang.Long,long)>-><java.lang.String: java.lang.String valueOf(long)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.enums.CollectType: void <init>(java.lang.String,int)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(java.lang.Long,java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setIsDelete(com.favorites.domain.enums.IsDelete)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><synthetic.method.CollectRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.web.CommentController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CollectRepositoryImpl getCollectRepositoryImpl()>
<com.favorites.service.impl.CollectServiceImpl: void collectLike(java.lang.Long,long)>-><com.favorites.domain.Praise: void setCreateTime(java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setCreateTime(java.lang.Long)>
<com.favorites.comm.Const: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String index(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><com.favorites.domain.UserIsFollow: void setProfilePicture(java.lang.String)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setCharset(java.lang.String)>
<org.codehaus.groovy.runtime.InvokerHelper: groovy.lang.Script createScript(java.lang.Class,groovy.lang.Binding)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><java.lang.String: int indexOf(java.lang.String)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><com.favorites.repository.BaseNativeSqlRepository: java.util.List sqlArrayList(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><org.jsoup.nodes.Attribute: java.lang.Object getValue()>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><synthetic.method.LookRecordRepositoryImpl: void updatelastModifyTime(java.lang.Long,java.lang.Long,java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<org.hibernate.tool.schema.Action: org.hibernate.tool.schema.Action interpretJpaSetting(java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(java.lang.String,java.lang.Object[])>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.domain.Favorites: java.lang.Long getId()>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void <init>(com.favorites.domain.view.CollectView)>
<com.favorites.web.LetterController$$SpringCGLIB: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.nodes.Element: org.jsoup.select.Elements select(java.lang.String)>
<org.codehaus.groovy.runtime.typehandling.ShortTypeHandling: java.lang.Character castToChar(java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String newFavorites()>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><synthetic.method.HttpServletResponseImpl: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getImge(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.cache.CacheService: java.lang.String getMap(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.web.CollectController: com.favorites.domain.Collect detail(java.lang.Long)>-><synthetic.method.CollectRepositoryImpl: com.favorites.domain.Collect findById(long)>
<com.favorites.domain.Favorites: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><org.apache.catalina.connector.Request: java.lang.StringBuffer getRequestURL()>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><synthetic.method.UserRepositoryImpl: int setUserName(java.lang.String,java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.comm.Const: void <init>()>
<com.favorites.service.impl.ConfigServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.ConfigRepositoryImpl getConfigRepositoryImpl()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String feedback(org.springframework.ui.Model)>-><com.favorites.web.IndexController: java.lang.String feedback(org.springframework.ui.Model)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setType(com.favorites.domain.enums.CollectType)>
<com.favorites.service.impl.ConfigServiceImpl: com.favorites.domain.Config saveConfig(java.lang.Long,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.codehaus.groovy.runtime.ProxyGeneratorAdapter: void <init>(java.util.Map,java.lang.Class,java.lang.Class[],java.lang.ClassLoader,boolean,java.lang.Class)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.service.impl.ConfigServiceImpl: com.favorites.domain.Config saveConfig(java.lang.Long,java.lang.String)>-><com.favorites.domain.Config: void setLastModifyTime(java.lang.Long)>
<com.favorites.domain.Favorites: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String uploadBackground()>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchOther(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><com.favorites.web.UserController: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>
<org.hibernate.tool.schema.SourceType: org.hibernate.tool.schema.SourceType interpret(java.lang.Object,org.hibernate.tool.schema.SourceType)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<synthetic.method.HttpServletResponseImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.WebConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean filterRegistration()>-><org.springframework.boot.web.servlet.FilterRegistrationBean: void <init>()>
<com.favorites.WebConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean filterRegistration()>-><org.springframework.boot.web.servlet.RegistrationBean: void setOrder(int)>
<com.favorites.cache.CacheService: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setLastModifyTime(java.lang.Long)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostFollowedUser(java.lang.Long)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: void setCreateTime(java.lang.Long)>
<com.favorites.domain.view.CollectSummary: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String importm()>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findByUserName(java.lang.String)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.Base64: byte[] discardNonBase64(byte[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: java.lang.String getnewpwd()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.utils.Des3EncryptionUtil: byte[] encode(byte[],byte[])>-><javax.crypto.Cipher: byte[] doFinal(byte[])>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.CollectRepositoryImpl: java.lang.Long countByFavoritesIdAndTypeAndIsDelete(java.lang.Long,com.favorites.domain.enums.CollectType,com.favorites.domain.enums.IsDelete)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: java.lang.String getPassWord()>
<com.favorites.web.CollectController$$SpringCGLIB: java.lang.String getCollectLogoUrl(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.domain.Config: java.lang.String getModelName()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.hibernate.tool.schema.Action: org.hibernate.tool.schema.Action interpretHbm2ddlSetting(java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><synthetic.method.PraiseRepositoryImpl: java.lang.Long countByCollectId(java.lang.Long)>
<com.favorites.web.NoticeController$$SpringCGLIB: com.favorites.domain.result.ResponseData getNoticeNum()>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.utils.Des3EncryptionUtil: byte[] decode(byte[],byte[])>-><javax.crypto.Cipher: void init(int,java.security.Key)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.repository.BaseNativeSqlRepository: java.util.List sqlObjectList(java.lang.String,java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><java.lang.String: int indexOf(java.lang.String)>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><synthetic.method.FollowRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>-><synthetic.method.FeedbackRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.web.IndexController: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.hibernate.ConnectionReleaseMode: org.hibernate.ConnectionReleaseMode interpret(java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.apache.catalina.connector.Request: java.lang.Object getAttribute(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><synthetic.method.CommentRepositoryImpl: java.lang.Long countByCollectId(java.lang.Long)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteLookRecord(java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.IndexController: java.lang.String tool(org.springframework.ui.Model)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String login()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response changePrivacy(java.lang.Long,com.favorites.domain.enums.CollectType)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: void setUserId(java.lang.Long)>
<com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.CollectController: java.util.Map getPraiseStatus(org.springframework.ui.Model,java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.domain.view.IndexCollectorView: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: java.lang.Long createfavorites(com.favorites.domain.Collect)>-><com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.LetterController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><synthetic.method.HttpServletRequestImpl: java.lang.Object getAttribute(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><synthetic.method.NoticeRepositoryImpl: int updateReadedByUserId(java.lang.String,long,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.utils.Des3EncryptionUtil: byte[] decode(byte[],byte[])>-><javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.favorites.web.BaseController: long getUserId()>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><synthetic.method.PraiseRepositoryImpl: com.favorites.domain.Praise findByUserIdAndCollectId(java.lang.Long,java.lang.Long)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><synthetic.method.FavoritesRepositoryImpl: java.util.List findByUserIdOrderByLastModifyTimeAsc(java.lang.Long)>
<com.favorites.web.BaseController: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><java.lang.String: int indexOf(java.lang.String)>
<java.text.AttributeEntry: java.lang.String toString()>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.service.impl.LookRecordServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.CollectServiceImpl getCollectServiceImpl()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>-><com.favorites.domain.Notice: void setOperId(java.lang.String)>
<com.favorites.domain.result.ExceptionMsg: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><com.favorites.domain.UrlLibrary: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.web.LetterController$$SpringCGLIB: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><com.favorites.web.LetterController: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getTitle()>
<com.favorites.web.UserController$$SpringCGLIB: java.util.List getFollows()>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String importm()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.HomeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.HomeController$$SpringCGLIB: java.lang.String gettype()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(java.lang.Long,java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setFavoritesId(java.lang.Long)>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.ui.ExtendedModelMap: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><synthetic.method.CollectRepositoryImpl: com.favorites.domain.Collect findById(long)>
<com.favorites.web.HomeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.HomeController$$SpringCGLIB: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setLogoUrl(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void collectLike(java.lang.Long,long)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchOther(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(java.lang.Long,java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String feedback(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.domain.Favorites: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void collectLike(java.lang.Long,long)>-><com.favorites.domain.Praise: void <init>()>
<com.favorites.web.CommentController: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setId(java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><com.favorites.domain.Letter: java.lang.Long getId()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: void setProfilePicture(java.lang.String)>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getNewFavorites()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><com.favorites.web.CollectController: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String forgotPassword()>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.NoticeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Comment: void <init>()>
<com.favorites.web.CollectController: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.IndexController: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><org.springframework.ui.ExtendedModelMap: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>
<com.favorites.web.CollectController$$SpringCGLIB: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<com.favorites.web.IndexController: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><javax.servlet.http.Cookie: void setPath(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String export(org.springframework.ui.Model)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: java.util.List getFavorites()>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><com.favorites.domain.Favorites: void setLastModifyTime(java.lang.Long)>
<com.favorites.web.WebJarController: void <init>()>-><org.webjars.WebJarAssetLocator: void <init>()>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setPraiseCount(java.lang.Long)>
<synthetic.method.UserRepositoryImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>
<com.favorites.utils.Base64: void <clinit>()>-><java.lang.String: byte[] getBytes()>
<org.hibernate.boot.internal.SessionFactoryOptionsBuilder: java.util.function.Supplier determineStatelessInterceptor(java.util.Map,org.hibernate.boot.registry.selector.spi.StrategySelector)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.CollectController$$SpringCGLIB: void <init>()>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.lang.StringBuilder exportToHtml(long)>-><synthetic.method.FavoritesRepositoryImpl: com.favorites.domain.Favorites findById(long)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.User: void setBackgroundPicture(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.User: void setEmail(java.lang.String)>
<java.util.Hashtable: java.lang.String toString()>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setRemark(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostFollowedUser(java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><groovy.lang.MissingMethodException: java.lang.String getMessage()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String tool(org.springframework.ui.Model)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.domain.User: void <init>()>
<org.codehaus.groovy.runtime.typehandling.ShortTypeHandling: java.lang.Class castToClass(java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.FeedbackController: void callEntry_synthetic()>-><com.favorites.domain.Feedback: void setLastModifyTime(java.lang.Long)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String uploadBackground()>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><javax.servlet.ServletResponseWrapper: void setCharacterEncoding(java.lang.String)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><synthetic.method.CollectRepositoryImpl: org.springframework.data.domain.Page findExploreView(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><com.favorites.domain.UserIsFollow: void setId(java.lang.Long)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String index(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.HomeController: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void setUrl(java.lang.String)>
<com.favorites.service.impl.FavoritesServiceImpl: void countFavorites(long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.HomeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.HomeController$$SpringCGLIB: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>
<com.favorites.service.impl.LetterServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.LetterRepositoryImpl getLetterRepositoryImpl()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String export(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.CommentController: java.util.List convertComment(java.util.List)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findById(long)>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getRemark()>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String collect(org.springframework.ui.Model)>
<com.favorites.web.UserController$$SpringCGLIB: java.util.List getFavorites()>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.FavoritesController$$SpringCGLIB: java.util.List getFavorites(java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.springframework.core.io.ClassPathResource: void <init>(java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findByUserName(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><synthetic.method.CollectRepositoryImpl: org.springframework.data.domain.Page findViewByUserIdAndFollows(java.lang.Long,java.util.List,org.springframework.data.domain.Pageable)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String codeToString(java.lang.String)>-><java.lang.String: void <init>(byte[])>
<com.favorites.domain.result.Response: void <init>(com.favorites.domain.result.ExceptionMsg)>-><java.lang.Object: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getTitle()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.Long getId()>
<com.favorites.service.impl.CollectServiceImpl: void collectLike(java.lang.Long,long)>-><synthetic.method.PraiseRepositoryImpl: java.lang.Object save(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getUserId(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<com.favorites.web.HomeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.HomeController$$SpringCGLIB: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.Config getConfig()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.lang.StringBuilder exportHtml(java.lang.String,java.lang.StringBuilder)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>-><java.lang.String: java.lang.String valueOf(long)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void <init>(com.favorites.domain.view.CollectView)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<synthetic.method.FeedbackRepositoryImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.domain.Follow: void setLastModifyTime(java.lang.Long)>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.codehaus.groovy.runtime.InvokerInvocationException: java.lang.String getMessage()>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.FeedbackController: void <init>()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.Config getConfig()>
<com.favorites.service.impl.ConfigServiceImpl: com.favorites.domain.Config saveConfig(java.lang.Long,java.lang.String)>-><com.favorites.domain.Config: void setDefaultCollectType(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.User: void setId(java.lang.Long)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: java.util.List resolveConstructorArguments(java.lang.Object[],int,int)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.service.impl.LookRecordServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.PraiseRepositoryImpl getPraiseRepositoryImpl()>
<com.favorites.utils.HtmlUtil: java.lang.StringBuilder exportHtml(java.lang.String,java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><java.util.ArrayList: void <init>()>
<com.favorites.web.IndexController: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><javax.servlet.http.Cookie: void setMaxAge(int)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><synthetic.method.CollectRepositoryImpl: void deleteById(java.lang.Long)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List searchOther(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setPraiseCount(java.lang.Long)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: void setPassWord(java.lang.String)>
<com.favorites.service.impl.FeedbackServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.FeedbackRepositoryImpl getFeedbackRepositoryImpl()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String tool(org.springframework.ui.Model)>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.PraiseRepositoryImpl getPraiseRepositoryImpl()>
<com.favorites.service.impl.LookAroundServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CommentRepositoryImpl getCommentRepositoryImpl()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<com.favorites.web.NoticeController: com.favorites.domain.result.ResponseData getNoticeNum()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String uploadHeadPortrait()>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.lang.String gettype()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><org.jsoup.nodes.Document: org.jsoup.nodes.Element head()>
<com.favorites.service.impl.CollectServiceImpl: java.lang.Long createfavorites(com.favorites.domain.Collect)>-><com.favorites.domain.Favorites: java.lang.Long getId()>
<com.favorites.web.CollectController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.cache.CacheService getCacheService()>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.springframework.http.ResponseEntity: void <init>(org.springframework.http.HttpStatus)>
<com.favorites.web.FavoritesController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response addFavorites(java.lang.String)>
<com.favorites.web.LookRecordController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.service.impl.LetterServiceImpl: java.util.List findLetter(java.lang.Long,org.springframework.data.domain.Pageable)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setType(com.favorites.domain.enums.CollectType)>
<com.favorites.service.impl.NoticeServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.comm.Const: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><com.favorites.comm.filter.SecurityFilter: boolean containsSuffix(java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.apache.catalina.connector.Request: javax.servlet.http.Cookie[] getCookies()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.Jsoup: org.jsoup.nodes.Document parse(java.io.InputStream,java.lang.String,java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.util.ArrayList: int size()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.HtmlUtil: java.lang.StringBuilder exportHtml(java.lang.String,java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String getemail()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.service.impl.CollectServiceImpl: boolean checkCollect(com.favorites.domain.Collect)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.CollectController: java.util.Map getPraiseStatus(org.springframework.ui.Model,java.lang.Long)>-><synthetic.method.PraiseRepositoryImpl: java.lang.Long countByCollectId(java.lang.Long)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.service.impl.ConfigServiceImpl: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String mobile()>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String newFavorites()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.web.CollectController: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.CommentController: void callEntry_synthetic()>-><com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.favorites.web.FavoritesController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.FavoritesServiceImpl getFavoritesServiceImpl()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.service.impl.FavoritesServiceImpl: void <init>()>
<com.favorites.web.NoticeController$$SpringCGLIB: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.web.NoticeController getNoticeController()>
<com.favorites.schedule.ScheduledTasks: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>-><synthetic.method.NoticeRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String login()>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.HomeController: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><synthetic.method.CommentRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String login()>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.repository.impl.CollectorRepositoryImpl: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: java.util.List getFollows()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><synthetic.method.FavoritesRepositoryImpl: com.favorites.domain.Favorites findById(long)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPopularUser(java.lang.String)>-><com.favorites.repository.BaseNativeSqlRepository: java.util.List sqlArrayList(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.io.FileInputStream: void <init>(java.io.File)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void <init>(com.favorites.domain.view.CollectView)>
<com.favorites.web.UserController: com.favorites.domain.Config getConfig()>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.NoticeController$$SpringCGLIB: void callEntry_synthetic()>
<com.favorites.service.impl.FavoritesServiceImpl: void countFavorites(long)>-><synthetic.method.FavoritesRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><org.jsoup.nodes.Document: java.nio.charset.Charset charset()>
<com.favorites.web.CollectController: java.lang.String getCollectLogoUrl(java.lang.String)>-><com.favorites.cache.CacheService: java.lang.String getMap(java.lang.String)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: java.lang.Long getReplyUserId()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><synthetic.method.CommentRepositoryImpl: java.lang.Long countByCollectId(java.lang.Long)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String home(org.springframework.ui.Model)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.utils.MessageUtil: java.lang.String getMessage(java.lang.String,java.lang.String[])>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><synthetic.method.CollectRepositoryImpl: org.springframework.data.domain.Page findViewByFavoritesId(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchMy(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.NoticeServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.UserRepositoryImpl getUserRepositoryImpl()>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String mobile()>
<register-finalize <com.favorites.domain.enums.LetterType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.domain.Collect: void setType(com.favorites.domain.enums.CollectType)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getLogoUrl()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.domain.Collect: void setUrl(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String home(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><com.favorites.domain.Letter: void setReceiveUserId(java.lang.Long)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.springframework.mail.javamail.MimeMessageHelper: void setTo(java.lang.String)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.WebJarController: void callEntry_synthetic()>-><com.favorites.web.WebJarController: java.lang.String getwebjar()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String export(org.springframework.ui.Model)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getDescription()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String mobile()>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.domain.Config: java.lang.String getCollectTypeName()>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><org.springframework.mock.web.MockMultipartFile: java.io.InputStream getInputStream()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String home(org.springframework.ui.Model)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>
<com.favorites.web.LetterController$$SpringCGLIB: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>
<com.favorites.web.UserController: com.favorites.domain.Config getConfig()>-><com.favorites.domain.Config: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.io.FileOutputStream: void <init>(java.io.File)>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: com.favorites.domain.enums.CollectType getType()>
<com.favorites.web.CollectController$$SpringCGLIB: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<synthetic.method.LetterRepositoryImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<com.favorites.comm.filter.SecurityFilter: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setCategory(java.lang.String)>
<com.favorites.service.impl.FavoritesServiceImpl: void countFavorites(long)>-><synthetic.method.FavoritesRepositoryImpl: com.favorites.domain.Favorites findById(long)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.Long: long longValue()>
<com.favorites.web.CommentController: java.util.List convertComment(java.util.List)>-><com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: java.lang.StringBuilder exportToHtml(long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.service.impl.ConfigServiceImpl: com.favorites.domain.Config saveConfig(java.lang.Long,java.lang.String)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.lang.Integer: java.lang.String toHexString(int)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.LetterServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getUserId(java.lang.String)>-><java.lang.String: int indexOf(java.lang.String)>
<com.favorites.domain.Comment: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.IndexController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.UserRepositoryImpl getUserRepositoryImpl()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: java.lang.String getUserName()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.WebConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean filterRegistration()>-><com.favorites.comm.filter.SecurityFilter: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<synthetic.method.PraiseRepositoryImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String regist()>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><java.lang.String: java.lang.String trim()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><synthetic.method.FavoritesRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.utils.HtmlUtil: java.lang.String getImge(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.User: void setIntroduction(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.io.FileOutputStream: void close()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.nodes.Element: org.jsoup.select.Elements children()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.Config getConfig()>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.ConfigServiceImpl: void updateConfig(long,java.lang.String,java.lang.String)>-><synthetic.method.ConfigRepositoryImpl: int updateModelTypeById(java.lang.Long,java.lang.String,java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.LetterController: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.LetterServiceImpl: java.util.List findLetter(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.service.impl.FavoritesServiceImpl: void countFavorites(long)>-><synthetic.method.CollectRepositoryImpl: java.lang.Long countByFavoritesIdAndIsDelete(java.lang.Long,com.favorites.domain.enums.IsDelete)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String tool(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.NoticeController: com.favorites.domain.result.ResponseData getNoticeNum()>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><com.favorites.utils.DateUtils: long getLastMonthTime()>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: long getUserId()>
<com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>-><com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>
<com.favorites.service.impl.NoticeServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.PraiseRepositoryImpl getPraiseRepositoryImpl()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Enum: java.lang.String toString()>
<com.favorites.service.impl.LookRecordServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.LookRecordRepositoryImpl getLookRecordRepositoryImpl()>
<com.favorites.service.impl.CollectServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.UserRepositoryImpl getUserRepositoryImpl()>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.domain.Follow: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.FavoritesController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.FavoritesController$$SpringCGLIB: java.util.List getFavorites(java.lang.Long)>
<com.favorites.utils.HtmlUtil: java.lang.String matchCharset(java.lang.String)>-><java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.util.ArrayList: int size()>
<com.favorites.service.impl.CollectServiceImpl: boolean checkCollect(com.favorites.domain.Collect)>-><synthetic.method.CollectRepositoryImpl: java.util.List findByFavoritesIdAndUrlAndUserIdAndIsDelete(java.lang.Long,java.lang.String,java.lang.Long,com.favorites.domain.enums.IsDelete)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.IndexController$$SpringCGLIB: void <init>()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void setId(java.lang.Long)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>
<com.favorites.cache.CacheService: java.lang.String getMap(java.lang.String)>-><synthetic.method.UrlLibraryRepositoryImpl: java.util.List findAll()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(java.lang.Long,java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String importm()>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.LetterController$$SpringCGLIB: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String collect(org.springframework.ui.Model)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><com.favorites.domain.Favorites: void setCreateTime(java.lang.Long)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.FollowController$$SpringCGLIB: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.domain.Collect: void setUserId(java.lang.Long)>
<com.favorites.web.NoticeController: com.favorites.domain.result.ResponseData getNoticeNum()>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.codehaus.groovy.runtime.metaclass.MethodSelectionException: java.lang.String getMessage()>
<com.favorites.service.impl.CollectServiceImpl: void collectLike(java.lang.Long,long)>-><com.favorites.domain.Praise: java.lang.Long getId()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><groovyjarjarantlr.NoViableAltForCharException: java.lang.String getMessage()>
<com.favorites.web.IndexController: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><javax.servlet.http.Cookie: void <init>(java.lang.String,java.lang.String)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.BaseController: void callEntry_synthetic()>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>-><com.favorites.comm.aop.LoggerAdvice: java.lang.String parseParames(java.lang.Object[])>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><synthetic.method.FavoritesRepositoryImpl: void reduceCountById(java.lang.Long,java.lang.Long)>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String encode(java.lang.String,java.lang.String)>-><com.favorites.utils.Base64: byte[] encode(byte[])>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: java.lang.String getintroduction()>
<com.favorites.domain.view.LetterSummary: void <init>(com.favorites.domain.view.LetterView)>-><com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>
<com.favorites.service.impl.ConfigServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.jsoup.helper.HttpConnection: org.jsoup.Connection userAgent(java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String importm()>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.ConfigServiceImpl: void updateConfig(long,java.lang.String,java.lang.String)>-><synthetic.method.ConfigRepositoryImpl: int updateCollectTypeById(java.lang.Long,java.lang.String,java.lang.Long)>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><com.favorites.domain.Letter: java.lang.String getSendType()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><javax.servlet.http.Cookie: java.lang.String getName()>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.service.impl.CollectServiceImpl: java.lang.Long createfavorites(com.favorites.domain.Collect)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><synthetic.method.CollectRepositoryImpl: org.springframework.data.domain.Page findExploreViewByType(org.springframework.data.domain.Pageable)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String index(org.springframework.ui.Model)>-><com.favorites.web.IndexController: java.lang.String index(org.springframework.ui.Model)>
<com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>-><java.util.Date: long getTime()>
<com.favorites.web.UserController: java.util.List getFollows()>-><synthetic.method.FollowRepositoryImpl: java.util.List findByUserId(java.lang.Long)>
<groovy.lang.MetaClassImpl: void setProperties(java.lang.Object,java.util.Map)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.String getText()>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><synthetic.method.CollectRepositoryImpl: org.springframework.data.domain.Page findViewByUserIdAndIsDelete(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><com.favorites.domain.Favorites: void setPublicCount(java.lang.Long)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteLookRecord(java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String home(org.springframework.ui.Model)>-><com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findById(long)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: java.lang.Long getId()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response delete(java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.CollectController$$SpringCGLIB: java.lang.String getCollectLogoUrl(java.lang.String)>-><com.favorites.web.CollectController: java.lang.String getCollectLogoUrl(java.lang.String)>
<com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>-><java.util.Date: void <init>()>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Integer: int intValue()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><groovyjarjarantlr.MismatchedTokenException: java.lang.String getMessage()>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.jsoup.Jsoup: org.jsoup.Connection connect(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.sql.Timestamp: void <init>(long)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>
<com.favorites.utils.Base64: byte[] decode(byte[])>-><com.favorites.utils.Base64: byte[] decodeBase64(byte[])>
<com.favorites.web.BaseController: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String decode(java.lang.String,java.lang.String)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: java.lang.String getuserName()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><javax.servlet.http.HttpServletResponseWrapper: void addCookie(javax.servlet.http.Cookie)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.LetterController$$SpringCGLIB: void <init>()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCommentedUser(java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><org.apache.catalina.connector.Request: javax.servlet.http.HttpSession getSession()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.schedule.ScheduledTasks: void <init>()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.web.CollectController$$SpringCGLIB: java.lang.String getCollectLogoUrl(java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.LetterController$$SpringCGLIB: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><synthetic.method.NoticeRepositoryImpl: java.lang.Long countPraiseByUserIdAndReaded(java.lang.Long,java.lang.String)>
<com.favorites.web.CommentController: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setUserName(java.lang.String)>
<com.favorites.WebConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean filterRegistration()>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void addInitParameter(java.lang.String,java.lang.String)>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response saveLookRecord(java.lang.Long)>-><com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><synthetic.method.FavoritesRepositoryImpl: void reduceCountById(java.lang.Long,java.lang.Long)>
<com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.String: java.lang.String substring(int)>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response delete(java.lang.Long)>-><com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><org.apache.catalina.connector.Request: java.lang.String getQueryString()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: void setReplyUserId(java.lang.Long)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setPraise(boolean)>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String decode(java.lang.String,java.lang.String)>-><java.lang.String: void <init>(byte[],java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String decode(java.lang.String,java.lang.String)>-><com.favorites.utils.Des3EncryptionUtil: byte[] decode(byte[],byte[])>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String codeToString(java.lang.String)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Notice: void setOperId(java.lang.String)>
<register-finalize <com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.web.FeedbackController: void <init>()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setCollectTime(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><synthetic.method.UserRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$EmptyMap: java.util.Set entrySet()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><synthetic.method.CollectRepositoryImpl: org.springframework.data.domain.Page findViewByUserId(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.domain.view.IndexCollectorView: void setMostFollowedUser(com.favorites.domain.User)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.HomeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><synthetic.method.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.String getText()>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String forgotPassword()>-><com.favorites.web.IndexController: java.lang.String forgotPassword()>
<com.zaxxer.hikari.util.DriverDataSource: void <init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Vector$Itr: java.lang.Object next()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String tool(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.jsoup.helper.StringUtil: java.lang.String join(java.util.Iterator,java.lang.String)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String tool(org.springframework.ui.Model)>-><com.favorites.web.IndexController: java.lang.String tool(org.springframework.ui.Model)>
<com.favorites.service.impl.CollectServiceImpl: java.lang.StringBuilder exportToHtml(long)>-><synthetic.method.CollectRepositoryImpl: java.util.List findByFavoritesIdAndIsDelete(java.lang.Long,com.favorites.domain.enums.IsDelete)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.cache.CacheService: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.LetterController$$SpringCGLIB: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.service.impl.FavoritesServiceImpl: void countFavorites(long)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.domain.Collect: java.lang.String getTitle()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setCreateTime(java.lang.Long)>
<com.favorites.web.UserController: java.util.List getFavorites()>-><synthetic.method.FavoritesRepositoryImpl: java.util.List findByUserIdOrderByLastModifyTimeDesc(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.web.LetterController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Letter: void setId(java.lang.Long)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.FavoritesController$$SpringCGLIB: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.Config getConfig()>-><com.favorites.web.UserController: com.favorites.domain.Config getConfig()>
<com.favorites.service.impl.CollectServiceImpl: void collectLike(java.lang.Long,long)>-><synthetic.method.CollectRepositoryImpl: com.favorites.domain.Collect findById(long)>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findByUserName(java.lang.String)>
<com.favorites.web.CollectController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.FavoritesServiceImpl getFavoritesServiceImpl()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.IndexController: java.lang.String tool(org.springframework.ui.Model)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<synthetic.method.FollowRepositoryImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.internal.util.config.ConfigurationHelper: java.lang.String getString(java.lang.String,java.util.Map)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.io.File: void <init>(java.io.File,java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setIsDelete(com.favorites.domain.enums.IsDelete)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.TreeMap: java.util.Set entrySet()>
<com.favorites.web.CollectController: java.util.Map getPraiseStatus(org.springframework.ui.Model,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: java.lang.StringBuilder exportToHtml(long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.service.impl.CollectServiceImpl: boolean checkCollect(com.favorites.domain.Collect)>-><java.lang.Long: java.lang.Long valueOf(long)>
<java.util.Hashtable: java.lang.String toString()>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>-><com.favorites.domain.Praise: void setUserId(java.lang.Long)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPopularUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><synthetic.method.CollectRepositoryImpl: org.springframework.data.domain.Page findExploreView(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int compareToWithEqualityCheck(java.lang.Object,java.lang.Object,boolean)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: java.lang.String getsid()>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.CollectServiceImpl: void collectLike(java.lang.Long,long)>-><com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getRemark()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(java.lang.Long,java.lang.String)>-><com.favorites.domain.Favorites: void setCreateTime(java.lang.Long)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.apache.catalina.connector.Request: java.lang.String getRequestURI()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<com.favorites.web.CollectController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.util.HashMap: int size()>
<com.favorites.web.CollectController$$SpringCGLIB: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchOther(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.util.ArrayList: int size()>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>
<com.favorites.comm.filter.SecurityFilter: boolean containsSuffix(java.lang.String)>-><java.lang.String: boolean endsWith(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.web.NoticeController: com.favorites.domain.result.ResponseData getNoticeNum()>-><java.util.HashMap: void <init>()>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String regist()>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.LetterController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.LetterController$$SpringCGLIB: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>
<com.favorites.service.impl.CollectServiceImpl: boolean checkCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getUrl()>
<com.favorites.web.NoticeController$$SpringCGLIB: void <init>()>-><com.favorites.web.NoticeController: void <init>()>
<com.favorites.web.FollowController$$SpringCGLIB: void <init>()>-><com.favorites.web.FollowController: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findByEmail(java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String index(org.springframework.ui.Model)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.HomeController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.LookRecordServiceImpl getLookRecordServiceImpl()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><synthetic.method.FavoritesRepositoryImpl: java.util.List findByUserIdOrderByLastModifyTimeDesc(java.lang.Long)>
<com.favorites.web.CollectController: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String decode(java.lang.String,java.lang.String)>-><com.favorites.utils.Base64: byte[] decode(byte[])>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.WebConfiguration: void <init>()>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNoneBlank(java.lang.CharSequence[])>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCommentedUser(java.lang.String)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<org.hibernate.internal.util.config.ConfigurationHelper: java.lang.String getString(java.lang.String,java.util.Map)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><com.favorites.domain.Letter: void setPid(java.lang.Long)>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(java.lang.Long,java.lang.String)>-><com.favorites.domain.Favorites: void setPublicCount(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getUrl()>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String export(org.springframework.ui.Model)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.springframework.mail.javamail.JavaMailSenderImpl: javax.mail.internet.MimeMessage createMimeMessage()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String login()>-><com.favorites.web.IndexController: java.lang.String login()>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteAll()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>
<com.favorites.cache.CacheService: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.UrlLibraryRepositoryImpl getUrlLibraryRepositoryImpl()>
<com.favorites.web.IndexController$$SpringCGLIB: void <init>()>-><com.favorites.web.IndexController: void <init>()>
<com.favorites.web.UserController: java.util.List getFollows()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.domain.Praise: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String uploadBackground()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.BaseController: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: java.lang.String getnewPassword()>
<com.favorites.domain.Notice: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setId(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: com.favorites.domain.enums.CollectType getType()>
<org.hibernate.MultiTenancyStrategy: org.hibernate.MultiTenancyStrategy determineMultiTenancyStrategy(java.util.Map)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.service.impl.FeedbackServiceImpl: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setUserName(java.lang.String)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCollectUser()>-><com.favorites.repository.BaseNativeSqlRepository: java.util.List sqlArrayList(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>
<com.favorites.web.FollowController$$SpringCGLIB: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.codehaus.groovy.runtime.InvokerHelper: java.lang.String format(java.lang.Object,boolean,int,boolean)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.LetterController$$SpringCGLIB: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.ConfigServiceImpl: void updateConfig(long,java.lang.String,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.CollectController$$SpringCGLIB: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.service.impl.CollectorServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setDescription(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.io.FileOutputStream: void write(byte[],int,int)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.lang.String gettitle()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: boolean checkCollect(com.favorites.domain.Collect)>-><synthetic.method.CollectRepositoryImpl: com.favorites.domain.Collect findById(long)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.springframework.mail.MailSendException: java.lang.String getMessage()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.lang.String getstructure()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>
<com.favorites.web.FavoritesController$$SpringCGLIB: java.util.List getFavorites(java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.LetterController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Letter: void setSendType(java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.Long: long longValue()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String importm()>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.service.impl.CollectServiceImpl: java.lang.StringBuilder exportToHtml(long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCommentedUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.NoticeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setProfilePicture(java.lang.String)>
<com.favorites.web.WebJarController: void callEntry_synthetic()>-><synthetic.method.HttpServletRequestImpl: void <init>()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteAll()>-><com.favorites.service.impl.LookRecordServiceImpl: void deleteLookRecordByUserID(java.lang.Long)>
<com.favorites.comm.aop.LoggerAdvice: java.lang.String parseParames(java.lang.Object[])>-><java.lang.StringBuffer: java.lang.String toString()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.net.URL: java.io.InputStream openStream()>
<com.favorites.web.FavoritesController$$SpringCGLIB: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.web.FavoritesController getFavoritesController()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List scrollFiveCollect()>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.NoticeServiceImpl: java.util.List getNoticeCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><com.favorites.service.impl.FavoritesServiceImpl: void countFavorites(long)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<com.favorites.web.HomeController$$SpringCGLIB: void <init>()>-><com.favorites.web.HomeController: void <init>()>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><java.net.URL: java.lang.String getAuthority()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.springframework.mail.javamail.MimeMessageHelper: void setFrom(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><synthetic.method.PraiseRepositoryImpl: com.favorites.domain.Praise findByUserIdAndCollectId(java.lang.Long,java.lang.Long)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: java.util.Map getPraiseStatus(org.springframework.ui.Model,java.lang.Long)>-><synthetic.method.PraiseRepositoryImpl: com.favorites.domain.Praise findByUserIdAndCollectId(java.lang.Long,java.lang.Long)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response saveLookRecord(java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.service.impl.CollectServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.FavoritesServiceImpl getFavoritesServiceImpl()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: void setProperty(java.lang.String,java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.String: int length()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Enum: java.lang.String toString()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.NoticeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setUserName(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void setTitle(java.lang.String)>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String decode(java.lang.String,java.lang.String)>-><java.lang.Throwable: void printStackTrace()>
<com.favorites.comm.aop.LoggerAdvice: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.web.IndexController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>-><com.favorites.domain.Notice: void setCollectId(java.lang.String)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>
<com.favorites.service.impl.FavoritesServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.cache.CacheService: java.lang.String getMap(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<com.favorites.web.FeedbackController: void callEntry_synthetic()>-><com.favorites.domain.Feedback: void setId(java.lang.Long)>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.String: int length()>
<com.favorites.comm.filter.SecurityFilter: boolean containsKey(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPraisedUser(java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><java.util.ArrayList: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><sun.misc.SoftCache$Entry: java.lang.Object getValue()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>
<com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.service.impl.FavoritesServiceImpl: void countFavorites(long)>
<com.favorites.web.HomeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getkey()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.FavoritesRepositoryImpl: com.favorites.domain.Favorites findById(long)>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>
<com.favorites.service.impl.NoticeServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.NoticeRepositoryImpl getNoticeRepositoryImpl()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findById(long)>
<com.favorites.web.FavoritesController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.FavoritesController$$SpringCGLIB: java.lang.String getname()>
<com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>-><synthetic.method.PraiseRepositoryImpl: void deleteById(java.lang.Long)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.service.impl.LetterServiceImpl: void <init>()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><com.favorites.domain.Favorites: void setCount(java.lang.Long)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.util.UUID: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CollectRepositoryImpl getCollectRepositoryImpl()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.domain.UrlLibrary: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String regist()>-><com.favorites.web.IndexController: java.lang.String regist()>
<com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>-><com.favorites.domain.Feedback: void setCreateTime(java.lang.Long)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.Long getId()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchOther(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><synthetic.method.CollectRepositoryImpl: org.springframework.data.domain.Page searchOtherByKey(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>
<com.favorites.service.impl.ConfigServiceImpl: com.favorites.domain.Config saveConfig(java.lang.Long,java.lang.String)>-><com.favorites.domain.Config: void setCreateTime(java.lang.Long)>
<com.favorites.web.UserController: java.util.List getFavorites()>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.Config getConfig()>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.utils.DateUtils: long getDayBegin(long)>-><java.text.SimpleDateFormat: void <init>(java.lang.String)>
<synthetic.method.ProceedingJoinPointImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String regist()>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.apache.catalina.connector.Request: javax.servlet.http.HttpSession getSession()>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><synthetic.method.CommentRepositoryImpl: java.lang.Long countByCollectId(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.util.Set entrySet()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><synthetic.method.HttpServletResponseImpl: void setHeader(java.lang.String,java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.domain.view.IndexCollectorView: void setMostCommentedUser(com.favorites.domain.User)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><java.lang.String: int length()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String forgotPassword()>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.IndexController: java.lang.String feedback(org.springframework.ui.Model)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findById(long)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.codehaus.groovy.reflection.stdclasses.StringCachedClass: java.lang.Object coerceArgument(java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.web.HomeController: void <init>()>
<com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>-><com.favorites.domain.Feedback: void setLastModifyTime(java.lang.Long)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><synthetic.method.CollectRepositoryImpl: void deleteByFavoritesId(java.lang.Long)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.web.NoticeController: void <init>()>
<com.favorites.web.UserController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.FollowRepositoryImpl getFollowRepositoryImpl()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(java.lang.Long,java.lang.String)>-><com.favorites.domain.Favorites: void setCount(java.lang.Long)>
<com.favorites.web.IndexController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.ConfigRepositoryImpl getConfigRepositoryImpl()>
<com.favorites.web.UserController$$SpringCGLIB: java.util.List getFavorites()>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String regist()>
<com.favorites.comm.aop.LoggerAdvice: java.lang.String parseParames(java.lang.Object[])>-><java.lang.StringBuffer: void <init>(java.lang.String)>
<com.favorites.web.HomeController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.NoticeRepositoryImpl getNoticeRepositoryImpl()>
<com.favorites.service.impl.FavoritesServiceImpl: void countFavorites(long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPopularUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.FavoritesController$$SpringCGLIB: void <init>()>-><com.favorites.web.FavoritesController: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<register-finalize <com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.comm.aop.LoggerAdvice: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<com.favorites.web.NoticeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.NoticeController$$SpringCGLIB: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><synthetic.method.NoticeRepositoryImpl: int updateReadedByUserId(java.lang.String,long,java.lang.String)>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.ConfigServiceImpl: void updateConfig(long,java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setLogoUrl(java.lang.String)>
<org.hibernate.boot.internal.SessionFactoryOptionsBuilder: java.util.function.Supplier determineStatelessInterceptor(java.util.Map,org.hibernate.boot.registry.selector.spi.StrategySelector)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CommentController: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setCreateTime(java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List searchMy(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><com.favorites.web.BaseController: long getUserId()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.CollectRepositoryImpl: java.lang.Long countByUserIdAndTypeAndIsDelete(java.lang.Long,com.favorites.domain.enums.CollectType,com.favorites.domain.enums.IsDelete)>
<com.favorites.schedule.ScheduledTasks: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.FavoritesRepositoryImpl getFavoritesRepositoryImpl()>
<synthetic.method.HttpServletRequestImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: boolean checkCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: long getUserId()>
<com.favorites.web.CollectController$$SpringCGLIB: java.lang.String getCollectLogoUrl(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>-><synthetic.method.PraiseRepositoryImpl: com.favorites.domain.Praise findByUserIdAndCollectId(java.lang.Long,java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.domain.Favorites: java.lang.Long getId()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String login()>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: void applyPropertyToBeanDefinition(java.lang.String,java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>
<com.favorites.service.impl.CollectorServiceImpl: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Hashtable: java.util.Set entrySet()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><com.favorites.web.CollectController: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<org.codehaus.groovy.classgen.asm.OperandStack: void newInstance(groovyjarjarasm.asm.MethodVisitor,java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findById(long)>
<com.favorites.utils.MessageUtil: java.lang.String getMessage(java.lang.String,java.lang.String[])>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCollectUser()>
<register-finalize <com.favorites.domain.result.ExceptionMsg: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.LetterController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Letter: void setCreateTime(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.FollowRepositoryImpl: java.lang.Integer countByUserIdAndFollowIdAndStatus(java.lang.Long,java.lang.Long,com.favorites.domain.enums.FollowStatus)>
<com.favorites.web.IndexController: java.lang.String tool(org.springframework.ui.Model)>-><org.springframework.ui.ExtendedModelMap: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: void setLastModifyTime(java.lang.Long)>
<com.favorites.web.LookRecordController: void callEntry_synthetic()>-><com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteAll()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.util.Base64: java.util.Base64$Decoder getDecoder()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String uploadHeadPortrait()>-><com.favorites.web.IndexController: java.lang.String uploadHeadPortrait()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void <init>()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><java.lang.String: int indexOf(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><java.lang.String: java.lang.String toUpperCase()>
<com.favorites.web.BaseController: javax.servlet.http.HttpServletRequest getRequest()>-><org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findById(long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setDescription(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setLastModifyTime(java.lang.Long)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String importm()>-><com.favorites.web.IndexController: java.lang.String importm()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List getNoticeCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable)>-><synthetic.method.NoticeRepositoryImpl: org.springframework.data.domain.Page findViewByUserIdAndType(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setCommentCount(java.lang.Long)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.util.HashMap: boolean isEmpty()>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><com.favorites.domain.UserIsFollow: void <init>()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String encode(java.lang.String,java.lang.String)>-><java.lang.String: void <init>(byte[],java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><com.favorites.domain.Letter: void setContent(java.lang.String)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><org.springframework.boot.SpringApplication: org.springframework.context.ConfigurableApplicationContext run(java.lang.Class,java.lang.String[])>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.FollowRepositoryImpl: java.lang.Integer countByUserIdAndStatus(java.lang.Long,com.favorites.domain.enums.FollowStatus)>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><com.favorites.domain.Favorites: void setName(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.LetterController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Letter: void setSendUserId(java.lang.Long)>
<com.favorites.service.impl.FavoritesServiceImpl: void countFavorites(long)>-><synthetic.method.CollectRepositoryImpl: java.lang.Long countByFavoritesIdAndTypeAndIsDelete(java.lang.Long,com.favorites.domain.enums.CollectType,com.favorites.domain.enums.IsDelete)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><synthetic.method.PraiseRepositoryImpl: java.lang.Long countByCollectId(java.lang.Long)>
<com.favorites.repository.BaseNativeSqlRepository: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.domain.Follow: void setStatus(com.favorites.domain.enums.FollowStatus)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: java.lang.Long getCollectId()>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.web.IndexController: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><synthetic.method.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.FeedbackController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String matchCharset(java.lang.String)>-><java.util.regex.Matcher: boolean find()>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.User: void setUserName(java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><org.apache.catalina.connector.Request: java.lang.String getServletPath()>
<com.favorites.web.IndexController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.FollowRepositoryImpl getFollowRepositoryImpl()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.util.UUID: java.util.UUID randomUUID()>
<com.favorites.service.impl.NoticeServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CommentRepositoryImpl getCommentRepositoryImpl()>
<synthetic.method.ConfigRepositoryImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><org.apache.catalina.connector.Request: java.lang.String getContextPath()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(java.lang.Long,java.lang.String)>-><synthetic.method.FavoritesRepositoryImpl: java.lang.Object save(java.lang.Object)>
<org.hibernate.resource.jdbc.spi.PhysicalConnectionHandlingMode: org.hibernate.resource.jdbc.spi.PhysicalConnectionHandlingMode interpret(java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><synthetic.method.CollectRepositoryImpl: com.favorites.domain.Collect findByIdAndUserId(java.lang.Long,java.lang.Long)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setProfilePicture(java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String newFavorites()>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.WebConfiguration: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: java.util.List getFollows()>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String uploadHeadPortrait()>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><com.favorites.domain.LookRecord: void setLastModifyTime(java.lang.Long)>
<com.favorites.web.IndexController: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(java.lang.Long,java.lang.String)>-><com.favorites.domain.Favorites: void setLastModifyTime(java.lang.Long)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.domain.Collect: void setLastModifyTime(java.lang.Long)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><synthetic.method.ConfigRepositoryImpl: int updateFavoritesById(java.lang.Long,java.lang.String,java.lang.Long)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.util.ArrayList: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String home(org.springframework.ui.Model)>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.nodes.Element: java.lang.String nodeName()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><org.jsoup.nodes.Element: org.jsoup.select.Elements select(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>-><com.favorites.domain.Praise: void setCollectId(java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<org.hibernate.boot.registry.selector.internal.StrategySelectorImpl: java.lang.Object resolveStrategy(java.lang.Class,java.lang.Object,java.util.concurrent.Callable,org.hibernate.boot.registry.selector.spi.StrategyCreator)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findByEmail(java.lang.String)>
<com.favorites.web.FollowController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.web.UserController: java.util.List getFavorites()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.NoticeController$$SpringCGLIB: com.favorites.domain.result.ResponseData getNoticeNum()>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><javax.servlet.http.Cookie: void setPath(java.lang.String)>
<com.favorites.web.LetterController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Letter: void setType(com.favorites.domain.enums.LetterType)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.FeedbackController: void callEntry_synthetic()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: java.lang.Long createfavorites(com.favorites.domain.Collect)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.domain.view.IndexCollectorView: void setMostPraisedUser(com.favorites.domain.User)>
<com.favorites.web.UserController: com.favorites.domain.Config getConfig()>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><java.lang.String: int indexOf(java.lang.String)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springframework.web.context.support.WebApplicationContextUtils: org.springframework.web.context.WebApplicationContext getRequiredWebApplicationContext(javax.servlet.ServletContext)>
<com.favorites.web.CommentController: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setReplyUserName(java.lang.String)>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<register-finalize <com.favorites.domain.enums.IsDelete: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.SubList$1: boolean hasNext()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPraisedUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setCollectTime(java.lang.String)>
<com.favorites.utils.Des3EncryptionUtil: byte[] decode(byte[],byte[])>-><javax.crypto.Cipher: byte[] doFinal(byte[])>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.domain.Favorites: void <init>()>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Integer: int intValue()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.FavoritesServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.FavoritesRepositoryImpl getFavoritesRepositoryImpl()>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.User: void setCreateTime(java.lang.Long)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><ch.qos.logback.classic.Logger: void info(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.LetterController$$SpringCGLIB: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.comm.exception.GlobalExceptionHandler: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><com.favorites.utils.MessageUtil: java.lang.String getMessage(java.lang.String,java.lang.String[])>
<com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>-><com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.favorites.service.impl.LookAroundServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.PraiseRepositoryImpl getPraiseRepositoryImpl()>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><synthetic.method.LookRecordRepositoryImpl: java.lang.Integer countByUserIdAndCollectId(java.lang.Long,java.lang.Long)>
<com.favorites.web.IndexController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.LookAroundServiceImpl getLookAroundServiceImpl()>
<com.favorites.service.impl.LookAroundServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CollectRepositoryImpl getCollectRepositoryImpl()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><com.favorites.domain.UserIsFollow: void setIsFollow(java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><synthetic.method.LetterRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setPraiseCount(java.lang.Long)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.util.ArrayList: int size()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><synthetic.method.FavoritesRepositoryImpl: com.favorites.domain.Favorites findByUserIdAndName(java.lang.Long,java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String newFavorites()>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.domain.User: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><com.favorites.domain.Entitys: void <init>()>
<register-finalize <com.favorites.domain.enums.CollectType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><java.util.ArrayList: void <init>()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCommentedUser(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.LetterController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.LetterServiceImpl getLetterServiceImpl()>
<synthetic.method.CommentRepositoryImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.schedule.ScheduledTasks: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.ui.ExtendedModelMap: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>
<com.favorites.web.HomeController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.web.CommentController: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String newFavorites()>-><com.favorites.web.IndexController: java.lang.String newFavorites()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><com.favorites.domain.LookRecord: void setUserId(java.lang.Long)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response saveLookRecord(java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><synthetic.method.CollectRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String export(org.springframework.ui.Model)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><java.util.HashMap: void <init>()>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.LookRecordController: void callEntry_synthetic()>-><com.favorites.web.LookRecordController: com.favorites.domain.result.Response saveLookRecord(java.lang.Long)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.Base64: byte[] encode(byte[])>-><com.favorites.utils.Base64: byte[] encodeBase64(byte[],boolean)>
<com.favorites.utils.HtmlUtil: java.lang.String getImge(java.lang.String)>-><com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>
<com.favorites.schedule.ScheduledTasks: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CollectRepositoryImpl getCollectRepositoryImpl()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.springframework.mail.javamail.MimeMessageHelper: void setText(java.lang.String,boolean)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List getLookRecords(java.lang.Long,org.springframework.data.domain.Pageable)>-><com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: void setCreateTime(java.lang.Long)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.domain.Collect: void setCreateTime(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.service.impl.LookRecordServiceImpl: java.util.List getLookRecords(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.io.File: boolean isDirectory()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: boolean checkCollect(com.favorites.domain.Collect)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><java.util.ArrayList: int size()>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List searchMy(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>
<org.hibernate.ConnectionAcquisitionMode: org.hibernate.ConnectionAcquisitionMode interpret(java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.FollowRepositoryImpl: java.util.List findFollowUserByUserId(java.lang.Long)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: java.util.List getFollows()>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.domain.Collect: void setCharset(java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.FollowRepositoryImpl: java.lang.Integer countByFollowIdAndStatus(java.lang.Long,com.favorites.domain.enums.FollowStatus)>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Integer: int intValue()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.util.Base64: java.util.Base64$Decoder getDecoder()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.service.impl.CollectServiceImpl: void <init>()>
<com.favorites.comm.filter.SecurityFilter: boolean containsKey(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.io.OutputStream: void flush()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.hibernate.loader.BatchFetchStyle: org.hibernate.loader.BatchFetchStyle interpret(java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.CollectController: java.lang.String getCollectLogoUrl(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.util.ArrayList: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.service.impl.LookAroundServiceImpl: void <init>()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getUserId(java.lang.String)>-><com.favorites.utils.Des3EncryptionUtil: java.lang.String decode(java.lang.String,java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><org.jsoup.Jsoup: org.jsoup.nodes.Document parse(java.io.InputStream,java.lang.String,java.lang.String)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><synthetic.method.HttpServletResponseImpl: void setCharacterEncoding(java.lang.String)>
<com.favorites.web.NoticeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.NoticeController$$SpringCGLIB: com.favorites.domain.result.ResponseData getNoticeNum()>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.FollowController$$SpringCGLIB: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String collect(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.NoticeController$$SpringCGLIB: com.favorites.domain.result.ResponseData getNoticeNum()>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String feedback(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.domain.enums.CollectType: void <clinit>()>-><com.favorites.domain.enums.CollectType: void <init>(java.lang.String,int)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.favorites.service.impl.CollectServiceImpl: boolean checkCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.Long getFavoritesId()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<com.favorites.web.FavoritesController$$SpringCGLIB: java.util.List getFavorites(java.lang.Long)>-><com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void setUserName(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.web.FollowController: void <init>()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String getcategory()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><synthetic.method.FavoritesRepositoryImpl: com.favorites.domain.Favorites findByUserIdAndName(java.lang.Long,java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.Config getConfig()>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getNewFavorites()>
<com.favorites.service.impl.CollectServiceImpl: java.lang.Long createfavorites(com.favorites.domain.Collect)>-><synthetic.method.FavoritesRepositoryImpl: com.favorites.domain.Favorites findByUserIdAndName(java.lang.Long,java.lang.String)>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.Double: double parseDouble(java.lang.String)>
<com.favorites.web.NoticeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setContent(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.lang.Long createfavorites(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: long getUserId()>
<com.favorites.web.NoticeController: com.favorites.domain.result.ResponseData getNoticeNum()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String mobile()>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.utils.Base64: byte[] decodeBase64(byte[])>-><com.favorites.utils.Base64: byte[] discardNonBase64(byte[])>
<com.favorites.web.HomeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.HomeController$$SpringCGLIB: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>
<com.favorites.utils.Base64: byte[] discardNonBase64(byte[])>-><com.favorites.utils.Base64: boolean isBase64(byte)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.CollectController: java.util.Map getPraiseStatus(org.springframework.ui.Model,java.lang.Long)>-><java.util.HashMap: void <init>()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.HomeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.HomeController$$SpringCGLIB: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>
<com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.service.impl.CollectServiceImpl: void collectLike(java.lang.Long,long)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><java.nio.charset.Charset: java.lang.String name()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Vector$Itr: boolean hasNext()>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><org.springframework.util.LinkedMultiValueMap: java.util.Set entrySet()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findById(long)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findById(long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>-><com.favorites.domain.Praise: java.lang.Long getId()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><com.favorites.domain.Favorites: java.lang.Long getId()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><synthetic.method.FollowRepositoryImpl: java.util.List findByUserId(java.lang.Long)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.security.Provider: java.util.Set entrySet()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><java.lang.String: int length()>
<com.favorites.service.impl.CollectServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.NoticeServiceImpl getNoticeServiceImpl()>
<com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>-><com.favorites.domain.Notice: void setCreateTime(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response like(java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: void setProperty(java.lang.String,java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><synthetic.method.UserRepositoryImpl: int setOutDateAndValidataCode(java.lang.String,java.lang.String,java.lang.String)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.CollectRepositoryImpl: java.lang.Long countByUserIdAndIsDelete(java.lang.Long,com.favorites.domain.enums.IsDelete)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.webjars.WebJarAssetLocator: java.lang.String getFullPath(java.lang.String,java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.lang.System: long currentTimeMillis()>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.System: long currentTimeMillis()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><com.favorites.comm.filter.SecurityFilter: boolean containsKey(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><synthetic.method.UserRepositoryImpl: int setNewPassword(java.lang.String,java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: boolean checkCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getNewFavorites()>
<com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response like(java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: com.favorites.domain.enums.CollectType getType()>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.lang.Throwable: void printStackTrace()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.domain.Follow: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.StringBuilder exportHtml(java.lang.String,java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String home(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: java.lang.String getContent()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.Throwable: java.lang.String getMessage()>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.io.File: void <init>(java.lang.String)>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>
<com.favorites.web.IndexController: java.lang.String export(org.springframework.ui.Model)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.domain.view.IndexCollectorView: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.util.HashMap: void <init>()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.String: int indexOf(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: java.lang.String getdataUrl()>
<com.favorites.web.LetterController$$SpringCGLIB: void <init>()>-><com.favorites.web.LetterController: void <init>()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><synthetic.method.NoticeRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.text.DateFormat: java.lang.String format(java.util.Date)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.User: void setLastModifyTime(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>-><com.favorites.domain.Praise: void setCreateTime(java.lang.Long)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.UserController$$SpringCGLIB: java.util.List getFavorites()>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Enum: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Notice: void setCreateTime(java.lang.Long)>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.io.File: void <init>(java.lang.String)>
<com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.domain.User: java.lang.String getPassWord()>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><com.favorites.utils.HtmlUtil: java.lang.String getImge(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>-><com.favorites.domain.Praise: void <init>()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.domain.Collect: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.Config getConfig()>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.EnumMap: java.util.Set entrySet()>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.NoticeServiceImpl: java.util.List getNoticeCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.domain.Follow: void setFollowId(java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<com.favorites.web.UserController: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<org.hibernate.tool.schema.Action: org.hibernate.tool.schema.Action interpretHbm2ddlSetting(java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.HomeController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.FavoritesRepositoryImpl getFavoritesRepositoryImpl()>
<com.favorites.web.CollectController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.CollectServiceImpl getCollectServiceImpl()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCommentedUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>-><com.favorites.domain.result.Response: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.service.impl.CollectServiceImpl: void like(java.lang.Long,long)>-><synthetic.method.CollectRepositoryImpl: com.favorites.domain.Collect findById(long)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.schedule.ScheduledTasks: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.cache.CacheService getCacheService()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>
<com.favorites.web.NoticeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setReplyUserName(java.lang.String)>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.lang.Enum: java.lang.String toString()>
<org.hibernate.internal.util.config.ConfigurationHelper: java.lang.Integer getInteger(java.lang.String,java.util.Map)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.service.impl.ConfigServiceImpl: com.favorites.domain.Config saveConfig(java.lang.Long,java.lang.String)>-><com.favorites.domain.Config: void setUserId(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.Config getConfig()>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><synthetic.method.FavoritesRepositoryImpl: com.favorites.domain.Favorites findByUserIdAndName(java.lang.Long,java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String uploadBackground()>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CommentController: java.util.List list(java.lang.Long)>-><com.favorites.web.CommentController: java.util.List convertComment(java.util.List)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String feedback(org.springframework.ui.Model)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: long getUserId()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getUserId(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<com.favorites.web.LookRecordController: void callEntry_synthetic()>-><com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteLookRecord(java.lang.Long)>
<register-finalize <com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findByUserNameOrEmail(java.lang.String,java.lang.String)>
<com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.lang.String getdescription()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.repository.BaseNativeSqlRepository: void <init>()>
<com.favorites.web.LetterController$$SpringCGLIB: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.web.LetterController getLetterController()>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: java.lang.String getoldPassword()>
<org.codehaus.groovy.runtime.typehandling.ShortTypeHandling: java.lang.Enum castToEnum(java.lang.Object,java.lang.Class)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: java.lang.String getEmail()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.domain.LookRecord: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.cache.CacheService: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><org.jsoup.nodes.Document: java.lang.String title()>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response changePrivacy(java.lang.Long,com.favorites.domain.enums.CollectType)>-><com.favorites.web.CollectController: com.favorites.domain.result.Response changePrivacy(java.lang.Long,com.favorites.domain.enums.CollectType)>
<com.favorites.service.impl.FavoritesServiceImpl: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.service.impl.CollectServiceImpl: void collectLike(java.lang.Long,long)>-><com.favorites.domain.Praise: void setCollectId(java.lang.Long)>
<com.favorites.web.NoticeController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.NoticeRepositoryImpl getNoticeRepositoryImpl()>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findById(long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.jar.Attributes: java.util.Set entrySet()>
<com.favorites.web.UserController: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.codehaus.groovy.control.MultipleCompilationErrorsException: java.lang.String getMessage()>
<com.favorites.web.IndexController$$SpringCGLIB: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.web.IndexController getIndexController()>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><synthetic.method.LookRecordRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.web.LetterController: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.service.impl.ConfigServiceImpl: com.favorites.domain.Config saveConfig(java.lang.Long,java.lang.String)>-><synthetic.method.ConfigRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Long: long longValue()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostFollowedUser(java.lang.Long)>-><com.favorites.repository.BaseNativeSqlRepository: java.util.List sqlObjectList(java.lang.String,java.lang.Object)>
<com.favorites.web.LetterController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Letter: void setPid(java.lang.Long)>
<com.favorites.web.NoticeController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.web.IndexController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.CollectorServiceImpl getCollectorServiceImpl()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><synthetic.method.FavoritesRepositoryImpl: com.favorites.domain.Favorites findByUserIdAndName(java.lang.Long,java.lang.String)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.ConfigServiceImpl: com.favorites.domain.Config saveConfig(java.lang.Long,java.lang.String)>-><com.favorites.domain.Config: void setDefaultModel(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List scrollFiveCollect()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Notice: void setCollectId(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>-><com.favorites.utils.Des3EncryptionUtil: java.lang.String encode(java.lang.String,java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: void <clinit>()>-><java.util.HashSet: void <init>()>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: java.lang.Long getId()>
<com.favorites.cache.CacheService: java.lang.String getMap(java.lang.String)>-><com.favorites.cache.CacheService: void addMaps(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.service.impl.CollectorServiceImpl: void <init>()>
<com.favorites.web.FollowController$$SpringCGLIB: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CommentController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CommentRepositoryImpl getCommentRepositoryImpl()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.favorites.web.CollectController$$SpringCGLIB: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.String: int lastIndexOf(java.lang.String)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><synthetic.method.PraiseRepositoryImpl: com.favorites.domain.view.CommentView findPraiseUser(java.lang.Long)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String forgotPassword()>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.favorites.web.CollectController$$SpringCGLIB: java.lang.String getCollectLogoUrl(java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.domain.Favorites: void <init>()>
<com.favorites.web.FollowController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.FollowController$$SpringCGLIB: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: java.lang.StringBuilder exportToHtml(long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setFavoritesId(java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.domain.Favorites: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.util.UUID: java.lang.String toString()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.HomeController$$SpringCGLIB: void callEntry_synthetic()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<com.favorites.web.HomeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.HomeController$$SpringCGLIB: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><sun.misc.SoftCache$Entry: java.lang.Object getKey()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.nodes.Element: org.jsoup.nodes.Element child(int)>
<com.favorites.comm.Const: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<com.favorites.web.CollectController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.LookRecordServiceImpl getLookRecordServiceImpl()>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.domain.Collect: void setIsDelete(com.favorites.domain.enums.IsDelete)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><synthetic.method.FollowRepositoryImpl: java.util.List findMyFollowIdByUserId(java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<com.favorites.web.NoticeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setUserId(java.lang.Long)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: java.lang.Long getCollectId()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><synthetic.method.PraiseRepositoryImpl: com.favorites.domain.Praise findByUserIdAndCollectId(java.lang.Long,java.lang.Long)>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><synthetic.method.ConfigRepositoryImpl: com.favorites.domain.Config findByUserId(java.lang.Long)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.utils.DateUtils: long getLastMonthTime()>-><com.favorites.utils.DateUtils: long getDayBegin(long)>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><java.net.URL: void <init>(java.lang.String)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.CommentController: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setReplyUserId(java.lang.Long)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response create(com.favorites.domain.User)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response changePrivacy(java.lang.Long,com.favorites.domain.enums.CollectType)>-><synthetic.method.CollectRepositoryImpl: int modifyByIdAndUserId(com.favorites.domain.enums.CollectType,java.lang.Long,java.lang.Long)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchMy(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><java.util.HashMap: void <init>()>
<org.hibernate.ConnectionAcquisitionMode: org.hibernate.ConnectionAcquisitionMode interpret(java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setDescription(java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getImge(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>
<com.favorites.domain.result.ExceptionMsg: void <clinit>()>-><com.favorites.domain.result.ExceptionMsg: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String uploadHeadPortrait()>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.User: void setOutDate(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><java.lang.String: java.lang.String substring(int,int)>
<com.favorites.web.NoticeController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CommentRepositoryImpl getCommentRepositoryImpl()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><com.favorites.utils.HtmlUtil: java.lang.StringBuilder exportHtml(java.lang.String,java.lang.StringBuilder)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.CollectServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.FollowRepositoryImpl getFollowRepositoryImpl()>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><synthetic.method.FavoritesRepositoryImpl: com.favorites.domain.Favorites findById(long)>
<com.favorites.service.impl.LookRecordServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response delete(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<org.hibernate.tool.schema.internal.Helper: org.hibernate.tool.schema.spi.ScriptTargetOutput interpretScriptTargetSetting(java.lang.Object,org.hibernate.boot.registry.classloading.spi.ClassLoaderService,java.lang.String)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.CommentController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.NoticeServiceImpl getNoticeServiceImpl()>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Integer: int intValue()>
<com.favorites.comm.filter.SecurityFilter: void init(javax.servlet.FilterConfig)>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String importm()>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><java.lang.Long: java.lang.Long valueOf(long)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.service.impl.LookRecordServiceImpl: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><synthetic.method.CollectRepositoryImpl: java.lang.Long countByUserIdAndIsDelete(java.lang.Long,com.favorites.domain.enums.IsDelete)>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><com.favorites.domain.Favorites: void <init>()>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.CommentController: void callEntry_synthetic()>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><synthetic.method.LetterRepositoryImpl: int updatePidById(java.lang.Long,java.lang.Long)>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><java.util.regex.Matcher: java.lang.String group()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.HomeController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.NoticeServiceImpl getNoticeServiceImpl()>
<com.favorites.service.impl.ConfigServiceImpl: com.favorites.domain.Config saveConfig(java.lang.Long,java.lang.String)>-><com.favorites.domain.Config: void setDefaultFavorties(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List searchOther(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String tool(org.springframework.ui.Model)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.FavoritesController$$SpringCGLIB: void callEntry_synthetic()>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.lang.StringBuilder exportToHtml(long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.FavoritesRepositoryImpl: java.util.List findByUserId(java.lang.Long)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCommentedUser(java.lang.String)>-><com.favorites.repository.BaseNativeSqlRepository: java.util.List sqlArrayList(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Enum: java.lang.String toString()>
<com.favorites.utils.DateUtils: long getLastMonthTime()>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><java.lang.String: java.lang.String substring(int,int)>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: long longValue()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.domain.Follow: void setCreateTime(java.lang.Long)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setPraise(boolean)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.Long getFavoritesId()>
<com.favorites.web.FeedbackController: void callEntry_synthetic()>-><com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.util.UUID: java.util.UUID randomUUID()>
<com.favorites.web.CollectController$$SpringCGLIB: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>
<com.favorites.service.impl.CollectorServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.UserRepositoryImpl getUserRepositoryImpl()>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setUserId(java.lang.Long)>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.io.File: boolean mkdirs()>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><synthetic.method.NoticeRepositoryImpl: int updateReadedByUserId(java.lang.String,long,java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setUrl(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.IndexController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.FavoritesRepositoryImpl getFavoritesRepositoryImpl()>
<com.favorites.web.UserController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.FavoritesRepositoryImpl getFavoritesRepositoryImpl()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getUserId(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CommentController: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setCollectId(java.lang.Long)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String collect(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><synthetic.method.UserRepositoryImpl: int setNewPassword(java.lang.String,java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.Collect detail(java.lang.Long)>
<com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>-><com.favorites.domain.result.Response: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCollectUser()>-><java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.util.ArrayList: int size()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setCommentCount(java.lang.Long)>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.Map getPraiseStatus(org.springframework.ui.Model,java.lang.Long)>-><com.favorites.web.CollectController: java.util.Map getPraiseStatus(org.springframework.ui.Model,java.lang.Long)>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><synthetic.method.UserRepositoryImpl: com.favorites.domain.User findByUserName(java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.domain.enums.FollowStatus: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getDescription()>
<com.favorites.utils.Des3EncryptionUtil: byte[] encode(byte[],byte[])>-><javax.crypto.Cipher: void init(int,java.security.Key)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.MessageUtil: java.lang.String getMessage(java.lang.String,java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><java.util.ArrayList: void <init>()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><com.favorites.comm.filter.SecurityFilter: java.lang.String getUserId(java.lang.String)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: long getUserId()>
<com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>-><com.favorites.domain.Notice: void setReaded(java.lang.String)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.favorites.WebConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean filterRegistration()>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void addUrlPatterns(java.lang.String[])>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNoneBlank(java.lang.CharSequence[])>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String forgotPassword()>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><com.favorites.domain.Letter: java.lang.Long getReceiveUserId()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPraisedUser(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response like(java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPraisedUser(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.service.impl.LetterServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.NoticeServiceImpl getNoticeServiceImpl()>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><com.favorites.utils.HtmlUtil: java.lang.String matchCharset(java.lang.String)>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Long: long longValue()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(java.lang.Long,java.lang.String)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.LetterServiceImpl: java.util.List findLetter(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.web.CollectController$$SpringCGLIB: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.LetterController: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.CollectRepositoryImpl: java.lang.Long countByUserIdAndTypeAndIsDelete(java.lang.Long,com.favorites.domain.enums.CollectType,com.favorites.domain.enums.IsDelete)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><synthetic.method.CollectRepositoryImpl: com.favorites.domain.Collect findById(long)>
<com.favorites.utils.DateUtils: long getDayBegin(long)>-><java.util.Date: void <init>(long)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.domain.Collect: void setRemark(java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><java.util.ArrayList: void <init>()>
<com.favorites.utils.Des3EncryptionUtil: byte[] encode(byte[],byte[])>-><javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.favorites.domain.Config: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><org.jsoup.Jsoup: org.jsoup.Connection connect(java.lang.String)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><java.lang.Long: long longValue()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springframework.boot.web.servlet.support.ErrorPageFilter$ErrorWrapperResponse: java.io.PrintWriter getWriter()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.ConfigServiceImpl: void updateConfig(long,java.lang.String,java.lang.String)>-><synthetic.method.ConfigRepositoryImpl: com.favorites.domain.Config findById(long)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.String: int indexOf(java.lang.String)>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.lang.String getcategory()>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteAll()>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchMy(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: java.lang.StringBuilder exportToHtml(long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void setProfilePicture(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><javax.servlet.http.HttpServletResponseWrapper: void addCookie(javax.servlet.http.Cookie)>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.FollowRepositoryImpl: java.lang.Integer countByFollowIdAndStatus(java.lang.Long,com.favorites.domain.enums.FollowStatus)>
<com.favorites.web.CollectController: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.web.CollectController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CollectRepositoryImpl getCollectRepositoryImpl()>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.utils.Des3EncryptionUtil: byte[] encode(byte[],byte[])>-><javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.favorites.web.UserController: void <init>()>-><org.springframework.mail.javamail.JavaMailSenderImpl: void <init>()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><groovyjarjarantlr.NoViableAltException: java.lang.String getMessage()>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.LetterController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Letter: void <init>()>
<org.hibernate.MultiTenancyStrategy: org.hibernate.MultiTenancyStrategy determineMultiTenancyStrategy(java.util.Map)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.Collect detail(java.lang.Long)>-><com.favorites.web.CollectController: com.favorites.domain.Collect detail(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setUrl(java.lang.String)>
<com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.service.impl.LookRecordServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CommentRepositoryImpl getCommentRepositoryImpl()>
<groovy.util.ProxyGenerator: org.codehaus.groovy.runtime.ProxyGeneratorAdapter createAdapter(java.util.Map,java.util.List,java.lang.Class,java.lang.Class)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><java.net.URL: java.lang.String getProtocol()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><org.springframework.ui.ExtendedModelMap: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><com.favorites.domain.LookRecord: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String mobile()>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.springframework.mail.javamail.MimeMessageHelper: void <init>(javax.mail.internet.MimeMessage,boolean)>
<com.favorites.web.CollectController: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><javax.servlet.http.Cookie: java.lang.String getValue()>
<com.favorites.service.impl.CollectServiceImpl: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.service.impl.CollectorServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.repository.impl.CollectorRepositoryImpl getCollectorRepositoryImpl()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><synthetic.method.FollowRepositoryImpl: com.favorites.domain.Follow findByUserIdAndFollowId(java.lang.Long,java.lang.Long)>
<com.favorites.web.LetterController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Letter: void setReceiveUserId(java.lang.Long)>
<com.favorites.utils.URLUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.CollectController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.LookAroundServiceImpl getLookAroundServiceImpl()>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.LookRecordController: void callEntry_synthetic()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostFollowedUser(java.lang.Long)>-><com.favorites.domain.view.CollectorView: void <init>()>
<com.favorites.web.FeedbackController: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.service.impl.FeedbackServiceImpl getFeedbackServiceImpl()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.domain.Collect: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><org.springframework.ui.ExtendedModelMap: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostFollowedUser(java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.web.FollowController$$SpringCGLIB: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int compareToWithEqualityCheck(java.lang.Object,java.lang.Object,boolean)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.Long getFavoritesId()>
<com.favorites.web.CollectController: com.favorites.domain.Collect detail(java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><javax.servlet.http.HttpServletResponseWrapper: void setHeader(java.lang.String,java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getNewFavorites()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List getLookRecords(java.lang.Long,org.springframework.data.domain.Pageable)>-><synthetic.method.LookRecordRepositoryImpl: org.springframework.data.domain.Page findViewByUserId(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>
<com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><synthetic.method.CommentRepositoryImpl: com.favorites.domain.view.CommentView findReplyUser(java.lang.Long)>
<org.hibernate.loader.BatchFetchStyle: org.hibernate.loader.BatchFetchStyle interpret(java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><com.favorites.comm.filter.SecurityFilter: java.lang.String codeToString(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.User: void setPassWord(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><org.jsoup.helper.HttpConnection: org.jsoup.Connection userAgent(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.IndexController: java.lang.String feedback(org.springframework.ui.Model)>-><org.springframework.ui.ExtendedModelMap: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.jsoup.nodes.Element: org.jsoup.select.Elements select(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.FavoritesRepositoryImpl getFavoritesRepositoryImpl()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.service.impl.ConfigServiceImpl: com.favorites.domain.Config saveConfig(java.lang.Long,java.lang.String)>-><com.favorites.domain.Config: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void <init>(com.favorites.domain.view.CollectView)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.web.LookRecordController: void <init>()>
<com.favorites.domain.Entitys: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.ConnectionReleaseMode: org.hibernate.ConnectionReleaseMode interpret(java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.schedule.ScheduledTasks: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.UrlLibraryRepositoryImpl getUrlLibraryRepositoryImpl()>
<com.favorites.utils.DateUtils: long getDayBegin(long)>-><java.text.DateFormat: java.lang.String format(java.util.Date)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setType(com.favorites.domain.enums.CollectType)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.net.URL: void <init>(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<groovy.lang.MetaClassImpl: void setProperties(java.lang.Object,java.util.Map)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String mobile()>-><com.favorites.web.IndexController: java.lang.String mobile()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><javax.servlet.http.Cookie: void <init>(java.lang.String,java.lang.String)>
<org.codehaus.groovy.runtime.typehandling.ShortTypeHandling: java.lang.Enum castToEnum(java.lang.Object,java.lang.Class)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.io.FileInputStream: void close()>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><com.favorites.domain.Letter: java.lang.String getContent()>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.lang.StringBuilder exportToHtml(long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Notice: void setReaded(java.lang.String)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String export(org.springframework.ui.Model)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><com.favorites.domain.Favorites: java.lang.Long getId()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Notice: void <init>()>
<com.favorites.service.impl.LetterServiceImpl: java.util.List findLetter(java.lang.Long,org.springframework.data.domain.Pageable)>-><synthetic.method.LetterRepositoryImpl: java.util.List findLetterByReceiveUserId(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<com.favorites.web.NoticeController$$SpringCGLIB: com.favorites.domain.result.ResponseData getNoticeNum()>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.IndexController: java.lang.String index(org.springframework.ui.Model)>-><org.springframework.ui.ExtendedModelMap: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>
<com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.CollectRepositoryImpl: java.lang.Long countByUserIdAndIsDelete(java.lang.Long,com.favorites.domain.enums.IsDelete)>
<com.favorites.WebConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean filterRegistration()>-><org.springframework.boot.web.servlet.FilterRegistrationBean: void setFilter(javax.servlet.Filter)>
<com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg)>-><com.favorites.domain.result.Response: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.HomeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.HomeController$$SpringCGLIB: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><synthetic.method.FollowRepositoryImpl: java.lang.Integer updateStatusById(com.favorites.domain.enums.FollowStatus,java.lang.Long,java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<register-finalize <com.favorites.domain.enums.FollowStatus: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.web.UserController: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String export(org.springframework.ui.Model)>-><com.favorites.web.IndexController: java.lang.String export(org.springframework.ui.Model)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(java.lang.String,java.lang.Object[])>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String uploadHeadPortrait()>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.codehaus.groovy.reflection.stdclasses.StringCachedClass: java.lang.Object coerceArgument(java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.service.impl.FeedbackServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void collectLike(java.lang.Long,long)>-><com.favorites.domain.Praise: void setUserId(java.lang.Long)>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response like(java.lang.Long)>-><com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>
<com.favorites.web.CollectController: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><java.util.HashMap: void <init>()>
<com.favorites.web.CommentController: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setContent(java.lang.String)>
<org.codehaus.groovy.runtime.InvokerHelper: groovy.lang.Script createScript(java.lang.Class,groovy.lang.Binding)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: java.util.List getFavorites()>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>-><com.favorites.domain.Notice: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>
<com.favorites.web.WebJarController: void callEntry_synthetic()>-><com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>
<com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String matchCharset(java.lang.String)>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.utils.HtmlUtil: java.util.Map getCollectFromUrl(java.lang.String)>-><org.jsoup.nodes.Element: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.cache.CacheService: java.lang.String getMap(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<com.favorites.web.UserController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.ConfigRepositoryImpl getConfigRepositoryImpl()>
<com.favorites.web.BaseController: com.favorites.domain.User getUser()>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.util.ArrayList: int size()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List getNoticeCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable)>-><com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>
<com.favorites.web.FollowController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.FollowRepositoryImpl getFollowRepositoryImpl()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.FollowRepositoryImpl: java.util.List findFollowedUserByFollowId(java.lang.Long)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.domain.User: void setId(java.lang.Long)>
<com.favorites.web.FavoritesController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.CollectRepositoryImpl getCollectRepositoryImpl()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><synthetic.method.FavoritesRepositoryImpl: com.favorites.domain.Favorites findByUserIdAndName(java.lang.Long,java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String newPassword(java.lang.String)>-><com.favorites.web.IndexController: java.lang.String newPassword(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.domain.Collect: void setDescription(java.lang.String)>
<org.hibernate.resource.jdbc.spi.PhysicalConnectionHandlingMode: org.hibernate.resource.jdbc.spi.PhysicalConnectionHandlingMode interpret(java.lang.Object)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setTitle(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.HashMap: java.util.Set entrySet()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><synthetic.method.PraiseRepositoryImpl: java.lang.Long countByCollectId(java.lang.Long)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.Config getConfig()>-><synthetic.method.ConfigRepositoryImpl: com.favorites.domain.Config findByUserId(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.CommentController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.PraiseRepositoryImpl getPraiseRepositoryImpl()>
<com.favorites.web.FavoritesController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.FavoritesController$$SpringCGLIB: com.favorites.domain.result.Response delFavorites(java.lang.Long)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><synthetic.method.FavoritesRepositoryImpl: com.favorites.domain.Favorites findById(long)>
<com.favorites.web.BaseController: com.favorites.domain.result.Response result()>-><com.favorites.domain.result.Response: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: java.lang.String getdefaultFavorites()>
<com.favorites.service.impl.FavoritesServiceImpl: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.util.Map getPraiseStatus(org.springframework.ui.Model,java.lang.Long)>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String index(org.springframework.ui.Model)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.ConfigRepositoryImpl: com.favorites.domain.Config findByUserId(java.lang.Long)>
<com.favorites.web.LetterController: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.domain.Favorites: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.web.CommentController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.UserRepositoryImpl getUserRepositoryImpl()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Collect: void setCreateTime(java.lang.Long)>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><com.favorites.domain.LookRecord: void setCreateTime(java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.FollowRepositoryImpl: java.util.List findFollowedUserByFollowId(java.lang.Long)>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><synthetic.method.NoticeRepositoryImpl: java.lang.Long countByUserIdAndTypeAndReaded(java.lang.Long,java.lang.String,java.lang.String)>
<com.favorites.utils.MessageUtil: java.lang.String getMessage(java.lang.String,java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.text.SimpleDateFormat: void <init>(java.lang.String)>
<synthetic.method.CollectRepositoryImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.NoticeController: com.favorites.domain.result.ResponseData getNoticeNum()>-><synthetic.method.NoticeRepositoryImpl: java.lang.Long countByUserIdAndTypeAndReaded(java.lang.Long,java.lang.String,java.lang.String)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPraisedUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.util.HashMap: java.util.Set entrySet()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.User: void setValidataCode(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.lang.StringBuilder exportToHtml(long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: void setUserId(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.domain.Collect: void setLogoUrl(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.io.File: boolean delete()>
<com.favorites.web.NoticeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setReplyUserId(java.lang.Long)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.favorites.web.HomeController$$SpringCGLIB: void <init>()>-><synthetic.method.SingletonFactory: com.favorites.web.HomeController getHomeController()>
<com.favorites.schedule.ScheduledTasks: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><java.util.ArrayList: java.lang.Object get(int)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(java.lang.Long,java.lang.String)>-><com.favorites.domain.Favorites: void setName(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void noticeFriends(com.favorites.domain.Collect)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.CollectController: java.util.Map getPraiseStatus(org.springframework.ui.Model,java.lang.Long)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: java.lang.String getemail()>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.domain.result.Response: void <init>(com.favorites.domain.result.ExceptionMsg)>-><com.favorites.domain.result.ExceptionMsg: java.lang.String getMsg()>
<com.favorites.web.CollectController: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><synthetic.method.FavoritesRepositoryImpl: void deleteById(java.lang.Object)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<com.favorites.web.NoticeController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setCollectId(java.lang.Long)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<synthetic.method.UrlLibraryRepositoryImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.cache.CacheService: java.lang.String getMap(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setCollectTime(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setPraise(boolean)>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.UserController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.UserController$$SpringCGLIB: java.util.List getFavorites()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>
<com.favorites.service.impl.CollectServiceImpl: void saveCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setUrl(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><groovyjarjarantlr.MismatchedCharException: java.lang.String getMessage()>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.UserController$$SpringCGLIB: void <init>()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(com.favorites.domain.Collect)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.nodes.Document: java.lang.String nodeName()>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<groovy.util.ProxyGenerator: org.codehaus.groovy.runtime.ProxyGeneratorAdapter createAdapter(java.util.Map,java.util.List,java.lang.Class,java.lang.Class)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: com.favorites.domain.result.Response like(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.codehaus.groovy.classgen.asm.OperandStack: void newInstance(groovyjarjarasm.asm.MethodVisitor,java.lang.Object)>-><com.favorites.domain.Favorites: java.lang.String toString()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String collect(org.springframework.ui.Model)>-><com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><synthetic.method.FollowRepositoryImpl: java.lang.Integer countByUserIdAndStatus(java.lang.Long,com.favorites.domain.enums.FollowStatus)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.CollectController$$SpringCGLIB: java.lang.String getfavoritesId()>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.ui.ExtendedModelMap: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>
<com.favorites.web.UserController$$SpringCGLIB: java.util.List getFollows()>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><synthetic.method.CommentRepositoryImpl: java.lang.Object save(java.lang.Object)>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.FavoritesApplication: void main(java.lang.String[])>-><com.favorites.web.LetterController$$SpringCGLIB: void callEntry_synthetic()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><synthetic.method.UserRepositoryImpl: int setIntroduction(java.lang.String,java.lang.String)>
<com.favorites.web.CollectController$$SpringCGLIB: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><com.favorites.comm.aop.LoggerAdvice: void <init>()>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String collect(org.springframework.ui.Model)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><synthetic.method.CollectRepositoryImpl: com.favorites.domain.Collect findById(long)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><synthetic.method.CollectRepositoryImpl: com.favorites.domain.Collect findById(long)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.favorites.web.CollectController: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: boolean checkCollect(com.favorites.domain.Collect)>-><java.lang.Long: long longValue()>
<com.favorites.comm.filter.SecurityFilter: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.UserController$$SpringCGLIB: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>
<com.favorites.web.CommentController: void callEntry_synthetic()>-><com.favorites.domain.Comment: void setCommentTime(java.lang.String)>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<com.favorites.web.HomeController: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.FollowRepositoryImpl getFollowRepositoryImpl()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.service.impl.FavoritesServiceImpl: com.favorites.domain.Favorites saveFavorites(java.lang.Long,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.IndexController$$SpringCGLIB: java.lang.String uploadBackground()>-><com.favorites.web.IndexController: java.lang.String uploadBackground()>
<com.favorites.web.BaseController: long getUserId()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getLogoUrl()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.Double: java.lang.Double valueOf(double)>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><com.favorites.domain.UrlLibrary: void setLogoUrl(java.lang.String)>
<com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<groovyjarjarasm.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><com.favorites.domain.Entitys: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void importHtml(java.util.Map,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.service.impl.FavoritesServiceImpl: void countFavorites(long)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.NoticeController: com.favorites.domain.result.ResponseData getNoticeNum()>-><synthetic.method.NoticeRepositoryImpl: java.lang.Long countPraiseByUserIdAndReaded(java.lang.Long,java.lang.String)>
<com.favorites.service.impl.LetterServiceImpl: void sendLetter(com.favorites.domain.Letter)>-><com.favorites.service.impl.NoticeServiceImpl: void saveNotice(java.lang.String,java.lang.String,java.lang.Long,java.lang.String)>
<com.favorites.web.CollectController: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.domain.enums.LetterType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.favorites.web.FavoritesController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.web.CollectController$$SpringCGLIB: void callEntry_synthetic()>-><synthetic.method.HttpServletResponseImpl: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.IndexController$$SpringCGLIB: void callEntry_synthetic()>-><com.favorites.web.IndexController$$SpringCGLIB: java.lang.String uploadHeadPortrait()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>
<com.favorites.comm.aop.LoggerAdvice: java.lang.String parseParames(java.lang.Object[])>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: void setCreateTime(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.Long getId()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setUserId(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.util.UUID: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void updateCollect(com.favorites.domain.Collect)>-><java.lang.Long: long longValue()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.lang.String matchCharset(java.lang.String)>-><java.util.regex.Matcher: java.lang.String group()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><synthetic.method.FavoritesRepositoryImpl: void updateNameById(java.lang.Long,java.lang.Long,java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: void otherCollect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setId(java.lang.Long)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.awt.image.BufferedImage: int getHeight()>
<com.favorites.web.HomeController$$SpringCGLIB: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.comm.aop.LoggerAdvice: void addAfterReturningLogger(org.aspectj.lang.JoinPoint)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: java.util.List resolveConstructorArguments(java.lang.Object[],int,int)>-><com.favorites.domain.Entitys: java.lang.String toString()>
