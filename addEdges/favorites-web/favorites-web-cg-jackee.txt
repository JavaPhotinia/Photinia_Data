<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.util.UUID: java.util.UUID randomUUID()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getUserId(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><com.favorites.domain.Letter: void setSendUserId(java.lang.Long)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Notice: void setType(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String tool(org.springframework.ui.Model)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.io.File: void <init>(java.io.File,java.lang.String)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String encode(java.lang.String,java.lang.String)>-><com.favorites.utils.Des3EncryptionUtil: byte[] encode(byte[],byte[])>
<com.favorites.web.CollectController: java.util.Map getPraiseStatus(org.springframework.ui.Model,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostFollowedUser(java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.LetterController: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPopularUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response changePrivacy(java.lang.Long,com.favorites.domain.enums.CollectType)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><java.util.ArrayList: void <init>()>
<com.favorites.web.CollectController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.domain.Favorites: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.util.HashMap: int size()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.Throwable: void printStackTrace()>
<com.favorites.web.IndexController: java.lang.String feedback(org.springframework.ui.Model)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchOther(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.sql.Timestamp: long getTime()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.util.ArrayList: int size()>
<com.favorites.utils.DateUtils: long getDayBegin(long)>-><org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.io.File: boolean mkdir()>
<com.favorites.comm.filter.SecurityFilter: boolean containsSuffix(java.lang.String)>-><java.lang.String: boolean endsWith(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void setLogoUrl(java.lang.String)>
<com.favorites.web.NoticeController: com.favorites.domain.result.ResponseData getNoticeNum()>-><java.util.HashMap: void <init>()>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setCollectTime(java.lang.String)>
<com.favorites.web.WebJarController: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.CollectController: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String decode(java.lang.String,java.lang.String)>-><com.favorites.utils.Base64: byte[] decode(byte[])>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.web.HomeController: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCommentedUser(java.lang.String)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: void setContent(java.lang.String)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPraisedUser(java.lang.String)>-><com.favorites.repository.BaseNativeSqlRepository: java.util.List sqlArrayList(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteAll()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.util.Base64$Decoder: byte[] decode(java.lang.String)>
<com.favorites.web.UserController: java.util.List getFollows()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.domain.Praise: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.BaseController: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.domain.Notice: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.domain.view.IndexCollectorView: void setMostCollectUser(com.favorites.domain.User)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setUserName(java.lang.String)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCollectUser()>-><com.favorites.repository.BaseNativeSqlRepository: java.util.List sqlArrayList(java.lang.String)>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.domain.Favorites: void <init>()>
<com.favorites.utils.HtmlUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Object)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPopularUser(java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.domain.Favorites: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.service.impl.CollectorServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.comm.exception.GlobalExceptionHandler: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.io.FileOutputStream: void write(byte[],int,int)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: void <init>()>-><com.favorites.cache.CacheService: void <init>()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.WebConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean filterRegistration()>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void setName(java.lang.String)>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.CommentController: java.util.List convertComment(java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getContextPath()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.Long: long longValue()>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.http.HttpStatus)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCommentedUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteAll()>-><com.favorites.service.impl.LookRecordServiceImpl: void deleteLookRecordByUserID(java.lang.Long)>
<com.favorites.comm.aop.LoggerAdvice: java.lang.String parseParames(java.lang.Object[])>-><java.lang.StringBuffer: java.lang.String toString()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.net.URL: java.io.InputStream openStream()>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.NoticeServiceImpl: java.util.List getNoticeCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List scrollFiveCollect()>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><java.net.URL: java.lang.String getAuthority()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.springframework.mail.javamail.MimeMessageHelper: void setFrom(java.lang.String)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response saveLookRecord(java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.service.impl.LetterServiceImpl: java.util.List findLetter(java.lang.Long,org.springframework.data.domain.Pageable)>-><com.favorites.domain.view.LetterSummary: void <init>(com.favorites.domain.view.LetterView)>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><java.lang.Long: long longValue()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Enum: java.lang.String toString()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.String: int length()>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.Base64: byte[] encodeBase64(byte[],boolean)>-><java.lang.Math: double ceil(double)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.Des3EncryptionUtil: byte[] decode(byte[],byte[])>-><javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void setTitle(java.lang.String)>
<com.favorites.web.UserController: java.util.List getFavorites()>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.domain.view.CollectSummary: void <init>(com.favorites.domain.view.CollectView)>-><java.lang.Object: void <init>()>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteAll()>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: java.util.List getFollows()>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String decode(java.lang.String,java.lang.String)>-><java.lang.Throwable: void printStackTrace()>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.comm.aop.LoggerAdvice: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.IndexController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.web.BaseController: java.lang.String getUserIp()>-><com.favorites.web.BaseController: javax.servlet.http.HttpServletRequest getRequest()>
<com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String encode(java.lang.String,java.lang.String)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>
<com.favorites.service.impl.FavoritesServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.cache.CacheService: java.lang.String getMap(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.service.impl.CollectorServiceImpl: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.String: int length()>
<com.favorites.comm.filter.SecurityFilter: boolean containsKey(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<com.favorites.domain.UserIsFollow: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPraisedUser(java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><java.util.ArrayList: void <init>()>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.security.MessageDigest: byte[] digest()>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.service.impl.LookRecordServiceImpl: java.util.List getLookRecords(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.comm.aop.LoggerAdvice: java.lang.String parseParames(java.lang.Object[])>-><org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.util.Base64$Decoder: byte[] decode(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Integer: int intValue()>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.CollectController: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteLookRecord(java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.util.UUID: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.domain.UrlLibrary: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.Config getConfig()>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>-><com.favorites.domain.Feedback: void setCreateTime(java.lang.Long)>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.util.Date: void <init>()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.domain.view.LetterSummary: void <init>(com.favorites.domain.view.LetterView)>-><java.lang.Object: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.UserController: java.util.List getFavorites()>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.io.FileOutputStream: void <init>(java.lang.String)>
<com.favorites.utils.DateUtils: long getDayBegin(long)>-><java.text.SimpleDateFormat: void <init>(java.lang.String)>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.io.File: void <init>(java.lang.String)>
<com.favorites.utils.DateUtils: long getDayBegin(long)>-><java.util.Date: long getTime()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostFollowedUser(java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.domain.view.IndexCollectorView: void setMostCommentedUser(com.favorites.domain.User)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.springframework.mail.javamail.MimeMessageHelper: void setSubject(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Integer: int intValue()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPopularUser(java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><java.lang.String: int length()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>-><com.favorites.domain.Feedback: void setLastModifyTime(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setCommentCount(java.lang.Long)>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.comm.aop.LoggerAdvice: java.lang.String parseParames(java.lang.Object[])>-><java.lang.StringBuffer: void <init>(java.lang.String)>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><javax.servlet.ServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPopularUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.io.File: long length()>
<register-finalize <com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.web.BaseController: java.lang.String getUserIp()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.comm.aop.LoggerAdvice: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><com.favorites.domain.UrlLibrary: void setUrl(java.lang.String)>
<com.favorites.domain.Letter: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setLogoUrl(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.String: java.lang.String substring(int,int)>
<com.favorites.domain.Collect: long getUserId()>-><java.lang.Long: long longValue()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List searchMy(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response saveLookRecord(java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setRemark(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.util.ArrayList: int size()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.domain.Favorites: java.lang.Long getId()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.CommentController: java.util.List convertComment(java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<com.favorites.web.UserController: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><javax.servlet.ServletResponseWrapper: java.io.PrintWriter getWriter()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>
<com.favorites.service.impl.CollectorServiceImpl: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.utils.DateUtils: long getDayBegin(long)>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.utils.MessageUtil: java.lang.String getMessage(java.lang.String,java.lang.String[])>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.security.MessageDigest: void update(byte[])>
<com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getImge(java.lang.String)>-><java.lang.String: int length()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCollectUser()>
<register-finalize <com.favorites.domain.result.ExceptionMsg: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.NoticeServiceImpl: java.util.List getNoticeCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>
<com.favorites.web.CollectController: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Notice: void setUserId(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: void setLastModifyTime(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.util.Base64: java.util.Base64$Decoder getDecoder()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void <init>()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.nodes.Element: java.lang.String text()>
<com.favorites.web.BaseController: javax.servlet.http.HttpServletRequest getRequest()>-><org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>
<com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>-><com.favorites.domain.Feedback: void setUserId(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setCommentCount(java.lang.Long)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.util.HashMap: boolean isEmpty()>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchOther(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><com.favorites.domain.UserIsFollow: void <init>()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.domain.User: java.lang.String getUserName()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: void setUserId(java.lang.Long)>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><com.favorites.domain.LookRecord: void setCollectId(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchMy(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.utils.DateUtils: long getCurrentTime()>-><java.lang.System: long currentTimeMillis()>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String encode(java.lang.String,java.lang.String)>-><java.lang.String: void <init>(byte[],java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>
<com.favorites.comm.Const: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String encode(java.lang.String,java.lang.String)>-><java.lang.Throwable: void printStackTrace()>
<com.favorites.repository.BaseNativeSqlRepository: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.domain.Follow: void setStatus(com.favorites.domain.enums.FollowStatus)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: java.lang.Long getCollectId()>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.io.FileOutputStream: void close()>
<com.favorites.web.FeedbackController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>-><com.favorites.web.BaseController: javax.servlet.http.HttpServletRequest getRequest()>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.util.UUID: java.util.UUID randomUUID()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteLookRecord(java.lang.Long)>-><com.favorites.service.impl.LookRecordServiceImpl: void deleteLookRecord(java.lang.Long,java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><org.jsoup.nodes.Element: org.jsoup.select.Elements select(java.lang.String)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setProfilePicture(java.lang.String)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.sql.Timestamp: long getTime()>
<com.favorites.WebConfiguration: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><com.favorites.domain.LookRecord: void setLastModifyTime(java.lang.Long)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.domain.view.IndexCollectorView: void setMostPopularUser(com.favorites.domain.User)>
<com.favorites.web.IndexController: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.domain.Follow: void setUserId(java.lang.Long)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response changePrivacy(java.lang.Long,com.favorites.domain.enums.CollectType)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<register-finalize <com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.util.ArrayList: void <init>()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.nodes.Element: java.lang.String nodeName()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.domain.view.IndexCollectorView: void setMostActiveUser(com.favorites.domain.User)>
<com.favorites.repository.impl.CollectorRepositoryImpl: void <init>()>-><com.favorites.repository.BaseNativeSqlRepository: void <init>()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.FollowController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void setUserId(java.lang.Long)>
<com.favorites.web.UserController: java.util.List getFavorites()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><javax.servlet.http.Cookie: void setPath(java.lang.String)>
<com.favorites.domain.result.Response: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><org.jsoup.nodes.Element: java.lang.String text()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.domain.result.Response: void <init>(com.favorites.domain.result.ExceptionMsg)>-><com.favorites.domain.result.ExceptionMsg: java.lang.String getCode()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Integer: int intValue()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.domain.view.IndexCollectorView: void setMostPraisedUser(com.favorites.domain.User)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<com.favorites.web.UserController: com.favorites.domain.Config getConfig()>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><com.favorites.domain.UserIsFollow: void setUserName(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springframework.web.context.support.WebApplicationContextUtils: org.springframework.web.context.WebApplicationContext getRequiredWebApplicationContext(javax.servlet.ServletContext)>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<register-finalize <com.favorites.domain.enums.IsDelete: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.comm.filter.SecurityFilter: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPraisedUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setCollectTime(java.lang.String)>
<com.favorites.utils.Des3EncryptionUtil: byte[] decode(byte[],byte[])>-><javax.crypto.Cipher: byte[] doFinal(byte[])>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.domain.Favorites: void <init>()>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Integer: int intValue()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><ch.qos.logback.classic.Logger: void info(java.lang.String,java.lang.Throwable)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.favorites.comm.exception.GlobalExceptionHandler: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><com.favorites.utils.MessageUtil: java.lang.String getMessage(java.lang.String,java.lang.String[])>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.domain.enums.CollectType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><com.favorites.domain.UserIsFollow: void setIsFollow(java.lang.String)>
<com.favorites.comm.exception.GlobalExceptionHandler: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.domain.enums.IsDelete: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.favorites.web.IndexController: java.lang.String index(org.springframework.ui.Model)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Object)>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.domain.view.CollectorView: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setPraiseCount(java.lang.Long)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.util.ArrayList: int size()>
<com.favorites.domain.User: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><com.favorites.domain.Entitys: void <init>()>
<register-finalize <com.favorites.domain.enums.CollectType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.domain.enums.FollowStatus: void <clinit>()>-><com.favorites.domain.enums.FollowStatus: void <init>(java.lang.String,int)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><java.util.ArrayList: void <init>()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCommentedUser(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.schedule.ScheduledTasks: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><com.favorites.domain.LookRecord: void setUserId(java.lang.Long)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response saveLookRecord(java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><java.util.HashMap: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.io.File: boolean exists()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.LetterController: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.Base64: byte[] encode(byte[])>-><com.favorites.utils.Base64: byte[] encodeBase64(byte[],boolean)>
<com.favorites.utils.HtmlUtil: java.lang.String getImge(java.lang.String)>-><com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.domain.Feedback: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.springframework.mail.javamail.MimeMessageHelper: void setText(java.lang.String,boolean)>
<com.favorites.domain.enums.IsDelete: void <clinit>()>-><com.favorites.domain.enums.IsDelete: void <init>(java.lang.String,int)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List getLookRecords(java.lang.Long,org.springframework.data.domain.Pageable)>-><com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: void setCreateTime(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.service.impl.LetterServiceImpl: java.util.List findLetter(java.lang.Long,org.springframework.data.domain.Pageable)>-><java.util.ArrayList: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.service.impl.LookRecordServiceImpl: java.util.List getLookRecords(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.io.File: boolean isDirectory()>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.io.FileOutputStream: void write(byte[])>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><javax.servlet.http.Cookie: void setMaxAge(int)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.io.File: boolean exists()>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Integer: int intValue()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.util.Base64: java.util.Base64$Decoder getDecoder()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.comm.filter.SecurityFilter: boolean containsKey(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.io.OutputStream: void flush()>
<com.favorites.web.CollectController: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.Base64: byte[] encodeBase64(byte[],boolean)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.CollectController: java.lang.String getCollectLogoUrl(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.awt.image.BufferedImage: int getWidth()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.util.ArrayList: int size()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.String: int length()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.domain.User: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.IndexController: java.lang.String tool(org.springframework.ui.Model)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getUserId(java.lang.String)>-><com.favorites.utils.Des3EncryptionUtil: java.lang.String decode(java.lang.String,java.lang.String)>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><org.jsoup.Jsoup: org.jsoup.nodes.Document parse(java.io.InputStream,java.lang.String,java.lang.String)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.domain.enums.CollectType: void <clinit>()>-><com.favorites.domain.enums.CollectType: void <init>(java.lang.String,int)>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getImge(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectServiceImpl: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void setUserName(java.lang.String)>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.Double: double parseDouble(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>
<com.favorites.web.NoticeController: com.favorites.domain.result.ResponseData getNoticeNum()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.utils.Base64: byte[] decodeBase64(byte[])>-><com.favorites.utils.Base64: byte[] discardNonBase64(byte[])>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getQueryString()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.util.ArrayList: java.lang.Object get(int)>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.utils.Base64: byte[] discardNonBase64(byte[])>-><com.favorites.utils.Base64: boolean isBase64(byte)>
<com.favorites.web.CollectController: java.util.Map getPraiseStatus(org.springframework.ui.Model,java.lang.Long)>-><java.util.HashMap: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.LookAroundServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Integer: int intValue()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.domain.Favorites: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Integer: int intValue()>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.comm.aop.LoggerAdvice: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPopularUser(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><java.util.regex.Matcher: boolean find()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><java.lang.String: int length()>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.service.impl.LookRecordServiceImpl: java.util.List getLookRecords(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.BaseController: long getUserId()>-><java.lang.Long: long longValue()>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.webjars.WebJarAssetLocator: java.lang.String getFullPath(java.lang.String,java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.lang.System: long currentTimeMillis()>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.System: long currentTimeMillis()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><com.favorites.comm.filter.SecurityFilter: boolean containsKey(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.utils.HtmlUtil: java.lang.StringBuilder exportHtml(java.lang.String,java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.domain.Follow: void <init>()>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.lang.Throwable: void printStackTrace()>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.comm.Const: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: java.lang.String getContent()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><com.favorites.domain.UserIsFollow: void setProfilePicture(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.Throwable: java.lang.String getMessage()>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.io.File: void <init>(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String export(org.springframework.ui.Model)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.domain.view.IndexCollectorView: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.util.HashMap: void <init>()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.String: int indexOf(java.lang.String)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.text.DateFormat: java.lang.String format(java.util.Date)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><com.favorites.repository.BaseNativeSqlRepository: java.util.List sqlArrayList(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.domain.Favorites: java.lang.Long getId()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void <init>(com.favorites.domain.view.CollectView)>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.nodes.Element: org.jsoup.select.Elements select(java.lang.String)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Notice: void setCreateTime(java.lang.Long)>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.io.File: void <init>(java.lang.String)>
<com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.domain.User: java.lang.String getPassWord()>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><com.favorites.utils.HtmlUtil: java.lang.String getImge(java.lang.String)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Integer: int intValue()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.utils.HtmlUtil: java.lang.String getImge(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.NoticeServiceImpl: java.util.List getNoticeCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.domain.Follow: void setFollowId(java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.cache.CacheService: java.lang.String getMap(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.domain.Favorites: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCommentedUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>-><com.favorites.domain.result.Response: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.domain.Favorites: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.lang.Enum: java.lang.String toString()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchOther(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.Config getConfig()>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.WebConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean filterRegistration()>-><org.springframework.boot.web.servlet.FilterRegistrationBean: void <init>()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CommentController: java.util.List list(java.lang.Long)>-><com.favorites.web.CommentController: java.util.List convertComment(java.util.List)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.WebConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean filterRegistration()>-><org.springframework.boot.web.servlet.RegistrationBean: void setOrder(int)>
<com.favorites.cache.CacheService: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostFollowedUser(java.lang.Long)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: void setCreateTime(java.lang.Long)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: long getUserId()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getUserId(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.domain.view.CollectSummary: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.Base64: byte[] discardNonBase64(byte[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.utils.Des3EncryptionUtil: byte[] encode(byte[],byte[])>-><javax.crypto.Cipher: byte[] doFinal(byte[])>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: java.lang.String getEmail()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.domain.LookRecord: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: java.lang.String getPassWord()>
<com.favorites.domain.Config: java.lang.String getModelName()>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.utils.Des3EncryptionUtil: byte[] decode(byte[],byte[])>-><javax.crypto.Cipher: void init(int,java.security.Key)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.favorites.repository.BaseNativeSqlRepository: java.util.List sqlObjectList(java.lang.String,java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.cache.CacheService: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><java.lang.String: int indexOf(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>
<com.favorites.service.impl.FavoritesServiceImpl: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteLookRecord(java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.IndexController: java.lang.String tool(org.springframework.ui.Model)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response changePrivacy(java.lang.Long,com.favorites.domain.enums.CollectType)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: void setUserId(java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.LetterController: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Long: long longValue()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.CollectController: java.util.Map getPraiseStatus(org.springframework.ui.Model,java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.domain.view.IndexCollectorView: void <init>()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostFollowedUser(java.lang.Long)>-><com.favorites.repository.BaseNativeSqlRepository: java.util.List sqlObjectList(java.lang.String,java.lang.Object)>
<com.favorites.web.NoticeController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.LetterController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.utils.Des3EncryptionUtil: byte[] decode(byte[],byte[])>-><javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.favorites.web.BaseController: long getUserId()>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List scrollFiveCollect()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Notice: void setCollectId(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>-><com.favorites.utils.Des3EncryptionUtil: java.lang.String encode(java.lang.String,java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: void <clinit>()>-><java.util.HashSet: void <init>()>
<com.favorites.web.BaseController: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><java.lang.String: int indexOf(java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: java.lang.Long getId()>
<com.favorites.cache.CacheService: java.lang.String getMap(java.lang.String)>-><com.favorites.cache.CacheService: void addMaps(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.String: int lastIndexOf(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.domain.Favorites: void <init>()>
<com.favorites.domain.result.ExceptionMsg: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><com.favorites.domain.UrlLibrary: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.domain.Favorites: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.util.UUID: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchOther(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.nodes.Element: org.jsoup.nodes.Element child(int)>
<com.favorites.comm.Const: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.domain.Favorites: void <init>()>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: void setProfilePicture(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: java.lang.Long getCollectId()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.IndexController: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><javax.servlet.http.Cookie: void setPath(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String export(org.springframework.ui.Model)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.DateUtils: long getLastMonthTime()>-><com.favorites.utils.DateUtils: long getDayBegin(long)>
<com.favorites.web.UserController: java.util.List getFavorites()>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><java.net.URL: void <init>(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<com.favorites.web.WebJarController: void <init>()>-><org.webjars.WebJarAssetLocator: void <init>()>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setPraiseCount(java.lang.Long)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchMy(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>
<com.favorites.utils.Base64: void <clinit>()>-><java.lang.String: byte[] getBytes()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getImge(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<com.favorites.domain.result.ExceptionMsg: void <clinit>()>-><com.favorites.domain.result.ExceptionMsg: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><com.favorites.utils.HtmlUtil: java.lang.StringBuilder exportHtml(java.lang.String,java.lang.StringBuilder)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.service.impl.LookRecordServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostFollowedUser(java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.domain.User: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Integer: int intValue()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: void init(javax.servlet.FilterConfig)>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response delete(java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><com.favorites.domain.UserIsFollow: void setId(java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><java.util.regex.Matcher: java.lang.String group()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void setUrl(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.springframework.core.io.ClassPathResource: void <init>(java.lang.String)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCommentedUser(java.lang.String)>-><com.favorites.repository.BaseNativeSqlRepository: java.util.List sqlArrayList(java.lang.String)>
<com.favorites.utils.DateUtils: long getLastMonthTime()>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Enum: java.lang.String toString()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String codeToString(java.lang.String)>-><java.lang.String: void <init>(byte[])>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: long longValue()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.domain.Follow: void setCreateTime(java.lang.Long)>
<com.favorites.domain.result.Response: void <init>(com.favorites.domain.result.ExceptionMsg)>-><java.lang.Object: void <init>()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.Long getId()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setPraise(boolean)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getUserId(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.util.UUID: java.util.UUID randomUUID()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.Config getConfig()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.lang.StringBuilder exportHtml(java.lang.String,java.lang.StringBuilder)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.io.File: boolean mkdirs()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void <init>(com.favorites.domain.view.CollectView)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.domain.Follow: void setLastModifyTime(java.lang.Long)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getServletPath()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getUserId(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>-><com.favorites.domain.result.Response: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCollectUser()>-><java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.util.ArrayList: int size()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setCommentCount(java.lang.Long)>
<com.favorites.utils.HtmlUtil: java.lang.StringBuilder exportHtml(java.lang.String,java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><java.util.ArrayList: void <init>()>
<com.favorites.web.IndexController: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><javax.servlet.http.Cookie: void setMaxAge(int)>
<com.favorites.domain.enums.FollowStatus: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.utils.Des3EncryptionUtil: byte[] encode(byte[],byte[])>-><javax.crypto.Cipher: void init(int,java.security.Key)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List searchOther(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>
<com.favorites.web.FeedbackController: com.favorites.domain.result.Response save(com.favorites.domain.Feedback)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.MessageUtil: java.lang.String getMessage(java.lang.String,java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setPraiseCount(java.lang.Long)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><java.util.ArrayList: void <init>()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><com.favorites.comm.filter.SecurityFilter: java.lang.String getUserId(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: void setPassWord(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: long longValue()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.favorites.WebConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean filterRegistration()>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void addUrlPatterns(java.lang.String[])>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNoneBlank(java.lang.CharSequence[])>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPraisedUser(java.lang.String)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPraisedUser(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Long: long longValue()>
<com.favorites.web.NoticeController: com.favorites.domain.result.ResponseData getNoticeNum()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.LetterServiceImpl: java.util.List findLetter(java.lang.Long,org.springframework.data.domain.Pageable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.WebJarController: org.springframework.http.ResponseEntity locateWebjarAsset(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.springframework.http.ResponseEntity: void <init>(org.springframework.http.HttpStatus)>
<com.favorites.web.LetterController: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.LookRecordController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.service.impl.LetterServiceImpl: java.util.List findLetter(java.lang.Long,org.springframework.data.domain.Pageable)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.comm.Const: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<com.favorites.service.impl.NoticeServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><com.favorites.comm.filter.SecurityFilter: boolean containsSuffix(java.lang.String)>
<com.favorites.utils.DateUtils: long getDayBegin(long)>-><java.util.Date: void <init>(long)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.Jsoup: org.jsoup.nodes.Document parse(java.io.InputStream,java.lang.String,java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.util.ArrayList: int size()>
<com.favorites.utils.HtmlUtil: java.lang.StringBuilder exportHtml(java.lang.String,java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><java.util.ArrayList: void <init>()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.utils.Des3EncryptionUtil: byte[] encode(byte[],byte[])>-><javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.favorites.domain.Config: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updateConfig(java.lang.Long,java.lang.String,java.lang.String)>-><java.lang.Long: long longValue()>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.String: int indexOf(java.lang.String)>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteAll()>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchMy(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.web.CollectController: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void setProfilePicture(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.CollectController: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.schedule.ScheduledTasks: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.utils.Des3EncryptionUtil: byte[] encode(byte[],byte[])>-><javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String letterMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPopularUser(java.lang.String)>-><com.favorites.repository.BaseNativeSqlRepository: java.util.List sqlArrayList(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.io.FileInputStream: void <init>(java.io.File)>
<com.favorites.web.CollectController: java.util.List searchOther(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void <init>(com.favorites.domain.view.CollectView)>
<com.favorites.web.UserController: com.favorites.domain.Config getConfig()>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><java.net.URL: java.lang.String getProtocol()>
<com.favorites.web.CollectController: java.lang.String getCollectLogoUrl(java.lang.String)>-><com.favorites.cache.CacheService: java.lang.String getMap(java.lang.String)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: java.lang.Long getReplyUserId()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><com.favorites.domain.LookRecord: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.web.FollowController: com.favorites.domain.result.Response changeFollowStatus(java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.springframework.mail.javamail.MimeMessageHelper: void <init>(javax.mail.internet.MimeMessage,boolean)>
<com.favorites.web.CollectController: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.utils.MessageUtil: java.lang.String getMessage(java.lang.String,java.lang.String[])>-><java.lang.StringBuilder: void <init>()>
<com.favorites.service.impl.CollectServiceImpl: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List searchMy(java.lang.Long,java.lang.String,org.springframework.data.domain.Pageable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.URLUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryFiveUser(java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Object)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostFollowedUser(java.lang.Long)>-><com.favorites.domain.view.CollectorView: void <init>()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.favorites.domain.Collect: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostFollowedUser(java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><org.springframework.mail.javamail.MimeMessageHelper: void setTo(java.lang.String)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.CollectController: com.favorites.domain.Collect detail(java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>
<com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><com.favorites.comm.filter.SecurityFilter: java.lang.String codeToString(java.lang.String)>
<com.favorites.web.BaseController: java.lang.String getUserIp()>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.favorites.domain.Config: java.lang.String getCollectTypeName()>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.IndexController: java.lang.String lookAroundSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.web.UserController: com.favorites.domain.Config getConfig()>-><com.favorites.domain.Config: void <init>()>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.io.FileOutputStream: void <init>(java.io.File)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.jsoup.nodes.Element: org.jsoup.select.Elements select(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateIntroduction(java.lang.String)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void <init>(com.favorites.domain.view.CollectView)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.comm.filter.SecurityFilter: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.domain.Entitys: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.Long: long longValue()>
<com.favorites.web.CommentController: java.util.List convertComment(java.util.List)>-><com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>
<com.favorites.utils.DateUtils: long getDayBegin(long)>-><java.text.DateFormat: java.lang.String format(java.util.Date)>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.lang.Integer: java.lang.String toHexString(int)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.LetterServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.net.URL: void <init>(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getUserId(java.lang.String)>-><java.lang.String: int indexOf(java.lang.String)>
<com.favorites.domain.Comment: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><javax.servlet.http.Cookie: void <init>(java.lang.String,java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: java.lang.String getUserName()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.io.FileInputStream: void close()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.WebConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean filterRegistration()>-><com.favorites.comm.filter.SecurityFilter: void <init>()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Notice: void setReaded(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Notice: void <init>()>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.WebConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean filterRegistration()>-><org.springframework.boot.web.servlet.FilterRegistrationBean: void setFilter(javax.servlet.Filter)>
<com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg)>-><com.favorites.domain.result.Response: void <init>(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><java.lang.String: java.lang.String trim()>
<com.favorites.utils.HtmlUtil: java.lang.String getImge(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.io.FileOutputStream: void close()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.nodes.Element: org.jsoup.select.Elements children()>
<register-finalize <com.favorites.domain.enums.FollowStatus: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.service.impl.FeedbackServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.CollectController: java.util.Map getFavoriteResult(java.lang.String,java.lang.String)>-><java.util.HashMap: void <init>()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><com.favorites.utils.DateUtils: long getLastMonthTime()>
<com.favorites.web.NoticeController: com.favorites.domain.result.ResponseData getNoticeNum()>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>-><com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Enum: java.lang.String toString()>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.web.HomeController: java.lang.String userContentShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: long longValue()>
<com.favorites.web.UserController: java.util.List getFavorites()>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.domain.Follow: void <init>()>-><com.favorites.domain.Entitys: void <init>()>
<com.favorites.web.HomeController: java.lang.String praiseMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.util.ArrayList: int size()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<com.favorites.web.IndexController: java.lang.String lookAroundStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.util.ArrayList: int size()>
<com.favorites.web.BaseController: com.favorites.domain.User getUser()>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List getNoticeCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable)>-><com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>
<com.favorites.web.IndexController: java.lang.String collect(org.springframework.ui.Model)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result(com.favorites.domain.result.ExceptionMsg)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><com.favorites.domain.view.CollectSummary: void setId(java.lang.Long)>
<com.favorites.web.HomeController: java.lang.String userPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><com.favorites.domain.User: void setId(java.lang.Long)>
<com.favorites.web.FavoritesController: java.util.List getFavorites(java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.IndexController: java.lang.String collectorPageShow(org.springframework.ui.Model,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>
<com.favorites.web.NoticeController: com.favorites.domain.result.ResponseData getNoticeNum()>-><com.favorites.domain.result.ResponseData: void <init>(com.favorites.domain.result.ExceptionMsg,java.lang.Object)>
<com.favorites.web.CommentController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.web.BaseController: com.favorites.domain.result.Response result()>-><com.favorites.domain.result.Response: void <init>()>
<com.favorites.web.IndexController: java.lang.String logout(javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)>-><javax.servlet.http.Cookie: void <init>(java.lang.String,java.lang.String)>
<com.favorites.service.impl.FavoritesServiceImpl: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>-><java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<com.favorites.comm.aop.LoggerAdvice: void addBeforeLogger(org.aspectj.lang.JoinPoint)>-><com.favorites.comm.aop.LoggerAdvice: java.lang.String parseParames(java.lang.Object[])>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.LetterController: java.util.List getLetterList(java.lang.Integer,java.lang.Integer)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.domain.Favorites: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String encode(java.lang.String,java.lang.String)>-><com.favorites.utils.Base64: byte[] encode(byte[])>
<com.favorites.service.impl.CollectServiceImpl: java.util.List getCollects(java.lang.String,java.lang.Long,org.springframework.data.domain.Pageable,java.lang.Long,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response addFavorites(java.lang.String)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><com.favorites.domain.LookRecord: void setCreateTime(java.lang.Long)>
<com.favorites.domain.view.LetterSummary: void <init>(com.favorites.domain.view.LetterView)>-><com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>
<com.favorites.utils.MessageUtil: java.lang.String getMessage(java.lang.String,java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<com.favorites.service.impl.ConfigServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.jsoup.helper.HttpConnection: org.jsoup.Connection userAgent(java.lang.String)>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.text.SimpleDateFormat: void <init>(java.lang.String)>
<com.favorites.service.impl.FeedbackServiceImpl: void saveFeeddback(com.favorites.domain.Feedback,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostPraisedUser(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><com.favorites.web.BaseController: javax.servlet.http.HttpSession getSession()>
<com.favorites.web.CollectController: void importCollect(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>-><java.util.HashMap: java.util.Set entrySet()>
<com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>-><java.util.Date: long getTime()>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List convert(java.util.List)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: void setUserId(java.lang.Long)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlOne(java.io.InputStream)>-><org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response deleteLookRecord(java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.io.File: boolean delete()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: java.lang.Long getId()>
<com.favorites.web.CollectController: void export(java.lang.String,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.schedule.ScheduledTasks: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response delete(java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.CommentController: java.util.List convertComment(java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>-><java.util.Date: void <init>()>
<com.favorites.web.CollectController: java.util.List simple(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><java.lang.Integer: int intValue()>
<com.favorites.comm.filter.SecurityFilter: java.lang.String getRef(javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.favorites.web.CollectController: java.util.Map getPraiseStatus(org.springframework.ui.Model,java.lang.Long)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String atMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.domain.result.Response: void <init>(com.favorites.domain.result.ExceptionMsg)>-><com.favorites.domain.result.ExceptionMsg: java.lang.String getMsg()>
<com.favorites.web.CollectController: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<com.favorites.web.UserController: com.favorites.domain.result.Response setNewPassword(java.lang.String,java.lang.String,java.lang.String)>-><java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.utils.StringUtil: java.util.List getAtUser(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String getLookRecordSimple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><org.jsoup.Jsoup: org.jsoup.Connection connect(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.Response sendForgotPasswordEmail(java.lang.String)>-><java.sql.Timestamp: void <init>(long)>
<com.favorites.web.HomeController: java.lang.String commentMe(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<com.favorites.utils.Base64: byte[] decode(byte[])>-><com.favorites.utils.Base64: byte[] decodeBase64(byte[])>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<com.favorites.web.BaseController: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.utils.HtmlUtil: java.lang.String download(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String decode(java.lang.String,java.lang.String)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String search(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String[])>
<com.favorites.cache.CacheService: java.lang.String getMap(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setCollectTime(java.lang.String)>
<com.favorites.service.impl.CollectServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setPraise(boolean)>
<com.favorites.web.LetterController: com.favorites.domain.result.Response sendLetter(com.favorites.domain.Letter)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostCommentedUser(java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.util.Map parseHtmlTwo(java.io.InputStream)>-><org.jsoup.nodes.Document: java.lang.String nodeName()>
<com.favorites.web.CollectController: java.util.List standard(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<com.favorites.web.CollectController: com.favorites.domain.result.Response like(java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.web.BaseController: java.lang.String cookieSign(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.favorites.comm.exception.GlobalExceptionHandler: org.springframework.web.servlet.ModelAndView defaultErrorHandler(java.lang.Exception,javax.servlet.http.HttpServletRequest)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.StringBuffer getRequestURL()>
<com.favorites.WebConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean filterRegistration()>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void addInitParameter(java.lang.String,java.lang.String)>
<com.favorites.repository.impl.CollectorRepositoryImpl: java.lang.Long getMostActiveUser(java.lang.String)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.LookRecordController: com.favorites.domain.result.Response saveLookRecord(java.lang.Long)>-><com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>
<com.favorites.utils.DateUtils: java.lang.String getTimeFormatText(java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.comm.filter.SecurityFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.favorites.web.HomeController: java.lang.String standard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.comm.filter.SecurityFilter: void <init>()>-><java.lang.Object: void <init>()>
<com.favorites.web.CommentController: com.favorites.domain.result.Response add(com.favorites.domain.Comment)>-><com.favorites.domain.Comment: void setReplyUserId(java.lang.Long)>
<com.favorites.service.impl.LookRecordServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.Long)>-><com.favorites.domain.view.CollectSummary: void setPraise(boolean)>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String decode(java.lang.String,java.lang.String)>-><java.lang.String: void <init>(byte[],java.lang.String)>
<com.favorites.service.impl.LookAroundServiceImpl: java.util.List queryCollectExplore(org.springframework.data.domain.Pageable,java.lang.Long,java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response updateFavorites(java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.utils.Des3EncryptionUtil: java.lang.String decode(java.lang.String,java.lang.String)>-><com.favorites.utils.Des3EncryptionUtil: byte[] decode(byte[],byte[])>
<com.favorites.web.BaseController: long getUserId()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.CollectController: com.favorites.domain.result.Response collect(com.favorites.domain.Collect)>-><com.favorites.domain.Collect: java.lang.String getLogoUrl()>
<com.favorites.utils.URLUtil: java.lang.String getDomainUrl(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.comm.filter.SecurityFilter: java.lang.String codeToString(java.lang.String)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><com.favorites.domain.Notice: void setOperId(java.lang.String)>
<register-finalize <com.favorites.utils.FileUtil: void uploadFile(byte[],java.lang.String,java.lang.String)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setCollectTime(java.lang.String)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.lang.Double: java.lang.Double valueOf(double)>
<com.favorites.web.BaseController: java.lang.String getUserName()>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.cache.CacheService: void addMaps(java.lang.String)>-><com.favorites.domain.UrlLibrary: void setLogoUrl(java.lang.String)>
<com.favorites.web.FavoritesController: com.favorites.domain.result.Response delFavorites(java.lang.Long)>-><com.favorites.web.BaseController: com.favorites.domain.result.Response result()>
<com.favorites.web.HomeController: java.lang.String simple(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><org.springframework.data.domain.PageRequest: org.springframework.data.domain.PageRequest of(int,int,org.springframework.data.domain.Sort)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData login(com.favorites.domain.User,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.service.impl.LookRecordServiceImpl: void saveLookRecord(java.lang.Long,java.lang.Long)>-><java.lang.Long: long longValue()>
<com.favorites.web.CollectController: java.util.List lookAround(java.lang.Integer,java.lang.Integer)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.service.impl.CollectorServiceImpl: com.favorites.domain.view.IndexCollectorView getCollectors()>-><com.favorites.domain.view.IndexCollectorView: void setMostFollowedUser(com.favorites.domain.User)>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.favorites.domain.enums.LetterType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.favorites.web.FavoritesController: void <init>()>-><com.favorites.web.BaseController: void <init>()>
<com.favorites.web.NoticeController: com.favorites.domain.result.Response reply(com.favorites.domain.Comment)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.utils.DateUtils: long getCurrentTime()>
<com.favorites.web.HomeController: java.lang.String getLookRecordStandard(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long)>-><com.favorites.web.BaseController: long getUserId()>
<com.favorites.web.FavoritesController: com.favorites.domain.result.ResponseData addImportFavorites()>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.web.BaseController: java.lang.String getPwd(java.lang.String)>
<com.favorites.comm.aop.LoggerAdvice: java.lang.String parseParames(java.lang.Object[])>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<com.favorites.utils.MD5Util: java.lang.String encrypt(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<com.favorites.web.UserController: com.favorites.domain.result.Response updatePassword(java.lang.String,java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.favorites.web.UserController: com.favorites.domain.result.Response create(com.favorites.domain.User)>-><com.favorites.domain.User: void setCreateTime(java.lang.Long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadBackground(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.favorites.service.impl.NoticeServiceImpl: java.util.List convertCollect(org.springframework.data.domain.Page,java.lang.String)>-><com.favorites.domain.view.CollectSummary: void setUserId(java.lang.Long)>
<com.favorites.web.CollectController: java.util.List searchMy(org.springframework.ui.Model,java.lang.Integer,java.lang.Integer,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData uploadHeadPortrait(java.lang.String)>-><java.util.UUID: java.lang.String toString()>
<com.favorites.web.IndexController: java.lang.String home(org.springframework.ui.Model)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.favorites.web.UserController: com.favorites.domain.result.ResponseData updateUserName(java.lang.String)>-><com.favorites.web.BaseController: com.favorites.domain.User getUser()>
<com.favorites.utils.HtmlUtil: java.lang.String getPageImg(java.lang.String)>-><java.awt.image.BufferedImage: int getHeight()>
