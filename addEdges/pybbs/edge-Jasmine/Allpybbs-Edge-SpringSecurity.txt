<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.Object getPrimaryPrincipal()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<org.apache.shiro.web.servlet.SimpleCookie: void saveTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: int getVersion()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: void <init>(java.net.URL)>-><java.net.URL: java.lang.String getFile()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: org.slf4j.Logger delegate()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection resolvePrincipals()>-><org.apache.shiro.session.ProxiedSession: java.lang.Object getAttribute(java.lang.Object)>
<java.util.Optional: java.util.Optional map(java.util.function.Function)>-><java.util.Optional: java.util.Optional empty()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.PriorityBlockingQueue: int size()>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.apache.poi.hssf.record.common.UnicodeString: int compareTo(java.lang.Object)>
<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>-><java.security.Provider$Service: java.security.Provider getProvider()>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getCachedAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session start(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStart(org.apache.shiro.session.Session)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.AbstractRememberMeManager: void onLogout(org.apache.shiro.subject.Subject)>
<org.apache.shiro.crypto.JcaCipherService: byte[] generateInitializationVector(boolean)>-><org.apache.shiro.crypto.JcaCipherService: java.security.SecureRandom ensureSecureRandom()>
<javax.crypto.Cipher: javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.lang.Boolean: int compareTo(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<org.apache.shiro.web.session.HttpServletSession: java.lang.String getHost()>-><org.apache.shiro.web.session.HttpServletSession: java.lang.Object getAttribute(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.apache.shiro.web.servlet.SimpleCookie: void appendVersion(java.lang.StringBuilder,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void setAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object,java.lang.Object)>-><org.apache.shiro.web.session.HttpServletSession: void setAttribute(java.lang.Object,java.lang.Object)>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.File)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DelegatingSession: void stop()>
<org.apache.shiro.realm.AuthenticatingRealm: void assertCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.credential.CredentialsMatcher getCredentialsMatcher()>
<sun.rmi.runtime.Log$InternalStreamHandler: void <init>(java.io.OutputStream)>-><java.util.logging.StreamHandler: void <init>(java.io.OutputStream,java.util.logging.Formatter)>
<org.apache.shiro.session.StoppedSessionException: void <init>(java.lang.String)>-><org.apache.shiro.session.InvalidSessionException: void <init>(java.lang.String)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.Subject getSubject()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.crypto.DefaultBlockCipherService: byte[] generateInitializationVector(boolean)>-><org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String getModeName()>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject login(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.mgt.DefaultSecurityManager: void onFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>
<org.apache.shiro.mgt.AbstractRememberMeManager: void rememberIdentity(org.apache.shiro.subject.Subject,org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)>-><java.util.logging.StreamHandler: void flushAndClose()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<org.apache.shiro.web.subject.support.WebDelegatingSubject: org.apache.shiro.session.mgt.SessionContext createSessionContext()>-><org.apache.shiro.web.session.mgt.DefaultWebSessionContext: void <init>()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.session.mgt.SessionKey getSessionKey(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: java.io.Serializable getSessionId()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: void <init>(org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler)>-><java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyExpiration(org.apache.shiro.session.Session)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: boolean isEmpty()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: java.lang.String ensurePadding(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.web.util.WebUtils: javax.servlet.ServletRequest getRequest(java.lang.Object)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest getServletRequest()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendPath(java.lang.StringBuilder,java.lang.String)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.HashSet: boolean isEmpty()>
<org.apache.shiro.session.mgt.SimpleSession: java.util.Map getAttributesLazy()>-><org.apache.shiro.session.mgt.SimpleSession: void setAttributes(java.util.Map)>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set getRealmNames()>-><java.util.LinkedHashMap: java.util.Set keySet()>
<org.apache.shiro.web.util.WebUtils: javax.servlet.ServletRequest getRequest(java.lang.Object)>-><org.apache.shiro.web.session.mgt.WebSessionKey: javax.servlet.ServletRequest getServletRequest()>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarUrlStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: java.lang.String substring(int)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void setSessionValidationScheduler(org.apache.shiro.session.mgt.SessionValidationScheduler)>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.session.ProxiedSession: java.lang.String getHost()>-><org.apache.shiro.session.ProxiedSession: java.lang.String getHost()>
<com.google.common.collect.ForwardingMap: java.util.Set entrySet()>-><java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<javax.crypto.Cipher: void chooseFirstProvider()>-><java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>
<org.apache.shiro.session.ProxiedSession: java.lang.Object getAttribute(java.lang.Object)>-><org.apache.shiro.web.session.HttpServletSession: java.lang.Object getAttribute(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><java.util.ResourceBundle$RBClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<java.util.Collections$EmptyList: boolean containsAll(java.util.Collection)>-><java.util.AbstractCollection: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries: java.util.Iterator iterator()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.mgt.CookieRememberMeManager: org.apache.shiro.web.servlet.Cookie getCookie()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>-><org.apache.shiro.codec.Base64: java.lang.String encodeToString(byte[])>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session doCreateSession(org.apache.shiro.session.mgt.SessionContext)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.util.ClassUtils$1: java.lang.ClassLoader doGetClassLoader()>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.util.Calendar: java.util.Date getTime()>
<org.apache.shiro.session.ProxiedSession: java.lang.String getHost()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String getHost()>
<org.apache.shiro.io.DefaultSerializer: byte[] serialize(java.lang.Object)>-><java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection onRememberedPrincipalFailure(java.lang.RuntimeException,org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(org.apache.shiro.subject.SubjectContext)>
<org.apache.shiro.crypto.JcaCipherService: byte[] crypt(javax.crypto.Cipher,byte[])>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.io.DefaultSerializer: byte[] serialize(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Collections$1: java.lang.Object next()>
<java.util.logging.ErrorManager: void <init>()>-><java.lang.Object: void <init>()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.File)>-><org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.InputStream)>
<org.apache.shiro.mgt.AbstractRememberMeManager: byte[] encrypt(byte[])>-><org.apache.shiro.mgt.AbstractRememberMeManager: byte[] getEncryptionCipherKey()>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.web.mgt.DefaultWebSecurityManager: org.apache.shiro.session.mgt.SessionKey getSessionKey(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.util.WebUtils: boolean isWeb(java.lang.Object)>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><org.apache.http.client.config.RequestConfig$Builder: org.apache.http.client.config.RequestConfig$Builder setSocketTimeout(int)>
<java.util.concurrent.PriorityBlockingQueue: void removeAt(int)>-><java.util.concurrent.PriorityBlockingQueue: void siftUpUsingComparator(int,java.lang.Object,java.lang.Object[],java.util.Comparator)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet: java.util.Iterator iterator()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.AbstractMap$2$1: boolean hasNext()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><java.rmi.server.LogStream: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.InputStream)>-><java.io.ByteArrayOutputStream: byte[] toByteArray()>
<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>-><sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>-><javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>
<org.apache.shiro.session.ProxiedSession: void setAttribute(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: void setAttribute(java.lang.Object,java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.util.Date: int compareTo(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolvePrincipals(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: java.lang.Object getCredentials(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.Object getCredentials()>
<org.apache.shiro.web.servlet.SimpleCookie: void <init>(org.apache.shiro.web.servlet.Cookie)>-><org.apache.shiro.web.servlet.SimpleCookie: int getVersion()>
<java.util.logging.LogManager: java.util.logging.Filter getFilterProperty(java.lang.String,java.util.logging.Filter)>-><java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.elasticsearch.client.Node: int hashCode()>-><java.util.Objects: int hash(java.lang.Object[])>
<org.apache.shiro.web.util.WebUtils: javax.servlet.ServletRequest getRequest(java.lang.Object)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionContext: javax.servlet.ServletRequest getServletRequest()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.web.mgt.DefaultWebSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: java.lang.String resolveHost()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><org.elasticsearch.client.RestClientBuilder$2: void <init>(org.elasticsearch.client.RestClientBuilder,org.apache.http.impl.nio.client.HttpAsyncClientBuilder)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.apache.shiro.mgt.AbstractRememberMeManager: byte[] convertPrincipalsToBytes(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.mgt.AbstractRememberMeManager: byte[] encrypt(byte[])>
<com.google.common.collect.AbstractMapBasedMultimap$KeySet: boolean containsAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: int compareTo(java.lang.Object)>
<java.util.logging.StreamHandler: void configure()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: java.util.Map getAttributesLazy()>-><java.util.HashMap: void <init>()>
<java.util.logging.StreamHandler: void configure()>-><java.util.logging.LogManager: java.util.logging.Level getLevelProperty(java.lang.String,java.util.logging.Level)>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildTransformationString()>-><org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildTransformationString(java.lang.String,java.lang.String,int)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.PrincipalCollection getRememberedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.SubstituteLogger: boolean isWarnEnabled()>
<org.apache.shiro.web.mgt.DefaultWebSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest resolveServletRequest()>
<org.apache.shiro.web.servlet.SimpleCookie: boolean pathMatches(java.lang.String,java.lang.String)>-><java.lang.String: char charAt(int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection)>-><java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection,int)>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergePrincipals(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.io.DefaultSerializer: byte[] serialize(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)>-><java.lang.Error: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject login(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: boolean isInfoEnabled()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>-><java.lang.Object: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: void <init>()>-><java.lang.Object: void <init>()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.rmi.server.LogStream: void write(int)>-><java.io.PrintStream: void flush()>
<org.apache.shiro.codec.CodecException: void <init>(java.lang.Throwable)>-><org.apache.shiro.ShiroException: void <init>(java.lang.Throwable)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.lang.Float: int compareTo(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<org.apache.shiro.web.mgt.DefaultWebSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.DefaultSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>
<co.yiiu.pybbs.config.service.SmsService: boolean sendSms(java.lang.String,java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.File)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void enableSessionValidation()>-><java.util.concurrent.Executors$DelegatedScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.lang.Long: int compareTo(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: java.security.SecureRandom getDefaultSecureRandom()>-><java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.logging.LogManager: java.util.logging.Formatter getFormatterProperty(java.lang.String,java.util.logging.Formatter)>-><java.lang.Class: java.lang.Object newInstance()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: void onLogout(org.apache.shiro.subject.PrincipalCollection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.AuthenticatingRealm: void cacheAuthenticationInfoIfPossible(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.realm.AuthenticatingRealm: java.lang.Object getAuthenticationCacheKey(org.apache.shiro.authc.AuthenticationToken)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection,int)>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<java.util.AbstractList: int hashCode()>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.lang.System: long currentTimeMillis()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.AbstractRememberMeManager: void onFailedLogin(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.elasticsearch.client.Node: int hashCode()>
<sun.rmi.runtime.Log: java.lang.String[] getSource()>-><java.lang.StackTraceElement: java.lang.String getMethodName()>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: void init(javax.crypto.Cipher,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>-><javax.crypto.Cipher: void init(int,java.security.Key)>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray()>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergeAuthenticationState(org.apache.shiro.subject.Subject)>-><java.lang.Boolean: boolean booleanValue()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.RegularEnumSet: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.apache.shiro.mgt.AbstractRememberMeManager: void onSuccessfulLogin(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.util.ReflectionUtils: void handleReflectionException(java.lang.Exception)>-><org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>
<com.google.common.collect.AbstractMapBasedMultimap$KeySet: java.util.Spliterator spliterator()>-><com.google.common.collect.ForwardingMap: java.util.Set keySet()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getCachedAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.UnknownSessionException: void <init>(java.lang.String)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void enableSessionValidation()>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: void <init>(org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: void login(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session decorate(org.apache.shiro.session.Session)>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergePrincipals(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSubjectDAO: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><org.apache.shiro.util.UnknownClassException: void <init>(java.lang.String)>
<org.apache.shiro.mgt.AbstractRememberMeManager: byte[] serialize(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.io.Serializer getSerializer()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.rmi.runtime.Log$LoggerLog$2: java.lang.Void run()>-><java.util.logging.LogManager$RootLogger: void addHandler(java.util.logging.Handler)>
<org.apache.shiro.codec.Base64: java.lang.String encodeToString(byte[])>-><org.apache.shiro.codec.CodecSupport: java.lang.String toString(byte[])>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher newCipherInstance(boolean)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.logging.StreamHandler: void setEncoding(java.lang.String)>-><java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
<java.util.logging.StreamHandler: void flushAndClose()>-><java.util.logging.Formatter: java.lang.String getTail(java.util.logging.Handler)>
<ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.Logger: void filterAndLog_2(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Throwable)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: boolean isRunAs()>-><org.apache.shiro.subject.support.DelegatingSubject: java.util.List getRunAsPrincipalsStack()>
<org.apache.shiro.codec.CodecSupport: byte[] objectToBytes(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.logging.Handler: void <init>()>-><java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>
<java.rmi.server.LogStream: void write(int)>-><java.util.Date: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSubjectDAO: org.apache.shiro.subject.Subject save(org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionContext: javax.servlet.ServletResponse getServletResponse()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<javax.servlet.http.HttpServletResponseWrapper: void setHeader(java.lang.String,java.lang.String)>-><javax.servlet.http.HttpServletResponseWrapper: void setHeader(java.lang.String,java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String toCookieDate(java.util.Date)>-><java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
<org.apache.shiro.realm.AuthenticatingRealm: void cacheAuthenticationInfoIfPossible(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.cache.Cache getAvailableAuthenticationCache()>
<org.apache.shiro.mgt.DefaultSubjectDAO: void delete(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSubjectDAO: void removeFromSession(org.apache.shiro.subject.Subject)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session doCreateSession(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void create(org.apache.shiro.session.Session)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.flywaydb.core.internal.schemahistory.AppliedMigration: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.crypto.DefaultBlockCipherService: byte[] generateInitializationVector(boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(char[])>-><org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.String,java.lang.String)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.SubList$1: boolean hasNext()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: org.apache.shiro.session.Session storeSession(java.io.Serializable,org.apache.shiro.session.Session)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<org.apache.shiro.subject.support.DelegatingSubject: void <init>(org.apache.shiro.subject.PrincipalCollection,boolean,java.lang.String,org.apache.shiro.session.Session,boolean,org.apache.shiro.mgt.SecurityManager)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session decorate(org.apache.shiro.session.Session)>
<org.apache.shiro.session.mgt.DelegatingSession: void <init>(org.apache.shiro.session.mgt.NativeSessionManager,org.apache.shiro.session.mgt.SessionKey)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.Introspector: javax.management.NotCompliantMBeanException throwException(java.lang.Class,java.lang.Throwable)>-><org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>
<org.apache.shiro.codec.CodecSupport: byte[] objectToBytes(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<co.yiiu.pybbs.util.bcrypt.BCryptPasswordEncoder: boolean matches(java.lang.CharSequence,java.lang.String)>-><java.lang.String: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher initNewCipher(int,byte[],byte[],boolean)>-><javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject doCreateSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.mgt.SubjectFactory getSubjectFactory()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolveSession(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Throwable)>
<sun.rmi.runtime.Log$LoggerLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator: java.io.Serializable generateId(org.apache.shiro.session.Session)>-><java.util.UUID: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session createExposedSession(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionKey: void <init>(java.io.Serializable)>
<org.apache.shiro.subject.support.DelegatingSubject: void logout()>-><org.apache.shiro.subject.support.DelegatingSubject: void clearRunAsIdentitiesInternal()>
<com.google.gson.internal.LinkedTreeMap$Node: int hashCode()>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session newSessionInstance(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.SimpleSessionFactory: org.apache.shiro.session.Session createSession(org.apache.shiro.session.mgt.SessionContext)>
<javax.crypto.Cipher: javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>-><javax.crypto.Cipher: java.lang.String getOpmodeString(int)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: void onLogout(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.authc.AbstractAuthenticator: void onLogout(org.apache.shiro.subject.PrincipalCollection)>
<freemarker.template.DefaultIterableAdapter: freemarker.template.TemplateModelIterator iterator()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.InputStream)>-><org.apache.shiro.codec.CodecException: void <init>(java.lang.Throwable)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergePrincipals(org.apache.shiro.subject.Subject)>-><org.apache.shiro.session.ProxiedSession: void setAttribute(java.lang.Object,java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>
<java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)>-><java.lang.StringBuilder: void <init>()>
<javax.crypto.Cipher: void chooseFirstProvider()>-><javax.crypto.Cipher$Transform: int supportsModePadding(java.security.Provider$Service)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.lang.String: int hashCode()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.Vector: boolean isEmpty()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void onExpiration(org.apache.shiro.session.Session)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ScheduledThreadPoolExecutor: void delayedExecute(java.util.concurrent.RunnableScheduledFuture)>-><java.util.concurrent.PriorityBlockingQueue: boolean add(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: long getSessionValidationInterval()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getCachedAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.realm.AuthenticatingRealm: java.lang.Object getAuthenticationCacheKey(org.apache.shiro.authc.AuthenticationToken)>
<org.apache.logging.log4j.message.ParameterFormatter: void handleErrorInObjectToString(java.lang.Object,java.lang.StringBuilder,java.lang.Throwable)>-><org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void delete(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<java.util.logging.StreamHandler: void configure()>-><java.util.logging.Handler: void setLevel(java.util.logging.Level)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.time.chrono.ChronoZonedDateTime: int compareTo(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>-><org.apache.shiro.web.servlet.SimpleCookie: void saveTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.springframework.util.unit.DataSize: int compareTo(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<ch.qos.logback.core.helpers.ThrowableToStringArray: java.lang.String formatFirstLine(java.lang.Throwable,java.lang.StackTraceElement[])>-><org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.flywaydb.core.internal.sqlscript.SqlScript: int compareTo(java.lang.Object)>
<org.elasticsearch.client.Node: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.util.UnknownClassException: void <init>(java.lang.String)>-><org.apache.shiro.ShiroException: void <init>(java.lang.String)>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.Object getPrimaryPrincipal()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolveSession(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolvePrincipals(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection getIdentityToRemember(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: org.apache.shiro.subject.PrincipalCollection getPrincipals()>
<java.util.logging.StreamHandler: void setEncoding(java.lang.String)>-><java.util.logging.Handler: void setEncoding(java.lang.String)>
<org.apache.shiro.realm.AuthorizingRealm: void clearCachedAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.AuthorizingRealm: java.lang.Object getAuthorizationCacheKey(org.apache.shiro.subject.PrincipalCollection)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.web.mgt.DefaultWebSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager resolveSecurityManager()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.lang.StringBuilder: int length()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.time.YearMonth: int compareTo(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.lang.Byte: int compareTo(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.nio.charset.Charset: int compareTo(java.lang.Object)>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection getRememberedPrincipals(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection convertBytesToPrincipals(byte[],org.apache.shiro.subject.SubjectContext)>
<java.util.Collections$EmptyList: boolean containsAll(java.util.Collection)>-><java.util.TreeSet: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<sun.rmi.runtime.Log$LoggerLog$2: java.lang.Void run()>-><sun.rmi.runtime.Log$LoggerLog: java.util.logging.Handler access$100()>
<org.apache.shiro.web.mgt.DefaultWebSecurityManager: org.apache.shiro.subject.SubjectContext copy(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext copy(org.apache.shiro.subject.SubjectContext)>
<org.elasticsearch.client.PersistentCredentialsAuthenticationStrategy: void <init>()>-><org.apache.http.impl.client.TargetAuthenticationStrategy: void <init>()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.PrincipalCollection getRememberedIdentity(org.apache.shiro.subject.SubjectContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.time.LocalTime: int compareTo(java.lang.Object)>
<org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session createSession(javax.servlet.http.HttpSession,java.lang.String)>-><org.apache.shiro.web.session.HttpServletSession: void <init>(javax.servlet.http.HttpSession,java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: int indexOf(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<co.yiiu.pybbs.controller.admin.BaseAdminController: co.yiiu.pybbs.model.AdminUser getAdminUser()>-><org.apache.shiro.subject.support.DelegatingSubject: java.lang.Object getPrincipal()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session createExposedSession(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.DelegatingSession: void <init>(org.apache.shiro.session.mgt.NativeSessionManager,org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolvePrincipals(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection resolvePrincipals()>
<org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>-><org.slf4j.event.EventRecodingLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void afterSessionValidationEnabled()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><javax.management.ObjectName: int compareTo(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.elasticsearch.client.Node: int hashCode()>
<java.util.Collections$EmptyList: boolean containsAll(java.util.Collection)>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.apache.shiro.subject.support.DelegatingSubject: boolean isSessionCreationEnabled()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext ensureSecurityManager(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<org.apache.shiro.subject.support.DefaultSubjectContext: void setSubject(org.apache.shiro.subject.Subject)>-><org.apache.shiro.util.MapContext: void nullSafePut(java.lang.String,java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: boolean resolveAuthenticated()>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.authc.AuthenticationInfo getAuthenticationInfo()>
<org.apache.shiro.util.ClassUtils$1: java.lang.ClassLoader doGetClassLoader()>-><java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><org.apache.http.client.config.RequestConfig$Builder: org.apache.http.client.config.RequestConfig build()>
<java.util.Collections$EmptyList: boolean containsAll(java.util.Collection)>-><java.util.AbstractMap$1: boolean isEmpty()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.SubstituteLogger: boolean isWarnEnabled()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.lang.ProcessEnvironment$Value: int compareTo(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSubjectDAO: org.apache.shiro.subject.Subject save(org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject login(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.mgt.DefaultSecurityManager: void onSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.io.DefaultSerializer: java.lang.Object deserialize(byte[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.logging.StreamHandler: void flushAndClose()>-><java.io.OutputStreamWriter: void flush()>
<org.apache.shiro.mgt.DefaultSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: java.lang.String resolveHost()>
<org.apache.shiro.authc.AbstractAuthenticator: void notifyLogout(org.apache.shiro.subject.PrincipalCollection)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.shiro.web.mgt.DefaultWebSessionStorageEvaluator: boolean isSessionStorageEnabled(org.apache.shiro.subject.Subject)>-><org.apache.shiro.web.util.WebUtils: boolean _isSessionCreationEnabled(java.lang.Object)>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authz.AuthorizationInfo doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doSingleRealmAuthentication(org.apache.shiro.realm.Realm,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.UnknownAccountException: void <init>(java.lang.String)>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><java.rmi.server.LogStream: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>-><java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>
<co.yiiu.pybbs.config.realm.MyCredentialsMatcher: boolean doCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.String,java.lang.String)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: void remove()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<org.apache.shiro.session.ProxiedSession: void stop()>-><org.apache.shiro.subject.support.DelegatingSubject$StoppingAwareProxiedSession: void stop()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.flywaydb.core.internal.callback.SqlScriptCallbackFactory$SqlScriptCallback: int compareTo(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authz.AuthorizationInfo doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.authz.SimpleAuthorizationInfo: void addStringPermissions(java.util.Collection)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.Object: java.lang.String toString()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.logging.Handler: void reportError(java.lang.String,java.lang.Exception,int)>-><java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<sun.rmi.runtime.NewThreadAction: java.lang.Thread run()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarUrlStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session getSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.logging.Handler: void reportError(java.lang.String,java.lang.Exception,int)>-><java.io.PrintStream: void println(java.lang.String)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><javax.management.ObjectName: int compareTo(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><freemarker.ext.beans.HashAdapter$1: java.util.Iterator iterator()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void setAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: void setAttribute(java.lang.Object,java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolvePrincipals(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<com.google.common.collect.Maps$KeySet: void forEach(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>
<org.apache.shiro.session.ProxiedSession: java.io.Serializable getId()>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session doCreateSession(org.apache.shiro.session.mgt.SessionContext)>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[],byte[],boolean)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStop(org.apache.shiro.session.Session)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><freemarker.ext.beans.CollectionAdapter: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.Optional: java.util.Optional map(java.util.function.Function)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.web.filter.RelativeRedirectResponseWrapper: void sendRedirect(java.lang.String)>-><org.springframework.http.HttpStatus: int value()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.time.LocalDate: int compareTo(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: void login(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject login(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken)>
<javax.el.BeanELResolver$SoftConcurrentHashMap: void cleanup()>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.logging.LogManager: java.util.logging.Formatter getFormatterProperty(java.lang.String,java.util.logging.Formatter)>-><java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<sun.rmi.runtime.Log$LogStreamLog: java.lang.String unqualifiedName(java.lang.String)>-><java.lang.String: java.lang.String replace(char,char)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.AbstractRememberMeManager: void onSuccessfulLogin(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(org.apache.shiro.subject.Subject)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Vector$Itr: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.logging.SimpleFormatter: void <init>()>-><java.util.logging.Formatter: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.flywaydb.core.internal.callback.SqlScriptCallbackFactory$SqlScriptCallback: int compareTo(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.apache.shiro.subject.support.DelegatingSubject: void login(org.apache.shiro.authc.AuthenticationToken)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.apache.shiro.mgt.DefaultSubjectDAO: org.apache.shiro.subject.Subject save(org.apache.shiro.subject.Subject)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean isEmpty()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void onExpiration(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: void setExpired(boolean)>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.Object getAttribute(java.lang.Object)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergePrincipals(org.apache.shiro.subject.Subject)>-><java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
<co.yiiu.pybbs.service.impl.AdminUserService: co.yiiu.pybbs.model.AdminUser selectByUsername(java.lang.String)>-><synthetic.method.AdminUserMapperImpl: java.lang.Object selectOne(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.apache.shiro.crypto.JcaCipherService: java.security.SecureRandom getDefaultSecureRandom()>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Throwable)>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher initNewCipher(int,byte[],byte[],boolean)>-><org.apache.shiro.crypto.JcaCipherService: java.security.SecureRandom getSecureRandom()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.time.zone.ZoneOffsetTransition: int compareTo(java.lang.Object)>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(char[])>-><java.lang.String: void <init>(char[])>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authc.AuthenticationInfo doGetAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String,java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.PrincipalCollection getRememberedIdentity(org.apache.shiro.subject.SubjectContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><sun.security.x509.X509CRLEntryImpl: int compareTo(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<co.yiiu.pybbs.PybbsApplication: void initBean_synthetic()>-><org.apache.shiro.spring.config.ShiroBeanConfiguration: org.apache.shiro.spring.LifecycleBeanPostProcessor lifecycleBeanPostProcessor()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: java.lang.String ensurePadding(java.lang.String)>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<org.elasticsearch.client.RestClientBuilder$2: org.apache.http.impl.nio.client.CloseableHttpAsyncClient run()>-><org.apache.http.impl.nio.client.HttpAsyncClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient build()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager resolveSecurityManager()>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Throwable)>
<org.elasticsearch.client.Node: boolean equals(java.lang.Object)>-><java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<co.yiiu.pybbs.exception.GlobalExceptionHandler: org.springframework.http.ResponseEntity jsonErrorHandler(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shiro.authz.UnauthenticatedException)>-><org.springframework.web.filter.RelativeRedirectResponseWrapper: void sendRedirect(java.lang.String)>
<sun.rmi.runtime.Log$LogStreamLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><org.springframework.beans.PropertyBatchUpdateException: void printStackTrace(java.io.PrintStream)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void setAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.DelegatingSession: void setAttribute(java.lang.Object,java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: java.security.SecureRandom getDefaultSecureRandom()>-><java.security.SecureRandom: void <init>()>
<org.apache.shiro.authc.AbstractAuthenticator: void notifySuccess(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.Collections$SetFromMap: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.util.Set keySet()>
<org.apache.commons.collections.FastHashMap$CollectionView: boolean isEmpty()>-><org.apache.commons.collections.FastHashMap$EntrySet: java.util.Collection get(java.util.Map)>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildTransformationString(java.lang.String,java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.apache.shiro.io.DefaultSerializer: byte[] serialize(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.web.util.SavedRequest: java.lang.String getRequestUrl()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergeAuthenticationState(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>
<org.apache.shiro.web.servlet.SimpleCookie: void <init>(org.apache.shiro.web.servlet.Cookie)>-><org.apache.shiro.web.servlet.SimpleCookie: int getMaxAge()>
<sun.rmi.runtime.NewThreadAction: java.lang.Thread run()>-><java.lang.Thread: void setDaemon(boolean)>
<sun.rmi.runtime.NewThreadAction$1: java.lang.ThreadGroup run()>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>-><org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletResponse getHttpResponse(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.authc.AuthenticationToken getAuthenticationToken()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<java.util.Collections$EmptyList: boolean containsAll(java.util.Collection)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<org.apache.shiro.codec.Base64: byte[] decode(java.lang.String)>-><org.apache.shiro.codec.Base64: byte[] decode(byte[])>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager getSecurityManager()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.util.logging.LogManager: java.util.logging.Filter getFilterProperty(java.lang.String,java.util.logging.Filter)>-><java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest resolveServletRequest()>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: javax.servlet.ServletRequest getServletRequest()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session getSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupSession(org.apache.shiro.session.mgt.SessionKey)>
<java.util.Hashtable: java.lang.String toString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.RegularEnumSet: boolean addAll(java.util.Collection)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.web.util.SavedRequest: java.lang.String getRequestUrl()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: int compareTo(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><sun.security.jca.GetInstance: java.util.List getServices(java.util.List)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergePrincipals(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: java.io.Serializable getSessionId(org.apache.shiro.session.mgt.SessionKey)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.logging.Handler: void checkPermission()>-><java.util.logging.LogManager: void checkPermission()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<co.yiiu.pybbs.service.impl.AdminUserService: co.yiiu.pybbs.model.AdminUser selectByUsername(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.query.QueryWrapper: void <init>()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: void onLogout(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.CachingRealm: void onLogout(org.apache.shiro.subject.PrincipalCollection)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.time.MonthDay: int compareTo(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.TreeSet: boolean add(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: int getVersion()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendVersion(java.lang.StringBuilder,int)>
<org.elasticsearch.common.ParseField: java.lang.String toString()>-><org.elasticsearch.common.ParseField: java.lang.String getPreferredName()>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void merge(org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: void setCredentials(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.HashMap: boolean isEmpty()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.JumboEnumSet: boolean addAll(java.util.Collection)>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getLastAccessTime()>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection convertBytesToPrincipals(byte[],org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.crypto.CipherService getCipherService()>
<org.springframework.util.CollectionUtils$MultiValueMapAdapter: java.util.Set entrySet()>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStop(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session beforeInvalidNotification(org.apache.shiro.session.Session)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.Integer: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session createSession(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidationIfNecessary()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Map)>-><org.apache.shiro.util.MapContext: boolean isEmpty()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<sun.rmi.runtime.NewThreadAction: java.lang.Thread run()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher newCipherInstance(boolean)>-><org.apache.shiro.crypto.CryptoException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidationIfNecessary()>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: boolean isEnabled()>
<org.apache.shiro.web.servlet.SimpleCookie: void saveTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: int getMaxAge()>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.subject.support.DefaultSubjectContext: java.lang.String resolveHost()>-><org.apache.shiro.session.ProxiedSession: java.lang.String getHost()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendComment(java.lang.StringBuilder,java.lang.String)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>-><java.security.Provider: java.lang.String getName()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DefaultSubjectContext: void setAuthenticationToken(org.apache.shiro.authc.AuthenticationToken)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.PrincipalCollection getRememberedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.mgt.RememberMeManager getRememberMeManager()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.util.Date: void <init>(long)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: java.security.SecureRandom getDefaultSecureRandom()>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Throwable)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.util.AbstractCollection: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String toCookieDate(java.util.Date)>-><java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.RealmSecurityManager: void applyEventBusToRealms()>-><com.google.common.collect.Maps$Values: java.util.Iterator iterator()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.time.YearMonth: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Collections$EmptyList: boolean containsAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<org.apache.shiro.crypto.JcaCipherService: byte[] crypt(javax.crypto.Cipher,byte[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.io.ClassResolvingObjectInputStream: void <init>(java.io.InputStream)>-><java.io.ObjectInputStream: void <init>(java.io.InputStream)>
<org.apache.shiro.session.mgt.eis.AbstractSessionDAO: org.apache.shiro.session.Session readSession(java.io.Serializable)>-><org.apache.shiro.session.UnknownSessionException: void <init>(java.lang.String)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getCachedAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.cache.Cache getAvailableAuthenticationCache()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void create(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.apache.shiro.session.mgt.DefaultSessionManager: void delete(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.eis.MemorySessionDAO: void delete(org.apache.shiro.session.Session)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject login(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: boolean isInfoEnabled()>
<org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<org.apache.shiro.realm.AuthenticatingRealm: void clearCachedAuthenticationInfo(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.AuthenticatingRealm: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.apache.shiro.web.mgt.DefaultWebSecurityManager: org.apache.shiro.session.mgt.SessionKey getSessionKey(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.ServletResponse getResponse(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>-><ch.qos.logback.classic.Logger: boolean isWarnEnabled()>
<org.elasticsearch.client.RestClientBuilder$2: void <init>(org.elasticsearch.client.RestClientBuilder,org.apache.http.impl.nio.client.HttpAsyncClientBuilder)>-><java.lang.Object: void <init>()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Throwable)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.Object removeAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<java.util.logging.StreamHandler: void flushAndClose()>-><java.util.logging.Formatter: java.lang.String getHead(java.util.logging.Handler)>
<sun.rmi.runtime.Log$LoggerLog$1: java.util.logging.Handler run()>-><sun.rmi.runtime.Log$InternalStreamHandler: void <init>(java.io.OutputStream)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.time.chrono.ChronoZonedDateTime: int compareTo(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.File)>-><java.lang.StringBuilder: void <init>()>
<com.google.gson.internal.LinkedTreeMap$Node: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.subject.SimplePrincipalCollection: void <init>(java.lang.Object,java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher newCipherInstance(boolean)>-><org.apache.shiro.crypto.JcaCipherService: java.lang.String getAlgorithmName()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.realm.CachingRealm: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Collections$1: boolean hasNext()>
<org.apache.shiro.crypto.DefaultBlockCipherService: byte[] generateInitializationVector(boolean)>-><org.apache.shiro.crypto.JcaCipherService: byte[] generateInitializationVector(boolean)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.AbstractMapBasedMultimap$KeySet: boolean containsAll(java.util.Collection)>-><com.google.common.collect.ForwardingMap: java.util.Set keySet()>
<java.io.ObjectInputStream: java.io.ObjectStreamClass readNonProxyDesc(boolean)>-><org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<co.yiiu.pybbs.config.realm.MyCredentialsMatcher: boolean doCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><co.yiiu.pybbs.util.bcrypt.BCryptPasswordEncoder: void <init>()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: long getTimeout()>
<javax.servlet.http.HttpServletResponseWrapper: void setStatus(int)>-><javax.servlet.http.HttpServletResponseWrapper: javax.servlet.http.HttpServletResponse _getHttpServletResponse()>
<org.apache.shiro.web.mgt.DefaultWebSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection resolvePrincipals()>
<javax.servlet.http.HttpServletResponseWrapper: void setHeader(java.lang.String,java.lang.String)>-><javax.servlet.http.HttpServletResponseWrapper: javax.servlet.http.HttpServletResponse _getHttpServletResponse()>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarUrlStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.StringBuilder: void <init>()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1: java.util.Iterator iterator()>
<sun.rmi.runtime.NewThreadAction: java.lang.Thread run()>-><java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>
<org.apache.shiro.web.session.HttpServletSession: java.lang.Object removeAttribute(java.lang.Object)>-><org.apache.shiro.session.InvalidSessionException: void <init>(java.lang.Throwable)>
<org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.String toString()>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><com.fasterxml.jackson.databind.type.ClassKey: int compareTo(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.elasticsearch.client.Node: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.apache.poi.hssf.usermodel.HSSFRow: int compareTo(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext ensureSecurityManager(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: void setSecurityManager(org.apache.shiro.mgt.SecurityManager)>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authc.AuthenticationInfo doGetAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Object[])>
<java.net.URL: int getDefaultPort()>-><java.net.URLStreamHandler: int getDefaultPort()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doAuthenticate(org.apache.shiro.authc.AuthenticationToken)>-><com.google.common.collect.Maps$Values: java.util.Iterator iterator()>
<ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>-><ch.qos.logback.classic.Logger: void filterAndLog_1(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object,java.lang.Throwable)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.mgt.DefaultWebSecurityManager: org.apache.shiro.subject.SubjectContext copy(org.apache.shiro.subject.SubjectContext)>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.web.util.WebUtils: javax.servlet.ServletResponse getResponse(java.lang.Object)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletResponse getServletResponse()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void onExpiration(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void onChange(org.apache.shiro.session.Session)>
<org.apache.shiro.mgt.DefaultSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager resolveSecurityManager()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.CachingRealm: void clearCache(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.CachingRealm: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.apache.shiro.session.mgt.SimpleSession: boolean isExpired()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: void stop()>-><java.util.Date: void <init>()>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.Object removeAttribute(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Map getAttributes()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.InputStream)>-><java.io.ByteArrayOutputStream: void close()>
<java.util.concurrent.PriorityBlockingQueue: boolean remove(java.lang.Object)>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.time.ZoneOffset: int compareTo(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><ch.qos.logback.classic.Logger: boolean isWarnEnabled()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.TreeSet: boolean isEmpty()>
<org.apache.shiro.session.mgt.SimpleSessionFactory: org.apache.shiro.session.Session createSession(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.SimpleSession: void <init>(java.lang.String)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>-><org.apache.shiro.web.util.WebUtils: boolean isHttp(java.lang.Object)>
<java.util.logging.StreamHandler: void <init>(java.io.OutputStream,java.util.logging.Formatter)>-><java.util.logging.StreamHandler: void configure()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.NOPLogger: boolean isWarnEnabled()>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: void <init>()>-><org.apache.shiro.subject.support.DefaultSubjectContext: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<java.util.concurrent.ThreadPoolExecutor: java.util.List drainQueue()>-><java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<org.apache.shiro.subject.support.DefaultSubjectContext: boolean resolveAuthenticated()>-><org.apache.shiro.web.session.HttpServletSession: java.lang.Object getAttribute(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergeAuthenticationState(org.apache.shiro.subject.Subject)>-><org.apache.shiro.session.ProxiedSession: java.lang.Object getAttribute(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.mgt.SimpleSession: long getTimeout()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.math.BigDecimal: int compareTo(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doSingleRealmAuthentication(org.apache.shiro.realm.Realm,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session doCreateSession(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String getHost()>
<org.apache.shiro.mgt.DefaultSubjectDAO: boolean isSessionStorageEnabled(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSubjectDAO: org.apache.shiro.mgt.SessionStorageEvaluator getSessionStorageEvaluator()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.joda.time.field.UnsupportedDurationField: int compareTo(java.lang.Object)>
<org.apache.shiro.mgt.AbstractRememberMeManager: boolean isRememberMe(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.UsernamePasswordToken: boolean isRememberMe()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.SubstituteLogger: boolean isWarnEnabled()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarUrlStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.crypto.JcaCipherService: byte[] generateInitializationVector(boolean)>-><java.security.SecureRandom: void nextBytes(byte[])>
<org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>-><java.util.Optional: java.util.Optional map(java.util.function.Function)>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authc.AuthenticationInfo doGetAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.UnknownAccountException: void <init>()>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.time.Duration: int compareTo(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><org.springframework.util.LinkedMultiValueMap: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.io.ObjectInputStream$PeekInputStream: void close()>-><java.io.BufferedInputStream: void close()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<co.yiiu.pybbs.controller.admin.IndexAdminController: java.lang.String logout()>-><org.apache.shiro.subject.support.DelegatingSubject: void logout()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.rmi.runtime.RuntimeUtil$1: java.lang.Thread newThread(java.lang.Runnable)>-><sun.rmi.runtime.NewThreadAction: void <init>(java.lang.Runnable,java.lang.String,boolean)>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><java.rmi.server.LogStream: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolvePrincipals(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: void setPrincipals(org.apache.shiro.subject.PrincipalCollection)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<org.apache.shiro.mgt.DefaultSubjectDAO: void removeFromSession(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>
<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>-><javax.crypto.Cipher$Transform: void setModePadding(javax.crypto.CipherSpi)>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><org.apache.shiro.session.mgt.SimpleSession: boolean isExpired()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolveSession(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: void setSession(org.apache.shiro.session.Session)>
<org.apache.shiro.session.mgt.DefaultSessionManager: void onStop(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void onChange(org.apache.shiro.session.Session)>
<org.apache.shiro.codec.CodecSupport: java.lang.String toString(byte[])>-><org.apache.shiro.codec.CodecSupport: java.lang.String toString(byte[],java.lang.String)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<javax.el.BeanELResolver$SoftConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><javax.el.BeanELResolver$SoftConcurrentHashMap: javax.el.BeanELResolver$BeanProperties get(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.DefaultSessionManager: void afterStopped(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void delete(org.apache.shiro.session.Session)>
<org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<java.rmi.server.LogStream: void write(byte[],int,int)>-><java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>
<org.apache.shiro.crypto.DefaultBlockCipherService: byte[] generateInitializationVector(boolean)>-><java.lang.StringBuilder: void <init>()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void update(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.eis.MemorySessionDAO: org.apache.shiro.session.Session storeSession(java.io.Serializable,org.apache.shiro.session.Session)>
<org.apache.shiro.crypto.DefaultBlockCipherService: boolean isModeInitializationVectorCompatible(java.lang.String)>-><java.lang.Enum: java.lang.String name()>
<org.apache.shiro.subject.support.DelegatingSubject$StoppingAwareProxiedSession: void <init>(org.apache.shiro.subject.support.DelegatingSubject,org.apache.shiro.session.Session,org.apache.shiro.subject.support.DelegatingSubject)>-><org.apache.shiro.session.ProxiedSession: void <init>(org.apache.shiro.session.Session)>
<org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[],byte[],boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.PrincipalCollection getRememberedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection getRememberedPrincipals(org.apache.shiro.subject.SubjectContext)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><org.apache.http.HttpHost: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection,int)>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.text.DateFormat: java.lang.String format(java.util.Date)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.apache.shiro.mgt.AbstractRememberMeManager: byte[] convertPrincipalsToBytes(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.crypto.CipherService getCipherService()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<javax.servlet.http.HttpServletResponseWrapper: void setStatus(int)>-><javax.servlet.http.HttpServletResponseWrapper: void setStatus(int)>
<java.util.concurrent.PriorityBlockingQueue: java.lang.Object peek()>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.math.BigInteger: int compareTo(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<org.apache.shiro.web.mgt.DefaultWebSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletResponse resolveServletResponse()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: int compareTo(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher newCipherInstance(boolean)>-><javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<org.apache.shiro.subject.support.DelegatingSubject: java.lang.Object getPrimaryPrincipal(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.Object getPrimaryPrincipal()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroupMember: int compareTo(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.LinkedHashMap: java.util.Collection values()>
<org.apache.shiro.realm.AuthenticatingRealm: boolean supports(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.realm.AuthenticatingRealm: java.lang.Class getAuthenticationTokenClass()>
<java.util.logging.StreamHandler: void configure()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Object[])>
<org.apache.shiro.mgt.DefaultSecurityManager: void onFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>
<java.util.Collections$EmptyList: boolean containsAll(java.util.Collection)>-><java.util.RegularEnumSet: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.Collections$EmptyList: boolean containsAll(java.util.Collection)>-><java.util.TreeMap$KeySet: boolean isEmpty()>
<org.apache.shiro.mgt.DefaultSubjectDAO: void removeFromSession(org.apache.shiro.subject.Subject)>-><org.apache.shiro.session.ProxiedSession: java.lang.Object removeAttribute(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[],byte[])>-><org.apache.shiro.util.ByteSource$Util: org.apache.shiro.util.ByteSource bytes(byte[])>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><java.lang.Object: java.lang.Class getClass()>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>-><org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection resolvePrincipals()>-><org.apache.shiro.web.session.HttpServletSession: java.lang.Object getAttribute(java.lang.Object)>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: org.apache.shiro.session.Session storeSession(java.io.Serializable,org.apache.shiro.session.Session)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: boolean isRunAs()>-><org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void afterStopped(org.apache.shiro.session.Session)>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.el.BeanELResolver$SoftConcurrentHashMap: javax.el.BeanELResolver$BeanProperties get(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void merge(org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: org.apache.shiro.subject.PrincipalCollection getPrincipals()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.lang.Byte: int compareTo(java.lang.Object)>
<org.apache.shiro.mgt.RealmSecurityManager: void applyEventBusToRealms()>-><com.google.common.collect.Maps$Values: boolean isEmpty()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[],byte[])>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.util.Collections$1: java.lang.Object next()>
<org.apache.shiro.subject.support.DefaultSubjectContext: void setPrincipals(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.util.MapContext: java.lang.Object put(java.lang.String,java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.lang.String: int compareTo(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getPath()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<sun.rmi.runtime.NewThreadAction$1: java.lang.ThreadGroup run()>-><java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.time.OffsetTime: int compareTo(java.lang.Object)>
<org.springframework.web.filter.RelativeRedirectResponseWrapper: void sendRedirect(java.lang.String)>-><javax.servlet.http.HttpServletResponseWrapper: void setStatus(int)>
<java.rmi.server.LogStream: void write(int)>-><java.io.Writer: void write(java.lang.String)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.HashSet: boolean isEmpty()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.logging.Handler: void setEncoding(java.lang.String)>-><java.nio.charset.Charset: boolean isSupported(java.lang.String)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<org.apache.shiro.crypto.JcaCipherService: java.security.SecureRandom ensureSecureRandom()>-><org.apache.shiro.crypto.JcaCipherService: java.security.SecureRandom getSecureRandom()>
<org.apache.shiro.web.mgt.DefaultWebSecurityManager: org.apache.shiro.session.mgt.SessionKey getSessionKey(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: java.io.Serializable getSessionId()>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><java.rmi.server.LogStream: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.joda.time.base.AbstractInstant: int compareTo(java.lang.Object)>
<org.apache.shiro.authz.SimpleAuthorizationInfo: void addStringPermissions(java.util.Collection)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authc.AuthenticationInfo doGetAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.Object getPrincipal()>
<com.google.common.collect.Maps$Values: java.util.Iterator iterator()>-><com.google.common.collect.ForwardingMap: java.util.Set entrySet()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.sql.Timestamp: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSessionFactory: org.apache.shiro.session.Session createSession(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.SimpleSession: void <init>()>
<org.apache.shiro.subject.support.DefaultSubjectContext: boolean resolveAuthenticated()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.apache.shiro.web.servlet.SimpleCookie: void saveTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: boolean isSecure()>
<org.apache.shiro.io.DefaultSerializer: byte[] serialize(java.lang.Object)>-><java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>-><sun.security.util.Debug: void println(java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolveSession(org.apache.shiro.subject.SubjectContext)>
<java.util.logging.LogManager: java.util.logging.Filter getFilterProperty(java.lang.String,java.util.logging.Filter)>-><java.lang.Class: java.lang.Object newInstance()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolveSession(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<org.apache.shiro.mgt.DefaultSubjectDAO: org.apache.shiro.subject.Subject save(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSubjectDAO: void saveToSession(org.apache.shiro.subject.Subject)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.pam.AbstractAuthenticationStrategy: org.apache.shiro.authc.AuthenticationInfo beforeAllAttempts(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergePrincipals(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject: boolean isRunAs()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.nio.charset.Charset: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: boolean offer(java.lang.Object)>-><java.util.concurrent.PriorityBlockingQueue: void siftUpUsingComparator(int,java.lang.Object,java.lang.Object[],java.util.Comparator)>
<co.yiiu.pybbs.controller.admin.IndexAdminController: java.lang.String adminlogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,java.lang.Boolean,javax.servlet.http.HttpServletRequest,org.springframework.web.servlet.mvc.support.RedirectAttributes)>-><org.apache.shiro.web.util.SavedRequest: java.lang.String getRequestUrl()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.net.URL: java.io.InputStream openStream()>-><org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: java.io.InputStream getInputStream()>
<org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.logging.Handler: void setEncoding(java.lang.String)>-><java.io.UnsupportedEncodingException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean doCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>
<org.apache.shiro.mgt.AbstractRememberMeManager: void onSuccessfulLogin(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<javax.crypto.Cipher: void chooseFirstProvider()>-><sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[],byte[],boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher newCipherInstance(boolean)>-><org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String getTransformationString(boolean)>
<java.util.concurrent.PriorityBlockingQueue: void tryGrow(java.lang.Object[],int)>-><java.lang.Thread: void yield()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.logging.Handler: void <init>()>-><java.util.logging.ErrorManager: void <init>()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>-><org.slf4j.event.EventRecodingLogger: void trace(java.lang.String,java.lang.Object)>
<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: boolean offer(java.lang.Object)>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<org.apache.shiro.session.mgt.SimpleSession: java.util.Map getAttributesLazy()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Map getAttributes()>
<org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session createSession(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.web.util.WebUtils: boolean isHttp(java.lang.Object)>
<org.elasticsearch.client.RestClientBuilder$1: org.apache.http.impl.nio.client.CloseableHttpAsyncClient run()>-><org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient access$000(org.elasticsearch.client.RestClientBuilder)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)>-><java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<org.apache.shiro.subject.SimplePrincipalCollection: void <init>(java.lang.Object,java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>
<org.apache.shiro.util.StringUtils: java.lang.String toDelimitedString(java.lang.Object[],java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy: org.apache.shiro.authc.AuthenticationInfo afterAllAttempts(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[])>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.flywaydb.core.internal.util.Pair: int compareTo(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.mgt.SessionContext createSessionContext()>-><org.apache.shiro.session.mgt.DefaultSessionContext: void <init>()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.crypto.JcaCipherService: byte[] crypt(byte[],byte[],byte[],int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<java.util.concurrent.PriorityBlockingQueue: boolean remove(java.lang.Object)>-><java.util.concurrent.PriorityBlockingQueue: int indexOf(java.lang.Object)>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void merge(org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.Object getCredentials()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection getRememberedPrincipals(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>
<java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.apache.shiro.subject.support.DefaultSubjectContext: java.io.Serializable getSessionId()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.time.Instant: int compareTo(java.lang.Object)>
<java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)>-><java.lang.NullPointerException: void <init>()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.Collections$EmptyList: boolean isEmpty()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.flywaydb.core.internal.info.MigrationInfoImpl: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<java.util.LinkedHashSet: void <init>(java.util.Collection)>-><java.util.Collections$EmptySet: int size()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.Object getPrimaryPrincipal()>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.session.Session resolveSession()>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.session.Session getSession()>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection resolvePrincipals()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: org.apache.shiro.subject.PrincipalCollection getPrincipals()>
<org.apache.shiro.realm.AuthenticatingRealm: void assertCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doAuthenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionContext: void setServletRequest(javax.servlet.ServletRequest)>-><org.apache.shiro.util.MapContext: java.lang.Object put(java.lang.String,java.lang.Object)>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[])>-><org.apache.shiro.crypto.DefaultBlockCipherService: boolean isGenerateInitializationVectors(boolean)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<sun.rmi.runtime.RuntimeUtil$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: boolean offer(java.lang.Object)>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: java.lang.String resolveHost()>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.authc.AuthenticationToken getAuthenticationToken()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.JavaBeanSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int,boolean)>-><org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)>-><java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>
<org.apache.shiro.codec.CodecSupport: byte[] objectToBytes(java.lang.Object)>-><java.lang.Class: java.lang.String getName()>
<org.apache.shiro.crypto.DefaultBlockCipherService: byte[] generateInitializationVector(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.Collections$EmptyList: boolean containsAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet: boolean isEmpty()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.util.Date: void <init>()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.apache.shiro.session.ProxiedSession: java.lang.String getHost()>-><org.apache.shiro.session.mgt.DelegatingSession: java.lang.String getHost()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session start(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session createSession(org.apache.shiro.session.mgt.SessionContext)>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest getServletRequest()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.apache.shiro.subject.support.DelegatingSubject: java.lang.String getHost()>
<org.apache.shiro.mgt.AbstractRememberMeManager: byte[] encrypt(byte[])>-><org.apache.shiro.util.SimpleByteSource: byte[] getBytes()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Throwable)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.flywaydb.core.internal.schemahistory.AppliedMigration: int compareTo(java.lang.Object)>
<org.apache.shiro.realm.AuthenticatingRealm: void cacheAuthenticationInfoIfPossible(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.UnknownSessionException: void <init>(java.lang.String)>
<sun.rmi.runtime.Log: java.lang.String[] getSource()>-><java.lang.StackTraceElement: java.lang.String getClassName()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><org.apache.http.impl.nio.client.HttpAsyncClientBuilder: org.apache.http.impl.nio.client.HttpAsyncClientBuilder setDefaultRequestConfig(org.apache.http.client.config.RequestConfig)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><ch.qos.logback.classic.Logger: boolean isInfoEnabled()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.AuthenticatingRealm: void cacheAuthenticationInfoIfPossible(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.joda.time.LocalTime: int compareTo(java.lang.Object)>
<com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<org.apache.shiro.session.UnknownSessionException: void <init>(java.lang.String)>-><org.apache.shiro.session.InvalidSessionException: void <init>(java.lang.String)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildTransformationString(java.lang.String,java.lang.String,int)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<sun.rmi.runtime.RuntimeUtil$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolvePrincipals(org.apache.shiro.subject.SubjectContext)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletRequest getHttpRequest(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getLastAccessTime()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.AbstractMap$1: boolean isEmpty()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.String getHost(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String getHost()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session doGetSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validate(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendPath(java.lang.StringBuilder,java.lang.String)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session createExposedSession(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DelegatingSession: void <init>(org.apache.shiro.session.mgt.NativeSessionManager,org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.HashSet: java.util.Iterator iterator()>
<org.apache.shiro.realm.AuthenticatingRealm: void cacheAuthenticationInfoIfPossible(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doAuthenticate(org.apache.shiro.authc.AuthenticationToken)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<java.util.logging.LogManager: java.util.logging.Formatter getFormatterProperty(java.lang.String,java.util.logging.Formatter)>-><java.util.ResourceBundle$RBClassLoader: java.lang.Class loadClass(java.lang.String)>
<org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>-><java.util.AbstractList: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.apache.logging.log4j.Level: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.session.Session resolveContextSession(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.SessionsSecurityManager: org.apache.shiro.session.Session getSession(org.apache.shiro.session.mgt.SessionKey)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.DefaultSessionContext: void setHost(java.lang.String)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.io.DefaultSerializer: byte[] serialize(java.lang.Object)>-><java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
<javax.el.BeanELResolver$SoftConcurrentHashMap: javax.el.BeanELResolver$BeanProperties get(java.lang.Object)>-><java.lang.ref.SoftReference: java.lang.Object get()>
<org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><java.rmi.server.LogStream: java.lang.String toString()>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<org.apache.shiro.session.ProxiedSession: void setAttribute(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.ProxiedSession: void setAttribute(java.lang.Object,java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.SessionsSecurityManager: org.apache.shiro.session.Session start(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session start(org.apache.shiro.session.mgt.SessionContext)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void <init>(org.apache.shiro.web.servlet.Cookie)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getName()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[])>-><org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[],byte[])>
<org.apache.shiro.subject.support.DefaultSubjectContext: java.lang.String resolveHost()>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String getHost()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.rmi.runtime.NewThreadAction: java.lang.Thread run()>-><java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.lang.Long: int compareTo(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: void <init>(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Object: void <init>()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.authc.pam.AbstractAuthenticationStrategy: org.apache.shiro.authc.AuthenticationInfo merge(org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: void merge(org.apache.shiro.authc.AuthenticationInfo)>
<java.util.logging.Formatter: void <init>()>-><java.lang.Object: void <init>()>
<java.util.logging.LogManager: java.util.logging.Formatter getFormatterProperty(java.lang.String,java.util.logging.Formatter)>-><java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager resolveSecurityManager()>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.ThreadPoolExecutor: java.util.List drainQueue()>-><java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><java.rmi.server.LogStream: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.io.DefaultSerializer: java.lang.Object deserialize(byte[])>-><java.io.ByteArrayInputStream: void <init>(byte[])>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.io.ObjectInputStream$PeekInputStream: int available()>-><java.io.BufferedInputStream: int available()>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletResponse resolveServletResponse()>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletResponse getServletResponse()>
<sun.rmi.runtime.NewThreadAction: java.lang.Object run()>-><sun.rmi.runtime.NewThreadAction: java.lang.Thread run()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.Hashtable$EntrySet: boolean add(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.flywaydb.core.internal.resource.filesystem.FileSystemResource: int compareTo(java.lang.Object)>
<java.util.logging.LogManager: java.lang.String getStringProperty(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String trim()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.File)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarUrlStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest getServletRequest()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: boolean isEnabled()>
<com.google.common.collect.ForwardingMap: boolean containsValue(java.lang.Object)>-><com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: java.util.Map delegate()>
<org.apache.shiro.session.mgt.DefaultSessionKey: void <init>(java.io.Serializable)>-><java.lang.Object: void <init>()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><org.elasticsearch.client.RestClientBuilder$1: java.lang.Object run()>
<org.apache.shiro.realm.AuthenticatingRealm: void doClearCache(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.AuthenticatingRealm: void clearCachedAuthenticationInfo(org.apache.shiro.subject.PrincipalCollection)>
<org.apache.shiro.session.mgt.SimpleSession: void <init>()>-><java.util.Date: void <init>()>
<org.apache.shiro.realm.AuthorizingRealm: void doClearCache(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.AuthorizingRealm: void clearCachedAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>
<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>-><java.lang.Throwable: void printStackTrace()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void appendComment(java.lang.StringBuilder,java.lang.String)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.lang.String: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.ExpiredSessionException: void <init>(java.lang.String)>
<org.apache.shiro.authz.SimpleAuthorizationInfo: void addRole(java.lang.String)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: javax.servlet.ServletRequest getServletRequest()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DefaultSubjectContext: void setAuthenticationInfo(org.apache.shiro.authc.AuthenticationInfo)>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: void onSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>
<org.apache.shiro.web.subject.support.WebDelegatingSubject: org.apache.shiro.session.mgt.SessionContext createSessionContext()>-><org.apache.shiro.session.mgt.DefaultSessionContext: void setHost(java.lang.String)>
<java.util.TreeMap$Entry: int hashCode()>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.File)>-><java.io.FileInputStream: void <init>(java.io.File)>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>-><java.security.Provider$Service: boolean supportsParameter(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSessionStorageEvaluator: boolean isSessionStorageEnabled(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSessionStorageEvaluator: boolean isSessionStorageEnabled()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.lang.ProcessEnvironment$Variable: int compareTo(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<org.apache.shiro.session.mgt.DefaultSessionManager: java.io.Serializable getSessionId(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionKey: java.io.Serializable getSessionId()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.reflect.WeakCache$LookupValue: boolean equals(java.lang.Object)>
<org.apache.shiro.util.MapContext: int size()>-><java.util.HashMap: int size()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session beforeInvalidNotification(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.ImmutableProxiedSession: void <init>(org.apache.shiro.session.Session)>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void merge(org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>
<org.apache.shiro.authc.AbstractAuthenticator: void notifyFailure(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authz.AuthorizationInfo doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collection: java.util.stream.Stream stream()>
<java.io.ObjectInputStream$PeekInputStream: int read(byte[],int,int)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.web.mgt.DefaultWebSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: void <init>(org.apache.shiro.subject.PrincipalCollection,boolean,java.lang.String,org.apache.shiro.session.Session,boolean,javax.servlet.ServletRequest,javax.servlet.ServletResponse,org.apache.shiro.mgt.SecurityManager)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<org.apache.shiro.crypto.JcaCipherService: byte[] crypt(javax.crypto.Cipher,byte[])>-><org.apache.shiro.crypto.CryptoException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.apache.shiro.mgt.SessionsSecurityManager: org.apache.shiro.session.Session start(org.apache.shiro.session.mgt.SessionContext)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.joda.time.field.BaseDurationField: int compareTo(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: int compareTo(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSubjectDAO: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>
<java.util.Collections$EmptyList: boolean containsAll(java.util.Collection)>-><com.google.common.collect.Maps$KeySet: boolean isEmpty()>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.rmi.runtime.Log$LoggerLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.mgt.DefaultSecurityManager: void save(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSubjectDAO: org.apache.shiro.subject.Subject save(org.apache.shiro.subject.Subject)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<org.apache.shiro.authc.AuthenticationException: void <init>()>-><org.apache.shiro.ShiroException: void <init>()>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.apache.shiro.util.MapContext: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: void setAuthenticationToken(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.util.MapContext: void nullSafePut(java.lang.String,java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<org.apache.shiro.authz.SimpleAuthorizationInfo: void addStringPermissions(java.util.Collection)>-><java.util.HashSet: void <init>()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.lang.Float: int compareTo(java.lang.Object)>
<org.apache.shiro.crypto.DefaultBlockCipherService: boolean isGenerateInitializationVectors(boolean)>-><org.apache.shiro.crypto.JcaCipherService: boolean isGenerateInitializationVectors()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<java.util.concurrent.ThreadPoolExecutor: boolean remove(java.lang.Runnable)>-><java.util.concurrent.PriorityBlockingQueue: boolean remove(java.lang.Object)>
<org.apache.shiro.web.subject.support.WebDelegatingSubject: org.apache.shiro.session.mgt.SessionContext createSessionContext()>-><org.apache.shiro.web.session.mgt.DefaultWebSessionContext: void setServletRequest(javax.servlet.ServletRequest)>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: java.lang.Object getPrincipal()>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>
<java.util.logging.StreamHandler: void configure()>-><java.util.logging.Handler: void setFilter(java.util.logging.Filter)>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<org.apache.shiro.web.subject.support.WebDelegatingSubject: org.apache.shiro.session.mgt.SessionContext createSessionContext()>-><org.apache.shiro.web.session.mgt.DefaultWebSessionContext: void setServletResponse(javax.servlet.ServletResponse)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergePrincipals(org.apache.shiro.subject.Subject)>-><java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>-><org.apache.commons.collections.FastHashMap$CollectionView: org.apache.commons.collections.FastHashMap access$300(org.apache.commons.collections.FastHashMap$CollectionView)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authz.AuthorizationInfo doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildStreamingTransformationString()>-><org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String getStreamingPaddingSchemeName()>
<org.apache.shiro.crypto.JcaCipherService: void init(javax.crypto.Cipher,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>-><javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<sun.rmi.runtime.Log$LogStreamLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><sun.rmi.runtime.Log: java.lang.String[] access$200()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.SubstituteLogger: boolean isWarnEnabled()>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getStartTimestamp()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><org.elasticsearch.client.PersistentCredentialsAuthenticationStrategy: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: int compareTo(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: boolean isSessionCreationEnabled()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.net.URI: int compareTo(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.web.util.WebUtils: boolean isWeb(java.lang.Object)>-><org.apache.shiro.web.util.WebUtils: boolean isWeb(org.apache.shiro.web.util.RequestPairSource)>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarUrlStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int length()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.AbstractCollection: boolean isEmpty()>-><java.util.concurrent.PriorityBlockingQueue: int size()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doAuthenticate(org.apache.shiro.authc.AuthenticationToken)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.Collections$SetFromMap: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean isEmpty()>
<java.util.logging.StreamHandler: void configure()>-><java.util.logging.StreamHandler: void setEncoding(java.lang.String)>
<javax.crypto.CryptoPermission: boolean impliesParameterSpec(boolean,java.security.spec.AlgorithmParameterSpec)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.lang.Integer: int compareTo(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolveSession(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.session.Session resolveSession()>
<co.yiiu.pybbs.PybbsApplication: void initBean_synthetic()>-><co.yiiu.pybbs.config.ShiroConfig: org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(org.apache.shiro.web.mgt.DefaultWebSecurityManager)>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient access$000(org.elasticsearch.client.RestClientBuilder)>-><org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>
<org.apache.shiro.web.servlet.SimpleCookie: void saveTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void merge(org.apache.shiro.authc.AuthenticationInfo)>-><java.util.HashSet: void <init>()>
<sun.rmi.runtime.Log$LoggerLog$1: java.lang.Object run()>-><sun.rmi.runtime.Log$LoggerLog$1: java.util.logging.Handler run()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.joda.time.LocalDateTime: int compareTo(java.lang.Object)>
<org.apache.shiro.codec.Base64: byte[] decode(java.lang.String)>-><org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.String)>
<org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session getSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session createSession(javax.servlet.http.HttpSession,java.lang.String)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.SessionsSecurityManager: org.apache.shiro.session.Session start(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session start(org.apache.shiro.session.mgt.SessionContext)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object cast(java.lang.Object,java.lang.reflect.ParameterizedType,com.alibaba.fastjson.parser.ParserConfig)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: java.io.InputStream getInputStream()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.DefaultSecurityManager: void save(org.apache.shiro.subject.Subject)>
<org.apache.shiro.mgt.AbstractRememberMeManager: void onSuccessfulLogin(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<org.apache.shiro.authc.AbstractAuthenticator: void notifyLogout(org.apache.shiro.subject.PrincipalCollection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void delete(org.apache.shiro.session.Session)>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.Object getPrimaryPrincipal()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><java.util.SubList: java.lang.Object get(int)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.rmi.runtime.RuntimeUtil$1: java.lang.Thread newThread(java.lang.Runnable)>-><sun.rmi.runtime.RuntimeUtil: sun.rmi.runtime.Log access$000()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[],byte[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext ensureSecurityManager(org.apache.shiro.subject.SubjectContext)>
<javax.crypto.Cipher: javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletResponse getHttpResponse(java.lang.Object)>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.joda.time.field.BaseDurationField: int compareTo(java.lang.Object)>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: void <init>(java.net.URL)>-><java.net.URLConnection: void <init>(java.net.URL)>
<org.apache.shiro.realm.CachingRealm: void clearCache(org.apache.shiro.subject.PrincipalCollection)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<java.util.ResourceBundle$Control$1: java.io.InputStream run()>-><org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: java.io.InputStream getInputStream()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><java.rmi.server.LogStream: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.mgt.RememberMeManager getRememberMeManager()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.web.mgt.DefaultWebSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: boolean resolveAuthenticated()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.time.MonthDay: int compareTo(java.lang.Object)>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendDomain(java.lang.StringBuilder,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.lang.Object[] toArray()>
<org.apache.shiro.web.servlet.SimpleCookie: void <init>(org.apache.shiro.web.servlet.Cookie)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getPath()>
<org.apache.shiro.web.servlet.SimpleCookie: void saveTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: boolean isHttpOnly()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.util.Collections$1: boolean hasNext()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.joda.time.LocalDateTime: int compareTo(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.apache.shiro.web.subject.support.WebDelegatingSubject: org.apache.shiro.session.mgt.SessionContext createSessionContext()>-><org.apache.shiro.subject.support.DelegatingSubject: java.lang.String getHost()>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.Object getAttribute(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Map getAttributes()>
<java.util.Properties: java.lang.String getProperty(java.lang.String)>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: void assertRealmsConfigured()>-><org.apache.shiro.authc.pam.ModularRealmAuthenticator: java.util.Collection getRealms()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.flywaydb.core.api.Location: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session doCreateSession(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session newSessionInstance(org.apache.shiro.session.mgt.SessionContext)>
<java.util.concurrent.PriorityBlockingQueue: boolean offer(java.lang.Object)>-><java.lang.NullPointerException: void <init>()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><java.rmi.server.LogStream: java.lang.String toString()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.apache.shiro.util.ClassUtils$1: java.lang.ClassLoader doGetClassLoader()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.Object)>-><org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.File)>
<java.util.logging.Handler: void reportError(java.lang.String,java.lang.Exception,int)>-><java.lang.Throwable: void printStackTrace()>
<co.yiiu.pybbs.PybbsApplication: void initBean_synthetic()>-><org.apache.shiro.spring.config.ShiroBeanConfiguration: void <init>()>
<org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.time.LocalDateTime: int compareTo(java.lang.Object)>
<sun.rmi.runtime.NewThreadAction: java.lang.Thread run()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.io.DefaultSerializer: java.lang.Object deserialize(byte[])>-><java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.util.logging.StreamHandler: void configure()>-><java.util.logging.SimpleFormatter: void <init>()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidationIfNecessary()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStop(org.apache.shiro.session.Session)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void create(org.apache.shiro.session.Session)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><java.rmi.server.LogStream: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.joda.time.field.MillisDurationField: int compareTo(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)>-><java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.joda.time.base.AbstractDuration: int compareTo(java.lang.Object)>
<org.apache.shiro.util.StringUtils: java.lang.String toDelimitedString(java.lang.Object[],java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doSingleRealmAuthentication(org.apache.shiro.realm.Realm,org.apache.shiro.authc.AuthenticationToken)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[],byte[])>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getDomain()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doSingleRealmAuthentication(org.apache.shiro.realm.Realm,org.apache.shiro.authc.AuthenticationToken)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.rmi.server.LogStream: void write(byte[],int,int)>-><java.rmi.server.LogStream: void write(int)>
<org.apache.shiro.web.mgt.DefaultWebSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: boolean isSessionCreationEnabled()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.util.Date: int hashCode()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session start(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: void onStart(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionContext)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: boolean isIdentityRemoved(org.apache.shiro.web.subject.WebSubjectContext)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest resolveServletRequest()>
<org.apache.shiro.subject.support.DelegatingSubject: void logout()>-><org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.logging.StreamHandler: void flush()>-><java.util.logging.Handler: void reportError(java.lang.String,java.lang.Exception,int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: void <init>(org.apache.commons.collections.FastHashMap$CollectionView)>-><org.apache.commons.collections.FastHashMap$CollectionView: org.apache.commons.collections.FastHashMap access$300(org.apache.commons.collections.FastHashMap$CollectionView)>
<sun.rmi.runtime.NewThreadAction: java.lang.Thread run()>-><java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><java.rmi.server.LogStream: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.math.BigInteger: int compareTo(java.lang.Object)>
<java.util.logging.StreamHandler: void flushAndClose()>-><java.util.logging.Handler: void reportError(java.lang.String,java.lang.Exception,int)>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection resolvePrincipals()>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.session.Session resolveSession()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.codec.CodecSupport: boolean isByteSource(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.subject.support.DelegatingSubject$StoppingAwareProxiedSession: void stop()>-><org.apache.shiro.session.ProxiedSession: void stop()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void tryGrow(java.lang.Object[],int)>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<org.apache.shiro.realm.AuthenticatingRealm: void assertCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><java.util.Date: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.joda.time.LocalDate: int compareTo(java.lang.Object)>
<org.apache.shiro.session.ProxiedSession: java.io.Serializable getId()>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<javax.crypto.Cipher$Transform: int supportsModePadding(java.security.Provider$Service)>-><javax.crypto.Cipher$Transform: int supportsPadding(java.security.Provider$Service)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<javax.crypto.Cipher$Transform: int supportsModePadding(java.security.Provider$Service)>-><java.lang.Math: int min(int,int)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildTransformationString(java.lang.String,java.lang.String,int)>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.springframework.util.MimeType: int compareTo(java.lang.Object)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.Object getAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.web.subject.support.WebDelegatingSubject: boolean isSessionCreationEnabled()>-><org.apache.shiro.web.util.WebUtils: boolean _isSessionCreationEnabled(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.flywaydb.core.internal.util.Pair: int compareTo(java.lang.Object)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletRequest getHttpRequest(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.apache.shiro.session.mgt.SimpleSession: long getTimeout()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><javax.crypto.Cipher$Transform: void setModePadding(javax.crypto.CipherSpi)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.lang.ProcessEnvironment$Value: int compareTo(java.lang.Object)>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildTransformationString()>-><org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String getModeName()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(org.apache.shiro.subject.Subject)>-><org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<org.apache.shiro.subject.support.DelegatingSubject: java.lang.Object getPrimaryPrincipal(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.support.DelegatingSubject: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>
<java.rmi.server.LogStream: void write(int)>-><java.lang.Thread: java.lang.String getName()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.util.Date: int compareTo(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.elasticsearch.client.Node: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager resolveSecurityManager()>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: void setAttribute(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.Object removeAttribute(java.lang.Object)>
<org.apache.shiro.session.ProxiedSession: void setAttribute(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.DelegatingSession: void setAttribute(java.lang.Object,java.lang.Object)>
<org.apache.shiro.codec.CodecSupport: byte[] objectToBytes(java.lang.Object)>-><org.apache.shiro.codec.CodecException: void <init>(java.lang.String)>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.spring.config.AbstractShiroBeanConfiguration: org.apache.shiro.event.EventBus eventBus()>-><org.apache.shiro.event.support.DefaultEventBus: void <init>()>
<sun.rmi.runtime.Log$LoggerLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><sun.rmi.runtime.Log: java.lang.String[] access$200()>
<ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>-><org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>
<java.io.ObjectOutputStream$BlockDataOutputStream: void flush()>-><java.io.BufferedOutputStream: void flush()>
<org.apache.shiro.subject.support.DefaultSubjectContext: boolean resolveAuthenticated()>-><org.apache.shiro.session.ProxiedSession: java.lang.Object getAttribute(java.lang.Object)>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.util.Collections$SingletonList: int size()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.rmi.runtime.Log$LoggerLog$1: java.util.logging.Handler run()>-><java.util.logging.Handler: void setLevel(java.util.logging.Level)>
<org.apache.shiro.realm.AuthenticatingRealm: void assertCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><co.yiiu.pybbs.config.realm.MyCredentialsMatcher: boolean doCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.PrincipalCollection getRememberedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>-><java.security.MessageDigest: boolean isEqual(byte[],byte[])>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.io.DefaultSerializer: byte[] serialize(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><sun.security.jca.ServiceId: void <init>(java.lang.String,java.lang.String)>
<org.apache.shiro.codec.CodecSupport: byte[] objectToBytes(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<java.util.logging.StreamHandler: void <init>(java.io.OutputStream,java.util.logging.Formatter)>-><java.util.logging.Handler: void <init>()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><java.rmi.server.LogStream: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.StoppedSessionException: void <init>(java.lang.String)>
<com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void <init>(org.apache.shiro.session.mgt.ValidatingSessionManager)>-><java.lang.Object: void <init>()>
<org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<org.apache.shiro.crypto.DefaultBlockCipherService: byte[] generateInitializationVector(boolean)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.time.LocalDateTime: int compareTo(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.realm.AuthenticatingRealm: void cacheAuthenticationInfoIfPossible(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>
<org.apache.shiro.subject.support.DelegatingSubject: void login(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>-><org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: void <init>(java.net.URL)>-><java.net.URL: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><org.apache.http.client.config.RequestConfig: org.apache.http.client.config.RequestConfig$Builder custom()>
<java.util.concurrent.PriorityBlockingQueue: boolean offer(java.lang.Object)>-><java.util.concurrent.PriorityBlockingQueue: void tryGrow(java.lang.Object[],int)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.pam.AbstractAuthenticationStrategy: org.apache.shiro.authc.AuthenticationInfo afterAttempt(org.apache.shiro.realm.Realm,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.authc.AuthenticationInfo,java.lang.Throwable)>
<org.apache.shiro.io.DefaultSerializer: byte[] serialize(java.lang.Object)>-><org.apache.shiro.io.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.crypto.JcaCipherService: void init(javax.crypto.Cipher,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>-><javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.apache.poi.hssf.usermodel.HSSFRow: int compareTo(java.lang.Object)>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String getTransformationString(boolean)>-><org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildStreamingTransformationString()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolveSession(org.apache.shiro.subject.SubjectContext)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.RegularEnumSet: boolean add(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session createExposedSession(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<org.apache.shiro.crypto.JcaCipherService: void init(javax.crypto.Cipher,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>-><org.apache.shiro.crypto.CryptoException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session doCreateSession(org.apache.shiro.session.mgt.SessionContext)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<co.yiiu.pybbs.config.realm.MyCredentialsMatcher: boolean doCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.Object getCredentials()>
<org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>-><java.util.AbstractMap: int hashCode()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<javax.crypto.Cipher$Transform: int supportsModePadding(java.security.Provider$Service)>-><javax.crypto.Cipher$Transform: int supportsMode(java.security.Provider$Service)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.realm.AuthenticatingRealm: boolean supports(org.apache.shiro.authc.AuthenticationToken)>
<java.util.EnumMap: int entryHashCode(int)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void onStop(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getStopTimestamp()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject doCreateSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.mgt.DefaultWebSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<sun.rmi.runtime.NewThreadAction$2: java.lang.ThreadGroup run()>-><java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection getPrincipalsLazy(java.lang.String)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<org.apache.shiro.web.session.HttpServletSession: java.lang.String assertString(java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.String getHost(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DelegatingSession: java.lang.String getHost()>
<org.apache.shiro.authc.AbstractAuthenticator: void notifyFailure(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session getSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.util.WebUtils: boolean isHttp(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject login(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String,java.lang.Throwable)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><javax.security.auth.Subject$SecureSet: boolean add(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<org.apache.shiro.authc.AbstractAuthenticator: void notifySuccess(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><sun.security.x509.X509CRLEntryImpl: int compareTo(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.HashMap: boolean isEmpty()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<org.apache.shiro.crypto.JcaCipherService: byte[] generateInitializationVector(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.mgt.CookieRememberMeManager: org.apache.shiro.web.servlet.Cookie getCookie()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.lang.Boolean: int compareTo(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void appendHttpOnly(java.lang.StringBuilder,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.rmi.runtime.Log: java.lang.String[] getSource()>-><java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
<org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>-><org.apache.commons.collections.FastHashMap$CollectionView: org.apache.commons.collections.FastHashMap access$300(org.apache.commons.collections.FastHashMap$CollectionView)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<org.apache.shiro.subject.support.DelegatingSubject: void clearRunAsIdentities()>-><org.apache.shiro.session.ProxiedSession: java.lang.Object removeAttribute(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject: java.lang.Object getPrincipal()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[])>-><org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[],byte[],boolean)>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><com.google.common.collect.ForwardingMap: java.util.Set entrySet()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.apache.poi.hssf.record.common.UnicodeString: int compareTo(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.joda.time.base.AbstractInstant: int compareTo(java.lang.Object)>
<org.apache.shiro.realm.AuthenticatingRealm: void cacheAuthenticationInfoIfPossible(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.realm.AuthenticatingRealm: boolean isAuthenticationCachingEnabled(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getName()>
<org.apache.shiro.web.session.HttpServletSession: void stop()>-><org.apache.shiro.session.InvalidSessionException: void <init>(java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<javax.crypto.CryptoPermission: boolean impliesParameterSpec(boolean,java.security.spec.AlgorithmParameterSpec)>-><java.lang.Object: boolean equals(java.lang.Object)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.String: java.lang.String toString()>
<co.yiiu.pybbs.config.realm.MyCredentialsMatcher: boolean doCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><co.yiiu.pybbs.util.bcrypt.BCryptPasswordEncoder: boolean matches(java.lang.CharSequence,java.lang.String)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: boolean resolveAuthenticated()>-><org.apache.shiro.session.mgt.DelegatingSession: java.lang.Object getAttribute(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.Object removeAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.Object removeAttribute(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<sun.nio.cs.StreamEncoder: void writeBytes()>-><java.rmi.server.LogStream: void write(byte[],int,int)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.joda.time.LocalDate: int compareTo(java.lang.Object)>
<org.apache.shiro.io.DefaultSerializer: java.lang.Object deserialize(byte[])>-><org.apache.shiro.io.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.shiro.session.mgt.eis.AbstractSessionDAO: java.io.Serializable generateSessionId(org.apache.shiro.session.Session)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.apache.shiro.web.util.WebUtils: boolean _isSessionCreationEnabled(java.lang.Object)>-><org.apache.shiro.web.util.WebUtils: boolean _isSessionCreationEnabled(javax.servlet.ServletRequest)>
<java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)>-><java.util.logging.Handler: void checkPermission()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.authc.UnknownAccountException: void <init>()>-><org.apache.shiro.authc.AccountException: void <init>()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.mgt.DefaultSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: boolean isSessionCreationEnabled()>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>-><java.util.concurrent.TimeUnit$6: long toNanos(long)>
<org.apache.shiro.codec.CodecSupport: byte[] objectToBytes(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendDomain(java.lang.StringBuilder,java.lang.String)>
<java.util.logging.StreamHandler: void flushAndClose()>-><java.io.OutputStreamWriter: void close()>
<java.util.logging.StreamHandler: void configure()>-><java.util.logging.LogManager: java.lang.String getStringProperty(java.lang.String,java.lang.String)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.mgt.AbstractRememberMeManager: void rememberIdentity(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.mgt.AbstractRememberMeManager: void rememberIdentity(org.apache.shiro.subject.Subject,org.apache.shiro.subject.PrincipalCollection)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<java.util.logging.Handler: void setLevel(java.util.logging.Level)>-><java.lang.NullPointerException: void <init>()>
<org.apache.shiro.realm.AuthenticatingRealm: void clearCachedAuthenticationInfo(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.cache.Cache getAvailableAuthenticationCache()>
<java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection,int)>-><java.lang.NullPointerException: void <init>()>
<java.util.logging.Handler: void setLevel(java.util.logging.Level)>-><java.util.logging.Handler: void checkPermission()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.util.JapaneseImperialCalendar: void add(int,int)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session start(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: void applyGlobalSessionTimeout(org.apache.shiro.session.Session)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.session.mgt.eis.AbstractSessionDAO: java.io.Serializable create(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.eis.AbstractSessionDAO: void verifySessionId(java.io.Serializable)>
<org.apache.shiro.session.InvalidSessionException: void <init>(java.lang.String)>-><org.apache.shiro.session.SessionException: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.String toString()>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager resolveSecurityManager()>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<com.google.gson.internal.LinkedTreeMap$Node: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.slf4j.helpers.NOPLogger: boolean isInfoEnabled()>
<org.apache.shiro.mgt.AbstractRememberMeManager: byte[] decrypt(byte[])>-><org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.crypto.CipherService getCipherService()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: void onLogout(org.apache.shiro.subject.PrincipalCollection)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.apache.shiro.web.servlet.SimpleCookie: void <init>(org.apache.shiro.web.servlet.Cookie)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getComment()>
<org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>-><java.lang.String: java.lang.String trim()>
<org.apache.shiro.crypto.JcaCipherService: java.security.SecureRandom getDefaultSecureRandom()>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSecurityManager: void stopSession(org.apache.shiro.subject.Subject)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<org.apache.shiro.crypto.JcaCipherService: java.security.SecureRandom ensureSecureRandom()>-><org.apache.shiro.crypto.JcaCipherService: java.security.SecureRandom getDefaultSecureRandom()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Vector$Itr: boolean hasNext()>
<org.apache.shiro.session.ProxiedSession: java.lang.Object removeAttribute(java.lang.Object)>-><org.apache.shiro.session.mgt.DelegatingSession: java.lang.Object removeAttribute(java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><com.google.common.collect.Maps$Values: java.util.Iterator iterator()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doSingleRealmAuthentication(org.apache.shiro.realm.Realm,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.pam.UnsupportedTokenException: void <init>(java.lang.String)>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendComment(java.lang.StringBuilder,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void afterStopped(org.apache.shiro.session.Session)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.InputStream)>-><java.io.ByteArrayOutputStream: void write(byte[],int,int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.apache.shiro.session.mgt.DelegatingSession: void stop()>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<org.apache.shiro.authz.SimpleAuthorizationInfo: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: java.util.Map delegate()>-><com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: java.util.concurrent.ConcurrentMap delegate()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.ArrayList: boolean isEmpty()>
<org.apache.shiro.spring.LifecycleBeanPostProcessor: void <init>()>-><org.apache.shiro.spring.LifecycleBeanPostProcessor: void <init>(int)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSecurityManager: void delete(org.apache.shiro.subject.Subject)>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.session.Session resolveSession()>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.Subject getSubject()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.util.AbstractMap: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.apache.shiro.web.session.mgt.ServletContainerSessionManager: java.lang.String getHost(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.DefaultSessionContext: java.lang.String getHost()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<org.apache.shiro.io.DefaultSerializer: byte[] serialize(java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.AbstractRememberMeManager: byte[] serialize(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.io.DefaultSerializer: byte[] serialize(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<com.google.common.collect.Maps$KeySet: int size()>-><com.google.common.collect.ForwardingMap: int size()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Throwable)>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.codec.CodecSupport: java.lang.String toString(byte[],java.lang.String)>-><java.lang.String: void <init>(byte[],java.lang.String)>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildTransformationString(java.lang.String,java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>-><java.util.HashMap: boolean isEmpty()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<javax.el.BeanELResolver$SoftConcurrentHashMap: void cleanup()>-><java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>
<org.apache.shiro.web.mgt.DefaultWebSecurityManager: org.apache.shiro.subject.SubjectContext copy(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: void <init>(org.apache.shiro.web.subject.WebSubjectContext)>
<org.apache.shiro.subject.support.DelegatingSubject$StoppingAwareProxiedSession: void <init>(org.apache.shiro.subject.support.DelegatingSubject,org.apache.shiro.session.Session,org.apache.shiro.subject.support.DelegatingSubject,org.apache.shiro.subject.support.DelegatingSubject$1)>-><org.apache.shiro.subject.support.DelegatingSubject$StoppingAwareProxiedSession: void <init>(org.apache.shiro.subject.support.DelegatingSubject,org.apache.shiro.session.Session,org.apache.shiro.subject.support.DelegatingSubject)>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void update(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session createSession(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session createSession(javax.servlet.http.HttpSession,java.lang.String)>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getCachedAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<com.google.common.collect.AbstractMapBasedMultimap$KeySet: boolean equals(java.lang.Object)>-><com.google.common.collect.ForwardingMap: java.util.Set keySet()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.session.ProxiedSession: void setAttribute(java.lang.Object,java.lang.Object)>-><org.apache.shiro.web.session.HttpServletSession: void setAttribute(java.lang.Object,java.lang.Object)>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection deserialize(byte[])>-><org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.io.Serializer getSerializer()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection resolvePrincipals()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.Object getAttribute(java.lang.Object)>
<co.yiiu.pybbs.PybbsApplication: void initBean_synthetic()>-><co.yiiu.pybbs.config.ShiroConfig: org.apache.shiro.web.mgt.CookieRememberMeManager rememberMeManager()>
<org.elasticsearch.client.Node: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.rmi.runtime.Log$LogStreamLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.web.mgt.DefaultWebSecurityManager: void beforeLogout(org.apache.shiro.subject.Subject)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>-><java.util.Arrays: java.lang.String toString(java.lang.Object[])>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolveSession(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<org.apache.shiro.subject.support.DelegatingSubject: void login(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String getHost()>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.subject.support.DelegatingSubject: void clearRunAsIdentitiesInternal()>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.util.MapContext: java.util.Set entrySet()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><javax.crypto.Cipher: void <init>(javax.crypto.CipherSpi,java.security.Provider$Service,java.util.Iterator,java.lang.String,java.util.List)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildTransformationString()>-><org.apache.shiro.crypto.DefaultBlockCipherService: int getBlockSize()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void create(org.apache.shiro.session.Session)>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validate(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.web.util.WebUtils: javax.servlet.ServletResponse getResponse(java.lang.Object)>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: javax.servlet.ServletResponse getServletResponse()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><java.util.ArrayList: int size()>
<java.util.logging.Handler: void setFilter(java.util.logging.Filter)>-><java.util.logging.Handler: void checkPermission()>
<java.text.AttributeEntry: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[],byte[],boolean)>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildStreamingTransformationString()>-><org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildTransformationString(java.lang.String,java.lang.String,int)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject doCreateSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.DefaultSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletResponse getHttpResponse(java.lang.Object)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.ServletResponse getResponse(java.lang.Object)>
<org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.io.ObjectStreamClass: java.lang.String getName()>
<java.rmi.server.LogStream: void write(int)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: java.io.InputStream getInputStream()>
<org.apache.shiro.crypto.JcaCipherService: byte[] crypt(javax.crypto.Cipher,byte[])>-><javax.crypto.Cipher: byte[] doFinal(byte[])>
<java.rmi.server.LogStream: void write(int)>-><java.io.PrintStream: void setError()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.mgt.CookieRememberMeManager: boolean isIdentityRemoved(org.apache.shiro.web.subject.WebSubjectContext)>
<org.springframework.core.ResolvableType: int calculateHashCode()>-><org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider: java.lang.reflect.Type getType()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection convertBytesToPrincipals(byte[],org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.AbstractRememberMeManager: byte[] decrypt(byte[])>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.AuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void create(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: void <init>()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><javax.crypto.Cipher$Transform: int supportsModePadding(java.security.Provider$Service)>
<java.util.concurrent.PriorityBlockingQueue: boolean add(java.lang.Object)>-><java.util.concurrent.PriorityBlockingQueue: boolean offer(java.lang.Object)>
<org.apache.shiro.realm.AuthenticatingRealm: void assertCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.AuthenticationException: void <init>(java.lang.String)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>-><java.util.ConcurrentModificationException: void <init>()>
<org.apache.shiro.web.servlet.SimpleCookie: void <init>(org.apache.shiro.web.servlet.Cookie)>-><org.apache.shiro.web.servlet.SimpleCookie: boolean isSecure()>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: java.lang.String getPath()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: void assertRealmsConfigured()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.apache.shiro.util.StringUtils: java.lang.String toDelimitedString(java.lang.Object[],java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSessionFromDataSource(java.io.Serializable)>-><org.apache.shiro.session.mgt.eis.AbstractSessionDAO: org.apache.shiro.session.Session readSession(java.io.Serializable)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.session.ProxiedSession: java.lang.Object getAttribute(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.Object getAttribute(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<java.util.concurrent.PriorityBlockingQueue: void tryGrow(java.lang.Object[],int)>-><java.lang.OutOfMemoryError: void <init>()>
<org.apache.shiro.mgt.DefaultSubjectDAO: boolean isSessionStorageEnabled(org.apache.shiro.subject.Subject)>-><org.apache.shiro.web.mgt.DefaultWebSessionStorageEvaluator: boolean isSessionStorageEnabled(org.apache.shiro.subject.Subject)>
<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>-><javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.subject.support.DelegatingSubject: void clearRunAsIdentitiesInternal()>-><org.apache.shiro.subject.support.DelegatingSubject: void clearRunAsIdentities()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.mgt.AbstractRememberMeManager: byte[] encrypt(byte[])>-><org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[])>
<org.apache.shiro.session.mgt.eis.AbstractSessionDAO: java.io.Serializable create(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.eis.MemorySessionDAO: java.io.Serializable doCreate(org.apache.shiro.session.Session)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session createExposedSession(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void merge(org.apache.shiro.authc.AuthenticationInfo)>-><java.util.HashSet: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session createExposedSession(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: void setAttribute(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Map getAttributesLazy()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.logging.StreamHandler: void setEncoding(java.lang.String)>-><java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
<org.apache.shiro.session.mgt.eis.AbstractSessionDAO: org.apache.shiro.session.Session readSession(java.io.Serializable)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DelegatingSubject: void <init>(org.apache.shiro.subject.PrincipalCollection,boolean,java.lang.String,org.apache.shiro.session.Session,boolean,org.apache.shiro.mgt.SecurityManager)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: void onLogout(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.authc.pam.ModularRealmAuthenticator: java.util.Collection getRealms()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void enableSessionValidation()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.joda.time.base.AbstractDuration: int compareTo(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><org.apache.http.impl.nio.client.HttpAsyncClientBuilder: org.apache.http.impl.nio.client.HttpAsyncClientBuilder create()>
<java.util.concurrent.PriorityBlockingQueue: void removeAt(int)>-><java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>
<org.apache.shiro.web.session.mgt.WebSessionKey: void <init>(java.io.Serializable,javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.apache.shiro.web.session.mgt.WebSessionKey: void <init>(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolvePrincipals(org.apache.shiro.subject.SubjectContext)>
<org.apache.shiro.web.servlet.SimpleCookie: void <init>(org.apache.shiro.web.servlet.Cookie)>-><org.apache.shiro.web.servlet.SimpleCookie: boolean isHttpOnly()>
<java.text.AttributeEntry: int hashCode()>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void merge(org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authz.AuthorizationInfo doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.realm.AuthenticatingRealm: void assertCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.springframework.util.unit.DataSize: int compareTo(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.session.Session resolveSession()>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authz.AuthorizationInfo doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.authz.SimpleAuthorizationInfo: void <init>()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[])>-><org.apache.shiro.crypto.DefaultBlockCipherService: byte[] generateInitializationVector(boolean)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionContext: void setServletResponse(javax.servlet.ServletResponse)>-><org.apache.shiro.util.MapContext: java.lang.Object put(java.lang.String,java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doSingleRealmAuthentication(org.apache.shiro.realm.Realm,org.apache.shiro.authc.AuthenticationToken)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.web.mgt.DefaultWebSessionStorageEvaluator: boolean isSessionStorageEnabled(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy: org.apache.shiro.authc.AuthenticationInfo afterAllAttempts(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: org.apache.shiro.subject.PrincipalCollection getPrincipals()>
<org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.Object)>-><org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.InputStream)>
<org.apache.shiro.realm.AuthorizingRealm: org.apache.shiro.authz.AuthorizationInfo getAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authz.AuthorizationInfo doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>
<org.apache.shiro.subject.support.DefaultSubjectContext: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.InputStream)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.File)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><com.fasterxml.jackson.databind.type.ClassKey: int compareTo(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSecurityManager: void stopSession(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject$StoppingAwareProxiedSession: void stop()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Map)>-><java.util.Collections$EmptyMap: boolean isEmpty()>
<org.apache.shiro.session.ProxiedSession: java.lang.Object removeAttribute(java.lang.Object)>-><org.apache.shiro.web.session.HttpServletSession: java.lang.Object removeAttribute(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher initNewCipher(int,byte[],byte[],boolean)>-><org.apache.shiro.crypto.JcaCipherService: void init(javax.crypto.Cipher,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.lang.Integer: int compareTo(java.lang.Object)>
<com.google.common.collect.ForwardingMap: boolean containsValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><java.rmi.server.LogStream: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[],byte[])>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.Object removeAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object)>-><org.apache.shiro.session.mgt.DelegatingSession: java.lang.Object removeAttribute(java.lang.Object)>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authz.AuthorizationInfo doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><com.google.common.collect.Maps$Values: int size()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.DelegatingSession: void setAttribute(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.DelegatingSession: java.lang.Object removeAttribute(java.lang.Object)>
<com.google.common.collect.Maps$KeySet: boolean contains(java.lang.Object)>-><com.google.common.collect.ForwardingMap: boolean containsKey(java.lang.Object)>
<org.apache.shiro.authc.UsernamePasswordToken: java.lang.Object getPrincipal()>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String getUsername()>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void <init>(java.lang.Object,java.lang.Object,java.lang.String)>-><java.lang.Object: void <init>()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session createExposedSession(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.DefaultSessionKey: void <init>(java.io.Serializable)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void delete(org.apache.shiro.session.Session)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.apache.shiro.realm.AuthorizingRealm: void doClearCache(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.AuthenticatingRealm: void doClearCache(org.apache.shiro.subject.PrincipalCollection)>
<com.google.common.collect.ForwardingMap: void clear()>-><java.util.concurrent.ConcurrentHashMap: void clear()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.mgt.SimpleSession: boolean isStopped()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><org.apache.shiro.util.ClassUtils: org.slf4j.Logger access$100()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: void onLogout(org.apache.shiro.subject.PrincipalCollection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.time.LocalDate: int compareTo(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSubjectDAO: void saveToSession(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSubjectDAO: void mergePrincipals(org.apache.shiro.subject.Subject)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyExpiration(org.apache.shiro.session.Session)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.apache.shiro.util.MapContext: void <init>(java.util.Map)>-><org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Map)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.Object getAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object)>-><org.apache.shiro.session.mgt.DelegatingSession: java.lang.Object getAttribute(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.lang.Short: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void saveTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getComment()>
<org.apache.shiro.realm.AuthenticatingRealm: void assertCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.logging.StreamHandler: void configure()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.DefaultSessionManager: void create(org.apache.shiro.session.Session)>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownUsingComparator(int,java.lang.Object,java.lang.Object[],int,java.util.Comparator)>-><org.apache.logging.log4j.util.PropertySource$Comparator: int compare(java.lang.Object,java.lang.Object)>
<org.apache.shiro.realm.AuthenticatingRealm: void assertCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean doCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isStopped()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getStopTimestamp()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[],byte[],boolean)>-><org.apache.shiro.util.ByteSource$Util: org.apache.shiro.util.ByteSource bytes(byte[])>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><java.rmi.server.LogStream: java.lang.String toString()>
<org.apache.shiro.authc.AccountException: void <init>(java.lang.String)>-><org.apache.shiro.authc.AuthenticationException: void <init>(java.lang.String)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection getPrincipalsLazy(java.lang.String)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.util.AbstractMap: java.lang.String toString()>
<sun.security.jca.ProviderList$ServiceList: java.security.Provider$Service tryGet(int)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.apache.shiro.mgt.AbstractRememberMeManager: void onSuccessfulLogin(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.mgt.AbstractRememberMeManager: void rememberIdentity(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authc.AuthenticationInfo doGetAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: void info(java.lang.String,java.lang.Object)>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.String,java.lang.String)>-><org.apache.shiro.codec.CodecException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.authc.AuthenticationInfo getAuthenticationInfo()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.flywaydb.core.internal.resource.classpath.ClassPathResource: int compareTo(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>-><java.util.HashMap: boolean isEmpty()>
<java.io.ObjectOutputStream$BlockDataOutputStream: void close()>-><java.io.FilterOutputStream: void close()>
<org.apache.shiro.subject.support.DelegatingSubject: java.util.List getRunAsPrincipalsStack()>-><org.apache.shiro.session.ProxiedSession: java.lang.Object getAttribute(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: byte[] crypt(javax.crypto.Cipher,byte[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.reflect.WeakCache$LookupValue: int hashCode()>
<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>-><java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session createSession(org.apache.shiro.session.mgt.SessionContext)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.apache.shiro.session.ProxiedSession: java.io.Serializable getId()>-><org.apache.shiro.session.ProxiedSession: java.io.Serializable getId()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.spring.LifecycleBeanPostProcessor: void <init>(int)>-><java.lang.Object: void <init>()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void afterExpired(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DefaultSessionManager: boolean isDeleteInvalidSessions()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.Object removeAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void onChange(org.apache.shiro.session.Session)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: void <init>(org.apache.commons.collections.FastHashMap$CollectionView)>-><java.lang.Object: void <init>()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String getTransformationString(boolean)>-><org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildTransformationString()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.session.mgt.eis.AbstractSessionDAO: org.apache.shiro.session.Session readSession(java.io.Serializable)>-><org.apache.shiro.session.mgt.eis.MemorySessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>
<java.util.logging.Handler: void setEncoding(java.lang.String)>-><java.util.logging.Handler: void checkPermission()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: void onLogout(org.apache.shiro.subject.PrincipalCollection)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.AbstractAuthenticator: void notifySuccess(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>
<org.apache.shiro.authc.pam.AbstractAuthenticationStrategy: org.apache.shiro.authc.AuthenticationInfo afterAttempt(org.apache.shiro.realm.Realm,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.authc.AuthenticationInfo,java.lang.Throwable)>-><org.apache.shiro.authc.pam.AbstractAuthenticationStrategy: org.apache.shiro.authc.AuthenticationInfo merge(org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.authc.AuthenticationInfo)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider: java.lang.reflect.Type getType()>-><org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider: java.lang.reflect.Type getType()>
<org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<java.util.logging.SimpleFormatter: void <init>()>-><java.util.Date: void <init>()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.session.Session getSession()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Vector$Itr: java.lang.Object next()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session start(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session createSession(org.apache.shiro.session.mgt.SessionContext)>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<com.google.common.collect.ForwardingMap: boolean isEmpty()>-><com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: java.util.Map delegate()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyExpiration(org.apache.shiro.session.Session)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.mgt.RealmSecurityManager: void applyEventBusToRealms()>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.nio.charset.Charset: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getPath()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject$StoppingAwareProxiedSession: void stop()>-><org.apache.shiro.subject.support.DelegatingSubject: void access$100(org.apache.shiro.subject.support.DelegatingSubject)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.net.URI: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session createSession(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.web.session.mgt.ServletContainerSessionManager: java.lang.String getHost(org.apache.shiro.session.mgt.SessionContext)>
<sun.rmi.runtime.Log$LoggerLog$2: java.lang.Void run()>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.String getMessage()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.apache.shiro.session.mgt.SimpleSession: void setAttribute(java.lang.Object,java.lang.Object)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.IncorrectCredentialsException: void <init>(java.lang.String)>-><org.apache.shiro.authc.CredentialsException: void <init>(java.lang.String)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void delete(org.apache.shiro.session.Session)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<org.apache.shiro.authc.UsernamePasswordToken: java.lang.Object getCredentials()>-><org.apache.shiro.authc.UsernamePasswordToken: char[] getPassword()>
<org.apache.shiro.web.mgt.DefaultWebSecurityManager: org.apache.shiro.session.mgt.SessionKey getSessionKey(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.session.mgt.WebSessionKey: void <init>(java.io.Serializable,javax.servlet.ServletRequest,javax.servlet.ServletResponse)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletResponse getHttpResponse(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: java.lang.String getPath()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>-><org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletRequest getHttpRequest(java.lang.Object)>
<java.rmi.server.LogStream: void write(int)>-><java.io.ByteArrayOutputStream: void reset()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.apache.shiro.util.ClassUtils$2: java.lang.ClassLoader doGetClassLoader()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[])>-><org.apache.shiro.crypto.JcaCipherService: int getInitializationVectorSize()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection onRememberedPrincipalFailure(java.lang.RuntimeException,org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.NOPLogger: boolean isWarnEnabled()>
<org.apache.shiro.spring.ShiroEventBusBeanPostProcessor: void <init>(org.apache.shiro.event.EventBus)>-><java.lang.Object: void <init>()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject doCreateSubject(org.apache.shiro.subject.SubjectContext)>
<sun.rmi.runtime.Log$LoggerLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[],byte[])>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session doGetSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidationIfNecessary()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.util.ArrayList: void <init>(int)>
<org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: void <init>(org.apache.commons.collections.FastHashMap$CollectionView)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.rmi.runtime.Log$LoggerLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolveSession(org.apache.shiro.subject.SubjectContext)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Throwable)>
<javax.crypto.Cipher: javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service,java.util.List)>-><java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.Collections$EmptyList: boolean containsAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean isEmpty()>
<org.apache.shiro.mgt.DefaultSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection resolvePrincipals()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.rmi.runtime.NewThreadAction: java.lang.Object run()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Throwable)>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><java.io.PrintStream: void close()>
<sun.rmi.runtime.Log$LogStreamLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><sun.rmi.runtime.Log$LogStreamLog: java.lang.String unqualifiedName(java.lang.String)>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.String getHost(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: java.lang.Object get(int)>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection resolvePrincipals()>-><org.apache.shiro.subject.support.DefaultSubjectContext: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[],byte[],boolean)>-><org.apache.shiro.crypto.JcaCipherService: byte[] crypt(byte[],byte[],byte[],int)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Map getAttributes()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject login(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.mgt.AuthenticatingSecurityManager: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>
<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>-><sun.security.jca.ProviderList$ServiceList$1: java.lang.Object next()>
<sun.rmi.runtime.Log$LogStreamLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.apache.shiro.web.util.SavedRequest: java.lang.String getRequestUrl()>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.logging.StreamHandler: void flushAndClose()>-><java.util.logging.Handler: java.util.logging.Formatter getFormatter()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.Object removeAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object)>-><org.apache.shiro.web.session.HttpServletSession: java.lang.Object removeAttribute(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStop(org.apache.shiro.session.Session)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection resolvePrincipals()>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><java.util.Vector: java.lang.Object get(int)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy: org.apache.shiro.authc.AuthenticationInfo afterAllAttempts(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.authc.pam.ModularRealmAuthenticator: void onLogout(org.apache.shiro.subject.PrincipalCollection)>
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy: org.apache.shiro.authc.AuthenticationInfo afterAllAttempts(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.web.session.HttpServletSession: java.lang.Object getAttribute(java.lang.Object)>-><org.apache.shiro.session.InvalidSessionException: void <init>(java.lang.Throwable)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.slf4j.helpers.SubstituteLogger: boolean isInfoEnabled()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.logging.StreamHandler: void configure()>-><java.util.logging.LogManager: java.util.logging.Formatter getFormatterProperty(java.lang.String,java.util.logging.Formatter)>
<org.apache.shiro.subject.support.DelegatingSubject: java.util.List getRunAsPrincipalsStack()>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>
<java.util.logging.StreamHandler: void flushAndClose()>-><java.util.logging.Handler: void checkPermission()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.time.Instant: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSessionFactory: org.apache.shiro.session.Session createSession(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.DefaultSessionContext: java.lang.String getHost()>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergeAuthenticationState(org.apache.shiro.subject.Subject)>-><org.apache.shiro.session.ProxiedSession: java.lang.Object removeAttribute(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: boolean isExpired()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection resolvePrincipals()>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.authc.AuthenticationInfo getAuthenticationInfo()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendDomain(java.lang.StringBuilder,java.lang.String)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<org.apache.shiro.util.ByteSource$Util: org.apache.shiro.util.ByteSource bytes(byte[])>-><org.apache.shiro.util.SimpleByteSource: void <init>(byte[])>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>-><java.net.URLConnection: java.security.Permission getPermission()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><java.rmi.server.LogStream: java.lang.String toString()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doAuthenticate(org.apache.shiro.authc.AuthenticationToken)>-><java.util.ArrayList: int size()>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.util.logging.StreamHandler: void configure()>-><java.lang.Object: java.lang.Class getClass()>
<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>-><org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: java.io.InputStream getInputStream()>
<sun.rmi.runtime.NewThreadAction: java.lang.Thread run()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session doGetSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.Collections$SetFromMap: boolean contains(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean containsKey(java.lang.Object)>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: java.io.Serializable doCreate(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.eis.MemorySessionDAO: org.apache.shiro.session.Session storeSession(java.io.Serializable,org.apache.shiro.session.Session)>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String toCookieDate(java.util.Date)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.mgt.DefaultSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: java.lang.String resolveHost()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><com.alibaba.fastjson.util.FieldInfo: int compareTo(java.lang.Object)>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void merge(org.apache.shiro.authc.AuthenticationInfo)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.session.mgt.eis.AbstractSessionDAO: org.apache.shiro.session.Session readSession(java.io.Serializable)>-><java.lang.StringBuilder: void <init>()>
<co.yiiu.pybbs.controller.admin.IndexAdminController: java.lang.String adminlogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,java.lang.Boolean,javax.servlet.http.HttpServletRequest,org.springframework.web.servlet.mvc.support.RedirectAttributes)>-><org.apache.shiro.subject.support.DelegatingSubject: void login(org.apache.shiro.authc.AuthenticationToken)>
<co.yiiu.pybbs.config.service.SmsService: boolean sendSms(java.lang.String,java.lang.String)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.collect.Maps$Values: boolean isEmpty()>-><com.google.common.collect.ForwardingMap: boolean isEmpty()>
<org.apache.shiro.mgt.AbstractRememberMeManager: void rememberIdentity(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection getIdentityToRemember(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationInfo)>
<org.apache.shiro.mgt.AbstractRememberMeManager: void onSuccessfulLogin(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[],byte[])>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: javax.servlet.http.Cookie getCookie(javax.servlet.http.HttpServletRequest,java.lang.String)>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getCachedAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<java.util.AbstractList: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.web.servlet.SimpleCookie: void saveTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getValue()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.mgt.RememberMeManager getRememberMeManager()>
<java.io.ObjectOutputStream$BlockDataOutputStream: void drain()>-><java.io.BufferedOutputStream: void write(byte[],int,int)>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Map getAttributes()>
<org.apache.commons.collections.FastHashMap$CollectionView: java.lang.Object[] toArray()>-><java.util.AbstractCollection: java.lang.Object[] toArray()>
<org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.mgt.SessionContext createSessionContext()>
<sun.misc.URLClassPath$Loader$1: java.io.InputStream getInputStream()>-><org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: java.io.InputStream getInputStream()>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarUrlStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getProtocol()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: void <init>(org.apache.commons.collections.FastHashMap$CollectionView)>-><java.util.HashMap: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.String toString()>-><java.rmi.server.LogStream: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: void <init>(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.AbstractCollection: boolean add(java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: java.lang.String resolveHost()>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.session.Session resolveSession()>
<org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy: org.apache.shiro.authc.AuthenticationInfo afterAllAttempts(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.crypto.DefaultBlockCipherService: boolean isGenerateInitializationVectors(boolean)>-><org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String getModeName()>
<co.yiiu.pybbs.PybbsApplication: void initBean_synthetic()>-><co.yiiu.pybbs.config.ShiroConfig: org.apache.shiro.spring.web.ShiroFilterFactoryBean shiroFilterFactoryBean(org.apache.shiro.web.mgt.DefaultWebSecurityManager)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.util.StringUtils: java.lang.String toDelimitedString(java.lang.Object[],java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildTransformationString(java.lang.String,java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: void login(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.subject.support.DelegatingSubject: void clearRunAsIdentitiesInternal()>
<org.apache.shiro.authc.AuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>-><org.apache.shiro.ShiroException: void <init>(java.lang.String,java.lang.Throwable)>
<org.elasticsearch.client.PersistentCredentialsAuthenticationStrategy: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.springframework.util.MimeType: int compareTo(java.lang.Object)>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.Object)>-><org.apache.shiro.codec.CodecSupport: byte[] toBytes(char[])>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.rmi.runtime.RuntimeUtil$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.logging.LogManager: java.util.logging.Formatter getFormatterProperty(java.lang.String,java.util.logging.Formatter)>-><java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.AbstractAuthenticator: void notifyFailure(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.lang.ProcessEnvironment$StringKeySet: boolean isEmpty()>
<org.apache.shiro.subject.support.DefaultSubjectContext: void setSession(org.apache.shiro.session.Session)>-><org.apache.shiro.util.MapContext: void nullSafePut(java.lang.String,java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.apache.shiro.web.mgt.DefaultWebSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.session.Session resolveSession()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><sun.util.BuddhistCalendar: void add(int,int)>
<co.yiiu.pybbs.PybbsApplication: void initBean_synthetic()>-><co.yiiu.pybbs.config.ShiroConfig: org.apache.shiro.web.servlet.SimpleCookie rememberMeCookie()>
<org.apache.shiro.subject.support.DelegatingSubject: void <init>(org.apache.shiro.subject.PrincipalCollection,boolean,java.lang.String,org.apache.shiro.session.Session,boolean,org.apache.shiro.mgt.SecurityManager)>-><java.lang.Object: void <init>()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendSecure(java.lang.StringBuilder,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext ensureSecurityManager(org.apache.shiro.subject.SubjectContext)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.apache.shiro.mgt.AbstractRememberMeManager: void onLogout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(org.apache.shiro.subject.Subject)>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.Collection: java.util.stream.Stream stream()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection getPrincipalsLazy(java.lang.String)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyExpiration(org.apache.shiro.session.Session)>
<org.apache.shiro.crypto.CryptoException: void <init>(java.lang.String,java.lang.Throwable)>-><org.apache.shiro.ShiroException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.session.ProxiedSession: java.lang.String getHost()>-><org.apache.shiro.web.session.HttpServletSession: java.lang.String getHost()>
<org.apache.shiro.web.session.HttpServletSession: void <init>(javax.servlet.http.HttpSession,java.lang.String)>-><java.lang.Object: void <init>()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.Boolean: java.lang.String toString()>
<org.apache.shiro.web.session.HttpServletSession: java.lang.Object removeAttribute(java.lang.Object)>-><org.apache.shiro.web.session.HttpServletSession: java.lang.String assertString(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void <init>(org.apache.shiro.web.servlet.Cookie)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getDomain()>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.session.mgt.WebSessionKey: javax.servlet.ServletRequest getServletRequest()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>-><org.apache.shiro.web.mgt.CookieRememberMeManager: org.apache.shiro.web.servlet.Cookie getCookie()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: boolean resolveAuthenticated()>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.session.Session resolveSession()>
<org.apache.shiro.web.util.WebUtils: boolean _isSessionCreationEnabled(java.lang.Object)>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: javax.servlet.ServletRequest getServletRequest()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapBasedMultimap$KeySet: java.util.Spliterator spliterator()>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Spliterator spliterator()>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><org.apache.http.impl.nio.client.HttpAsyncClientBuilder: org.apache.http.impl.nio.client.HttpAsyncClientBuilder setMaxConnTotal(int)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.subject.support.DefaultSubjectContext: java.lang.String resolveHost()>-><org.apache.shiro.web.session.HttpServletSession: java.lang.String getHost()>
<org.apache.shiro.subject.support.DelegatingSubject: void clearRunAsIdentitiesInternal()>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.PrincipalCollection getRememberedIdentity(org.apache.shiro.subject.SubjectContext)>-><java.lang.StringBuilder: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<javax.crypto.Cipher: javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolveSession(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.session.Session resolveContextSession(org.apache.shiro.subject.SubjectContext)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><freemarker.ext.beans.OverloadedNumberUtil$NumberWithFallbackType: int compareTo(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergeAuthenticationState(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject: boolean isAuthenticated()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getStopTimestamp()>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.slf4j.event.EventRecodingLogger: void trace(java.lang.String,java.lang.Object)>-><org.slf4j.event.EventRecodingLogger: void recordEvent_1Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object)>
<org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.web.session.HttpServletSession: void setAttribute(java.lang.Object,java.lang.Object)>-><org.apache.shiro.web.session.HttpServletSession: java.lang.String assertString(java.lang.Object)>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>-><javax.crypto.Cipher$Transform: int supportsModePadding(java.security.Provider$Service)>
<java.util.Optional: java.util.Optional map(java.util.function.Function)>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getName()>
<org.elasticsearch.client.Node: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: boolean isWarnEnabled()>
<org.apache.shiro.mgt.DefaultSubjectFactory: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: boolean resolveAuthenticated()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String toCookieDate(java.util.Date)>-><java.text.DateFormat: void setTimeZone(java.util.TimeZone)>
<java.rmi.server.LogStream: void write(int)>-><java.lang.StringBuffer: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>-><javax.el.BeanELResolver$SoftConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.elasticsearch.client.Node: int hashCode()>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><org.apache.http.impl.nio.client.HttpAsyncClientBuilder: org.apache.http.impl.nio.client.HttpAsyncClientBuilder setMaxConnPerRoute(int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.io.DefaultSerializer: java.lang.Object deserialize(byte[])>-><java.io.ObjectInputStream: void close()>
<org.apache.shiro.util.MapContext: java.util.Set entrySet()>-><java.util.HashMap: java.util.Set entrySet()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.rmi.runtime.Log$LogStreamLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><sun.rmi.runtime.Log$LogStreamLog: boolean isLoggable(java.util.logging.Level)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: void expire()>-><org.apache.shiro.session.mgt.SimpleSession: void stop()>
<java.text.AttributeEntry: int hashCode()>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.mgt.DefaultSecurityManager: void stopSession(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>
<com.google.common.collect.ForwardingMap: boolean isEmpty()>-><java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authz.AuthorizationInfo doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><co.yiiu.pybbs.service.impl.AdminUserService: co.yiiu.pybbs.model.AdminUser selectByUsername(java.lang.String)>
<org.apache.shiro.crypto.JcaCipherService: byte[] generateInitializationVector(boolean)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.google.gson.internal.LinkedTreeMap$Node: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarUrlStreamHandler: java.net.URLConnection openConnection(java.net.URL)>-><org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: void <init>(java.net.URL)>
<org.apache.shiro.subject.support.DefaultSubjectContext: boolean isSessionCreationEnabled()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.shiro.crypto.JcaCipherService: byte[] generateInitializationVector(boolean)>-><java.lang.StringBuilder: void <init>()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.rmi.runtime.RuntimeUtil$1: java.lang.Thread newThread(java.lang.Runnable)>-><sun.rmi.runtime.Log$LoggerLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Throwable)>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>-><org.springframework.boot.web.embedded.jetty.JasperInitializer$WarUrlStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.AuthenticatingSecurityManager: org.apache.shiro.authc.Authenticator getAuthenticator()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<sun.rmi.runtime.Log$LogStreamLog: boolean isLoggable(java.util.logging.Level)>-><java.util.logging.Level: int intValue()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.mgt.SimpleSession: void expire()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<org.apache.shiro.realm.CachingRealm: void clearCache(org.apache.shiro.subject.PrincipalCollection)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: boolean pathMatches(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.codec.Base64: byte[] discardNonBase64(byte[])>-><org.apache.shiro.codec.Base64: boolean isBase64(byte)>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.lang.Object: java.lang.Class getClass()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<org.apache.shiro.web.session.HttpServletSession: void setAttribute(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.InvalidSessionException: void <init>(java.lang.Throwable)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>-><java.lang.String: int hashCode()>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletResponse resolveServletResponse()>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: javax.servlet.ServletResponse getServletResponse()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.SimpleSession: void stop()>
<java.util.Collections$EmptyList: boolean containsAll(java.util.Collection)>-><java.util.JumboEnumSet: boolean isEmpty()>
<org.apache.shiro.crypto.JcaCipherService: byte[] generateInitializationVector(boolean)>-><org.apache.shiro.crypto.JcaCipherService: int getInitializationVectorSize()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.PrincipalCollection getRememberedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.apache.shiro.session.ProxiedSession: java.io.Serializable getId()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.logging.StreamHandler: void <init>(java.io.OutputStream,java.util.logging.Formatter)>-><java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><javax.crypto.Cipher: javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service,java.util.List)>
<org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: org.slf4j.Logger delegate()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean add(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><org.elasticsearch.client.RestClientBuilder$2: java.lang.Object run()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<org.apache.shiro.session.mgt.DelegatingSession: java.lang.String getHost()>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.String getHost(org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getCachedAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.joda.time.field.MillisDurationField: int compareTo(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.util.Calendar: java.util.Calendar getInstance()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session doGetSession(org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>-><java.io.PrintStream: void println(java.lang.String)>
<org.apache.shiro.session.mgt.DefaultSessionContext: java.lang.String getHost()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session doGetSession(org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void setAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.authc.pam.UnsupportedTokenException: void <init>(java.lang.String)>-><org.apache.shiro.authc.AuthenticationException: void <init>(java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject login(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: void info(java.lang.String,java.lang.Throwable)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.session.ProxiedSession: void <init>(org.apache.shiro.session.Session)>-><java.lang.Object: void <init>()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>-><java.lang.Class: java.lang.String getName()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>-><org.apache.shiro.web.servlet.SimpleCookie: void <init>(org.apache.shiro.web.servlet.Cookie)>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<javax.crypto.Cipher: void chooseFirstProvider()>-><java.security.Provider$Service: java.security.Provider getProvider()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStart(org.apache.shiro.session.Session)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><org.apache.http.impl.nio.client.HttpAsyncClientBuilder: org.apache.http.impl.nio.client.HttpAsyncClientBuilder setSSLContext(javax.net.ssl.SSLContext)>
<org.apache.shiro.web.subject.support.WebDelegatingSubject: boolean isSessionCreationEnabled()>-><org.apache.shiro.subject.support.DelegatingSubject: boolean isSessionCreationEnabled()>
<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>-><org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: java.io.InputStream getInputStream()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildTransformationString(java.lang.String,java.lang.String,int)>-><org.apache.shiro.crypto.JcaCipherService: java.lang.String getAlgorithmName()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><org.apache.shiro.subject.support.DelegatingSubject: java.util.List getRunAsPrincipalsStack()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><java.rmi.server.LogStream: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStop(org.apache.shiro.session.Session)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager resolveSecurityManager()>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.apache.shiro.crypto.DefaultBlockCipherService: byte[] generateInitializationVector(boolean)>-><org.apache.shiro.crypto.DefaultBlockCipherService: boolean isModeInitializationVectorCompatible(java.lang.String)>
<org.apache.shiro.web.subject.support.WebDelegatingSubject: org.apache.shiro.session.mgt.SessionContext createSessionContext()>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<org.apache.shiro.io.DefaultSerializer: byte[] serialize(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>
<org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>-><org.apache.shiro.session.mgt.DefaultSessionKey: java.io.Serializable getSessionId()>
<org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>-><java.lang.Enum: java.lang.String name()>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><org.apache.http.impl.nio.client.HttpAsyncClientBuilder: org.apache.http.impl.nio.client.HttpAsyncClientBuilder setTargetAuthenticationStrategy(org.apache.http.client.AuthenticationStrategy)>
<java.util.AbstractList: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.NOPLogger: boolean isWarnEnabled()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DefaultSubjectContext: void setAuthenticated(boolean)>
<sun.rmi.runtime.Log$LoggerLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><java.lang.Thread: java.lang.String getName()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.AbstractCollection: boolean isEmpty()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validate(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>
<sun.rmi.runtime.Log$LogStreamLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><org.springframework.beans.factory.BeanCreationException: void printStackTrace(java.io.PrintStream)>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection resolvePrincipals()>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection getPrincipals()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.TreeSet: java.util.Iterator iterator()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection onRememberedPrincipalFailure(java.lang.RuntimeException,org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String)>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionContext: javax.servlet.ServletResponse getServletResponse()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<javax.crypto.Cipher: void <init>(javax.crypto.CipherSpi,java.security.Provider$Service,java.util.Iterator,java.lang.String,java.util.List)>-><java.lang.Object: void <init>()>
<java.util.Optional: java.util.Optional map(java.util.function.Function)>-><java.util.Optional: boolean isPresent()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.session.Session resolveContextSession(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.mgt.DefaultWebSecurityManager: org.apache.shiro.session.mgt.SessionKey getSessionKey(org.apache.shiro.subject.SubjectContext)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection getRememberedPrincipals(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection onRememberedPrincipalFailure(java.lang.RuntimeException,org.apache.shiro.subject.SubjectContext)>
<sun.rmi.runtime.NewThreadAction: void <init>(java.lang.Runnable,java.lang.String,boolean)>-><sun.rmi.runtime.NewThreadAction: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,boolean)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: boolean isSecure()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doAuthenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.pam.ModularRealmAuthenticator: void assertRealmsConfigured()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.CachingRealm: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.EnumMap: int entryHashCode(int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<co.yiiu.pybbs.PybbsApplication: void initBean_synthetic()>-><co.yiiu.pybbs.config.ShiroConfig: org.apache.shiro.web.mgt.DefaultWebSecurityManager defaultWebSecurityManager()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><com.alibaba.fastjson.util.FieldInfo: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.DefaultSessionManager: void onChange(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.eis.MemorySessionDAO: void update(org.apache.shiro.session.Session)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doAuthenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doSingleRealmAuthentication(org.apache.shiro.realm.Realm,org.apache.shiro.authc.AuthenticationToken)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.time.Year: int compareTo(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<sun.rmi.runtime.NewThreadAction: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,boolean)>-><java.lang.Object: void <init>()>
<org.apache.shiro.session.mgt.DefaultSessionContext: void <init>()>-><org.apache.shiro.util.MapContext: void <init>()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>-><org.apache.shiro.util.StringUtils: java.lang.String toString(java.lang.Object[])>
<org.apache.shiro.subject.support.DefaultSubjectContext: void setAuthenticated(boolean)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: javax.servlet.ServletResponse getServletResponse()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection,int)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validate(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<sun.rmi.runtime.Log$LoggerLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><sun.rmi.runtime.Log$LoggerLog: boolean isLoggable(java.util.logging.Level)>
<org.apache.shiro.mgt.AbstractRememberMeManager: void onSuccessfulLogin(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.mgt.AbstractRememberMeManager: boolean isRememberMe(org.apache.shiro.authc.AuthenticationToken)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[],byte[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.subject.support.DefaultSubjectContext: boolean resolveAuthenticated()>-><java.lang.Boolean: boolean booleanValue()>
<sun.rmi.runtime.Log$LoggerLog$2: java.lang.Void run()>-><java.util.logging.Logger: void addHandler(java.util.logging.Handler)>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.web.mgt.DefaultWebSecurityManager: void removeRequestIdentity(org.apache.shiro.subject.Subject)>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: javax.servlet.ServletRequest getServletRequest()>
<javax.crypto.Cipher: javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service,java.util.List)>-><java.security.Provider$Service: java.lang.String getAlgorithm()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.shiro.session.ProxiedSession: void stop()>-><org.apache.shiro.web.session.HttpServletSession: void stop()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.InputStream)>-><java.io.FileInputStream: void close()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>-><ch.qos.logback.classic.Logger: boolean isWarnEnabled()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>-><javax.crypto.Cipher: void checkCryptoPerm(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<org.apache.shiro.subject.support.DefaultSubjectContext: void setPrincipals(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.support.DefaultSubjectContext: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><freemarker.ext.beans.SequenceAdapter: java.lang.Object get(int)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void saveTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>
<org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletRequest getHttpRequest(java.lang.Object)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.ServletRequest getRequest(java.lang.Object)>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><java.rmi.server.LogStream: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.rmi.runtime.NewThreadAction$1: java.lang.Object run()>-><sun.rmi.runtime.NewThreadAction$1: java.lang.ThreadGroup run()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$KeySet: boolean isEmpty()>-><com.google.common.collect.ForwardingMap: boolean isEmpty()>
<org.apache.shiro.realm.CachingRealm: void clearCache(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.AuthorizingRealm: void doClearCache(org.apache.shiro.subject.PrincipalCollection)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.mgt.SessionContext createSessionContext()>-><org.apache.shiro.session.mgt.DefaultSessionContext: void setHost(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: void validate()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.lang.Math: long max(long,long)>
<java.util.logging.LogManager: java.util.logging.Filter getFilterProperty(java.lang.String,java.util.logging.Filter)>-><java.util.ResourceBundle$RBClassLoader: java.lang.Class loadClass(java.lang.String)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.Object getPrimaryPrincipal()>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>
<java.net.URLConnection: long getLastModified()>-><java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.io.File: int compareTo(java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<org.apache.shiro.realm.AuthenticatingRealm: java.lang.Object getAuthenticationCacheKey(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>
<org.apache.shiro.session.mgt.DelegatingSession: void <init>(org.apache.shiro.session.mgt.NativeSessionManager,org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.String getMessage()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.pam.AbstractAuthenticationStrategy: org.apache.shiro.authc.AuthenticationInfo beforeAttempt(org.apache.shiro.realm.Realm,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.flywaydb.core.internal.info.MigrationInfoImpl: int compareTo(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>-><java.lang.String: int hashCode()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection getPrincipalsLazy(java.lang.String)>-><java.util.LinkedHashMap: void <init>()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.web.session.mgt.WebSessionKey: void <init>(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.apache.shiro.session.mgt.DefaultSessionKey: void <init>()>
<java.text.AttributeEntry: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: void onStop(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletResponse getServletResponse()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<com.google.common.collect.ForwardingMap: java.util.Set keySet()>-><java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>
<com.google.common.collect.ForwardingMap: void clear()>-><com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: java.util.Map delegate()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: int compareTo(java.lang.Object)>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.apache.shiro.session.mgt.DelegatingSession: void <init>(org.apache.shiro.session.mgt.NativeSessionManager,org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.apache.shiro.session.mgt.DelegatingSession: void <init>(org.apache.shiro.session.mgt.NativeSessionManager,org.apache.shiro.session.mgt.SessionKey)>-><java.lang.Object: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: java.lang.Object dequeue()>-><java.util.concurrent.PriorityBlockingQueue: void siftDownUsingComparator(int,java.lang.Object,java.lang.Object[],int,java.util.Comparator)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.web.mgt.DefaultWebSecurityManager: void beforeLogout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSecurityManager: void beforeLogout(org.apache.shiro.subject.Subject)>
<org.apache.shiro.realm.AuthenticatingRealm: boolean supports(org.apache.shiro.authc.AuthenticationToken)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[],byte[],boolean)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.time.OffsetDateTime: int compareTo(java.lang.Object)>
<org.elasticsearch.client.RestClientBuilder$1: java.lang.Object run()>-><org.elasticsearch.client.RestClientBuilder$1: org.apache.http.impl.nio.client.CloseableHttpAsyncClient run()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DefaultSubjectContext: void setSubject(org.apache.shiro.subject.Subject)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.PrincipalCollection getRememberedIdentity(org.apache.shiro.subject.SubjectContext)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.apache.shiro.util.ClassUtils$1: java.lang.ClassLoader doGetClassLoader()>-><java.util.concurrent.ForkJoinWorkerThread$InnocuousForkJoinWorkerThread: java.lang.ClassLoader getContextClassLoader()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.mgt.AuthenticatingSecurityManager: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest resolveServletRequest()>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest getServletRequest()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.lang.Long: int hashCode()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void <init>(org.apache.shiro.session.mgt.ValidatingSessionManager)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void <init>(org.apache.shiro.web.servlet.Cookie)>-><java.lang.Object: void <init>()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendPath(java.lang.StringBuilder,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.subject.support.DelegatingSubject: void access$100(org.apache.shiro.subject.support.DelegatingSubject)>-><org.apache.shiro.subject.support.DelegatingSubject: void sessionStopped()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager resolveSecurityManager()>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><java.rmi.server.LogStream: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<org.apache.shiro.subject.support.DefaultSubjectContext: void <init>(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.util.MapContext: void <init>(java.util.Map)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><com.alibaba.fastjson.JSONArray: java.lang.Object get(int)>
<sun.rmi.runtime.NewThreadAction: java.lang.Thread run()>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.web.session.mgt.WebSessionKey: void <init>(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<org.apache.shiro.realm.AuthenticatingRealm: void clearCachedAuthenticationInfo(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.AuthenticatingRealm: java.lang.Object getAuthenticationCacheKey(org.apache.shiro.subject.PrincipalCollection)>
<org.apache.shiro.crypto.DefaultBlockCipherService: boolean isGenerateInitializationVectors(boolean)>-><org.apache.shiro.crypto.DefaultBlockCipherService: boolean isModeInitializationVectorCompatible(java.lang.String)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>
<org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy: org.apache.shiro.authc.AuthenticationInfo afterAllAttempts(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionContext: javax.servlet.ServletRequest getServletRequest()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<org.apache.shiro.web.servlet.SimpleCookie: void saveTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getDomain()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean doCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.credential.SimpleCredentialsMatcher: java.lang.Object getCredentials(org.apache.shiro.authc.AuthenticationInfo)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session createSession(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session doCreateSession(org.apache.shiro.session.mgt.SessionContext)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.pam.AuthenticationStrategy getAuthenticationStrategy()>
<org.apache.shiro.session.mgt.DelegatingSession: void setAttribute(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: void setAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.net.URL: java.net.URLConnection openConnection()>-><org.springframework.boot.web.embedded.jetty.JasperInitializer$WarUrlStreamHandler: java.net.URLConnection openConnection(java.net.URL)>
<org.apache.shiro.web.mgt.DefaultWebSecurityManager: org.apache.shiro.subject.SubjectContext createSubjectContext()>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: void <init>()>
<org.apache.shiro.session.InvalidSessionException: void <init>(java.lang.Throwable)>-><org.apache.shiro.session.SessionException: void <init>(java.lang.Throwable)>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.util.logging.StreamHandler: void configure()>-><java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<org.apache.shiro.authc.AbstractAuthenticator: void notifySuccess(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.lang.Boolean: int hashCode()>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection onRememberedPrincipalFailure(java.lang.RuntimeException,org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.SubstituteLogger: boolean isWarnEnabled()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.session.mgt.ImmutableProxiedSession: void <init>(org.apache.shiro.session.Session)>-><org.apache.shiro.session.ProxiedSession: void <init>(org.apache.shiro.session.Session)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.SubList$1: boolean hasNext()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void create(org.apache.shiro.session.Session)>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<java.rmi.server.LogStream: void write(int)>-><java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: org.apache.shiro.session.mgt.SessionContext createSessionContext()>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<java.util.concurrent.PriorityBlockingQueue: int size()>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.lang.Double: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void update(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<java.util.logging.StreamHandler: void configure()>-><java.util.logging.LogManager: java.util.logging.Filter getFilterProperty(java.lang.String,java.util.logging.Filter)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session decorate(org.apache.shiro.session.Session)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.mgt.CookieRememberMeManager: java.lang.String ensurePadding(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.util.WebUtils: boolean isHttp(java.lang.Object)>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authz.AuthorizationInfo doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><co.yiiu.pybbs.service.impl.RoleService: co.yiiu.pybbs.model.Role selectById(java.lang.Integer)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline: void forEach(java.util.function.Consumer)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.io.File: int compareTo(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: boolean remove(java.lang.Object)>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set getRealmNames()>
<java.util.AbstractList: int hashCode()>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.elasticsearch.client.Node: int hashCode()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpUsingComparator(int,java.lang.Object,java.lang.Object[],java.util.Comparator)>-><org.apache.logging.log4j.util.PropertySource$Comparator: int compare(java.lang.Object,java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.joda.time.field.UnsupportedDurationField: int compareTo(java.lang.Object)>
<org.apache.shiro.authc.CredentialsException: void <init>(java.lang.String)>-><org.apache.shiro.authc.AuthenticationException: void <init>(java.lang.String)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendSecure(java.lang.StringBuilder,boolean)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.shiro.session.mgt.eis.AbstractSessionDAO: java.io.Serializable generateSessionId(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator: java.io.Serializable generateId(org.apache.shiro.session.Session)>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher initNewCipher(int,byte[],byte[],boolean)>-><org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher newCipherInstance(boolean)>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: java.lang.Object peek()>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<org.apache.shiro.spring.config.ShiroBeanConfiguration: org.apache.shiro.spring.ShiroEventBusBeanPostProcessor shiroEventBusAwareBeanPostProcessor()>-><org.apache.shiro.spring.config.AbstractShiroBeanConfiguration: org.apache.shiro.spring.ShiroEventBusBeanPostProcessor shiroEventBusAwareBeanPostProcessor()>
<org.apache.shiro.io.DefaultSerializer: byte[] serialize(java.lang.Object)>-><java.io.ByteArrayOutputStream: byte[] toByteArray()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.apache.shiro.realm.AuthenticatingRealm: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: java.lang.String resolveHost()>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest resolveServletRequest()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroupMember: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStart(org.apache.shiro.session.Session)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session getSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletRequest getHttpRequest(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<javax.el.BeanELResolver$SoftConcurrentHashMap: javax.el.BeanELResolver$BeanProperties get(java.lang.Object)>-><javax.el.BeanELResolver$SoftConcurrentHashMap: void cleanup()>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.CachingRealm: java.lang.String getName()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext ensureSecurityManager(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session doCreateSession(org.apache.shiro.session.mgt.SessionContext)>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.time.OffsetDateTime: int compareTo(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<sun.util.locale.LocaleUtils: boolean isEmpty(java.util.Set)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean isEmpty()>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: boolean isWarnEnabled()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.rmi.runtime.Log$LoggerLog$1: java.lang.Object run()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>-><org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>
<org.elasticsearch.client.Node: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher newCipherInstance(boolean)>-><java.lang.Class: java.lang.String getName()>
<org.apache.shiro.codec.Base64: byte[] decode(byte[])>-><org.apache.shiro.codec.Base64: byte[] discardNonBase64(byte[])>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session getSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session createExposedSession(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.Object getAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object)>-><org.apache.shiro.web.session.HttpServletSession: java.lang.Object getAttribute(java.lang.Object)>
<java.rmi.server.LogStream: void write(int)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.rmi.runtime.Log$LogStreamLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><java.io.PrintStream: void println(java.lang.String)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: void onLogout(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<java.io.ObjectInputStream$PeekInputStream: int read()>-><java.io.BufferedInputStream: int read()>
<org.apache.shiro.session.ProxiedSession: java.lang.Object getAttribute(java.lang.Object)>-><org.apache.shiro.session.mgt.DelegatingSession: java.lang.Object getAttribute(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.util.GregorianCalendar: void add(int,int)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.TreeMap$Entry: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.InputStream)>-><java.io.ByteArrayOutputStream: void <init>(int)>
<com.google.gson.internal.LinkedTreeMap$Node: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.crypto.JcaCipherService: void init(javax.crypto.Cipher,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>-><javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>
<org.apache.shiro.mgt.AbstractRememberMeManager: void onFailedLogin(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException)>-><org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(org.apache.shiro.subject.Subject)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolvePrincipals(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.apache.shiro.realm.AuthenticatingRealm: boolean supports(org.apache.shiro.authc.AuthenticationToken)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.io.DefaultSerializer: java.lang.Object deserialize(byte[])>-><org.apache.shiro.io.ClassResolvingObjectInputStream: void <init>(java.io.InputStream)>
<sun.misc.URLClassPath: void check(java.net.URL)>-><java.net.URLConnection: java.security.Permission getPermission()>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: void <init>(org.apache.shiro.web.subject.WebSubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: void <init>(org.apache.shiro.subject.SubjectContext)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><java.rmi.server.LogStream: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[],byte[],boolean)>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<org.apache.shiro.realm.AuthenticatingRealm: void cacheAuthenticationInfoIfPossible(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
<org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>-><org.elasticsearch.common.ParseField: java.lang.String[] getDeprecatedNames()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.lang.Short: int compareTo(java.lang.Object)>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.apache.shiro.spring.config.AbstractShiroBeanConfiguration: org.apache.shiro.spring.ShiroEventBusBeanPostProcessor shiroEventBusAwareBeanPostProcessor()>-><org.apache.shiro.spring.config.ShiroBeanConfiguration: org.apache.shiro.event.EventBus eventBus()>
<org.apache.shiro.session.ProxiedSession: java.lang.Object removeAttribute(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.Object removeAttribute(java.lang.Object)>
<com.google.gson.internal.LinkedTreeMap$Node: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><com.google.common.collect.Maps$KeySet: boolean isEmpty()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.codec.Base64: byte[] decode(java.lang.String)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.SubList$1: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authc.AuthenticationInfo doGetAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: void <init>(java.lang.Object,java.lang.Object,java.lang.String)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getCachedAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.rmi.runtime.Log$LoggerLog$2: java.lang.Object run()>
<org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<com.google.common.collect.ForwardingMap: boolean containsKey(java.lang.Object)>-><com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: java.util.Map delegate()>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergeAuthenticationState(org.apache.shiro.subject.Subject)>-><org.apache.shiro.session.ProxiedSession: void setAttribute(java.lang.Object,java.lang.Object)>
<org.apache.shiro.session.SessionException: void <init>(java.lang.String)>-><org.apache.shiro.ShiroException: void <init>(java.lang.String)>
<org.elasticsearch.client.RestClientBuilder$2: java.lang.Object run()>-><org.elasticsearch.client.RestClientBuilder$2: org.apache.http.impl.nio.client.CloseableHttpAsyncClient run()>
<java.rmi.server.LogStream: void write(int)>-><java.lang.Thread: java.lang.Thread currentThread()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<co.yiiu.pybbs.service.impl.AdminUserService: co.yiiu.pybbs.model.AdminUser selectByUsername(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.apache.shiro.web.session.HttpServletSession: void <init>(javax.servlet.http.HttpSession,java.lang.String)>-><org.apache.shiro.web.session.HttpServletSession: void setHost(java.lang.String)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doAuthenticate(org.apache.shiro.authc.AuthenticationToken)>
<com.fasterxml.jackson.databind.util.StdDateFormat: void _format(java.util.TimeZone,java.util.Locale,java.util.Date,java.lang.StringBuffer)>-><java.util.SimpleTimeZone: int getOffset(long)>
<org.apache.shiro.realm.AuthenticatingRealm: void cacheAuthenticationInfoIfPossible(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidationIfNecessary()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler getSessionValidationScheduler()>
<org.apache.shiro.mgt.AbstractRememberMeManager: void onSuccessfulLogin(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.io.ObjectStreamField: int compareTo(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.sql.Timestamp: int compareTo(java.lang.Object)>
<org.apache.commons.collections.FastHashMap$EntrySet: java.util.Collection get(java.util.Map)>-><java.util.HashMap: java.util.Set entrySet()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.util.logging.StreamHandler: void configure()>-><java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session doGetSession(org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.mgt.RealmSecurityManager: void applyEventBusToRealms()>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: java.lang.String getHost()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapBasedMultimap$KeySet: java.util.Iterator iterator()>-><com.google.common.collect.ForwardingMap: java.util.Set entrySet()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session doCreateSession(org.apache.shiro.session.mgt.SessionContext)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: int compareTo(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<java.util.TreeMap$Entry: int hashCode()>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.security.jca.ProviderList$ServiceList: java.security.Provider$Service tryGet(int)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<com.google.common.collect.Maps$Values: void clear()>-><com.google.common.collect.ForwardingMap: void clear()>
<java.util.logging.StreamHandler: void setEncoding(java.lang.String)>-><java.util.logging.StreamHandler: void flush()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSessionFromDataSource(java.io.Serializable)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(org.apache.shiro.subject.Subject)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletRequest getHttpRequest(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.apache.shiro.util.ClassUtils$3: java.lang.ClassLoader doGetClassLoader()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager resolveSecurityManager()>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Throwable)>
<sun.rmi.runtime.Log$LoggerLog$2: java.lang.Void run()>-><java.util.logging.Logger: void setLevel(java.util.logging.Level)>
<java.util.logging.Handler: void <init>()>-><java.lang.Object: void <init>()>
<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.realm.AuthenticatingRealm: boolean isAuthenticationCachingEnabled(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.realm.AuthenticatingRealm: boolean isAuthenticationCachingEnabled()>
<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.rmi.server.LogStream: void write(int)>-><java.lang.StringBuffer: void setLength(int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><java.rmi.server.LogStream: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void setInterval(long)>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void enableSessionValidation()>-><java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.flywaydb.core.internal.sqlscript.SqlScript: int compareTo(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Throwable)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher initNewCipher(int,byte[],byte[],boolean)>-><javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.AbstractCollection: boolean isEmpty()>
<org.apache.shiro.session.mgt.DelegatingSession: void <init>(org.apache.shiro.session.mgt.NativeSessionManager,org.apache.shiro.session.mgt.SessionKey)>-><java.lang.Class: java.lang.String getName()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.session.mgt.eis.AbstractSessionDAO: void verifySessionId(java.io.Serializable)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.apache.shiro.spring.config.ShiroBeanConfiguration: org.apache.shiro.event.EventBus eventBus()>-><org.apache.shiro.spring.config.AbstractShiroBeanConfiguration: org.apache.shiro.event.EventBus eventBus()>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>-><org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: java.lang.Object getCredentials(org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.Object getCredentials()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: void <init>(java.lang.Object,java.lang.String)>-><java.lang.Object: void <init>()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void create(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection,int)>-><java.lang.IllegalArgumentException: void <init>()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.session.Session resolveSession()>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.util.ArrayList: int size()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.lang.Character: int compareTo(java.lang.Object)>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarUrlStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int indexOf(java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getStopTimestamp()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.AbstractRememberMeManager: void onSuccessfulLogin(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.lang.reflect.Type,java.lang.Object)>-><org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.apache.shiro.subject.support.DisabledSessionException: void <init>(java.lang.String)>
<java.util.Collections$SetFromMap: boolean add(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.apache.shiro.web.mgt.DefaultWebSecurityManager: org.apache.shiro.session.mgt.SessionKey getSessionKey(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.ServletRequest getRequest(java.lang.Object)>
<javax.crypto.Cipher: javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.rmi.server.LogStream: void write(int)>-><java.io.OutputStreamWriter: void flush()>
<sun.rmi.runtime.Log$LoggerLog: boolean isLoggable(java.util.logging.Level)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>
<org.apache.shiro.session.ProxiedSession: void stop()>-><org.apache.shiro.session.mgt.SimpleSession: void stop()>
<sun.rmi.runtime.Log$LogStreamLog: java.lang.String unqualifiedName(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: boolean isEmpty()>
<java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>-><java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.session.mgt.eis.AbstractSessionDAO: org.apache.shiro.session.Session readSession(java.io.Serializable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.DecoratingClassLoader: boolean isExcluded(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: java.lang.String ensurePadding(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.concurrent.PriorityBlockingQueue: void tryGrow(java.lang.Object[],int)>-><sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authc.AuthenticationInfo doGetAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.realm.CachingRealm: java.lang.String getName()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.apache.shiro.util.MapContext: int size()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.apache.shiro.web.session.HttpServletSession: void <init>(javax.servlet.http.HttpSession,java.lang.String)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager resolveSecurityManager()>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.PrincipalCollection getRememberedIdentity(org.apache.shiro.subject.SubjectContext)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.lang.Enum: int compareTo(java.lang.Object)>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.web.mgt.DefaultWebSessionStorageEvaluator: boolean isSessionStorageEnabled(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSessionStorageEvaluator: boolean isSessionStorageEnabled()>
<com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: void remove()>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: void remove()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.lang.ProcessEnvironment$Variable: int compareTo(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[],byte[])>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.util.WebUtils: boolean isHttp(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.http.HttpHeaders: java.lang.String toString()>
<org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.SubList$1: java.lang.Object next()>
<java.util.concurrent.PriorityBlockingQueue: boolean remove(java.lang.Object)>-><java.util.concurrent.PriorityBlockingQueue: void removeAt(int)>
<org.apache.shiro.crypto.DefaultBlockCipherService: byte[] generateInitializationVector(boolean)>-><org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String getStreamingModeName()>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher newCipherInstance(boolean)>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<java.util.logging.LogManager: java.lang.String getStringProperty(java.lang.String,java.lang.String)>-><java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.Object getPrimaryPrincipal()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection getPrincipalsLazy(java.lang.String)>-><java.util.LinkedHashSet: void <init>()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: void <init>(org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler)>-><java.lang.Object: void <init>()>
<java.util.TreeMap$Entry: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.rmi.runtime.NewThreadAction$2: java.lang.Object run()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<co.yiiu.pybbs.config.realm.MyCredentialsMatcher: boolean doCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.Object getCredentials()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$3: java.lang.ClassLoader doGetClassLoader()>-><java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: void <init>()>
<sun.rmi.runtime.NewThreadAction$1: java.lang.ThreadGroup run()>-><java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.rmi.server.LogStream: void write(int)>-><java.io.PrintStream: void write(int)>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.InputStream)>-><java.io.FileInputStream: int read(byte[])>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.web.mgt.DefaultWebSecurityManager: org.apache.shiro.session.mgt.SessionKey getSessionKey(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.session.mgt.SessionKey getSessionKey(org.apache.shiro.subject.SubjectContext)>
<java.util.concurrent.ScheduledThreadPoolExecutor: long overflowFree(long)>-><java.util.concurrent.PriorityBlockingQueue: java.lang.Object peek()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.joda.time.LocalTime: int compareTo(java.lang.Object)>
<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)>-><java.util.Date: long parse(java.lang.String)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>-><javax.crypto.Cipher: void checkOpmode(int)>
<org.apache.shiro.codec.CodecSupport: java.lang.String toString(byte[],java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession()>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.spring.config.ShiroBeanConfiguration: org.apache.shiro.spring.LifecycleBeanPostProcessor lifecycleBeanPostProcessor()>-><org.apache.shiro.spring.config.AbstractShiroBeanConfiguration: org.apache.shiro.spring.LifecycleBeanPostProcessor lifecycleBeanPostProcessor()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.time.zone.ZoneOffsetTransition: int compareTo(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[],byte[],boolean)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>-><org.elasticsearch.common.ParseField: java.lang.String getPreferredName()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DisabledSessionException: void <init>(java.lang.String)>-><org.apache.shiro.session.SessionException: void <init>(java.lang.String)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection onRememberedPrincipalFailure(java.lang.RuntimeException,org.apache.shiro.subject.SubjectContext)>-><ch.qos.logback.classic.Logger: boolean isWarnEnabled()>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<co.yiiu.pybbs.PybbsApplication: void initBean_synthetic()>-><co.yiiu.pybbs.config.ShiroConfig: org.apache.shiro.web.filter.authc.FormAuthenticationFilter formAuthenticationFilter()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session doGetSession(org.apache.shiro.session.mgt.SessionKey)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[])>-><org.apache.shiro.crypto.DefaultBlockCipherService: boolean isGenerateInitializationVectors(boolean)>
<java.util.EnumMap: int entryHashCode(int)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.io.ObjectStreamField: int compareTo(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter: java.util.Iterator iterator()>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection convertBytesToPrincipals(byte[],org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection deserialize(byte[])>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.time.Year: int compareTo(java.lang.Object)>
<com.google.common.collect.AbstractMapBasedMultimap$KeySet: boolean equals(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void onStop(org.apache.shiro.session.Session)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.util.UUID: int compareTo(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<java.util.logging.StreamHandler: void flush()>-><java.io.OutputStreamWriter: void flush()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[],byte[],boolean)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.web.session.mgt.ServletContainerSessionManager: java.lang.String getHost(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.ServletRequest getRequest(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object)>
<org.apache.shiro.spring.config.AbstractShiroBeanConfiguration: org.apache.shiro.spring.ShiroEventBusBeanPostProcessor shiroEventBusAwareBeanPostProcessor()>-><org.apache.shiro.spring.ShiroEventBusBeanPostProcessor: void <init>(org.apache.shiro.event.EventBus)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator: java.io.Serializable generateId(org.apache.shiro.session.Session)>-><java.util.UUID: java.util.UUID randomUUID()>
<org.apache.shiro.codec.CodecException: void <init>(java.lang.String)>-><org.apache.shiro.ShiroException: void <init>(java.lang.String)>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: java.io.InputStream getInputStream()>-><org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: java.io.InputStream getInputStream()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Throwable)>
<co.yiiu.pybbs.util.bcrypt.BCryptPasswordEncoder: boolean matches(java.lang.CharSequence,java.lang.String)>-><java.lang.String: int length()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.apache.shiro.web.util.WebUtils: boolean isWeb(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletResponse getServletResponse()>
<co.yiiu.pybbs.config.realm.MyCredentialsMatcher: boolean doCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.lang.String: java.lang.String valueOf(char[])>
<org.apache.shiro.realm.CachingRealm: void clearCache(org.apache.shiro.subject.PrincipalCollection)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void beforeLogout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doAuthenticate(org.apache.shiro.authc.AuthenticationToken)>-><com.google.common.collect.Maps$Values: int size()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void onStop(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: void setLastAccessTime(java.util.Date)>
<java.util.concurrent.ThreadPoolExecutor: java.util.List drainQueue()>-><java.util.concurrent.PriorityBlockingQueue: boolean remove(java.lang.Object)>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.util.Date: void <init>(long)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidationIfNecessary()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: boolean isSessionValidationSchedulerEnabled()>
<org.apache.commons.collections.FastHashMap$CollectionView: java.lang.Object[] toArray()>-><org.apache.commons.collections.FastHashMap$EntrySet: java.util.Collection get(java.util.Map)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void create(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><java.rmi.server.LogStream: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.authc.AbstractAuthenticator: void onLogout(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.authc.AbstractAuthenticator: void notifyLogout(org.apache.shiro.subject.PrincipalCollection)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager resolveSecurityManager()>-><org.apache.shiro.SecurityUtils: org.apache.shiro.mgt.SecurityManager getSecurityManager()>
<org.apache.shiro.mgt.AbstractRememberMeManager: byte[] encrypt(byte[])>-><org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.crypto.CipherService getCipherService()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.util.Calendar: int compareTo(java.lang.Object)>
<co.yiiu.pybbs.service.impl.AdminUserService: co.yiiu.pybbs.model.AdminUser selectByUsername(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.query.QueryWrapper: com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper lambda()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.flywaydb.core.api.Location: int compareTo(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<sun.rmi.runtime.RuntimeUtil$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><com.alibaba.fastjson.JSONArray: boolean isEmpty()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.apache.shiro.util.ClassUtils: org.slf4j.Logger access$100()>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.Throwable getCause()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.web.session.HttpServletSession: java.lang.Object getAttribute(java.lang.Object)>-><org.apache.shiro.web.session.HttpServletSession: java.lang.String assertString(java.lang.Object)>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStart(org.apache.shiro.session.Session)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergePrincipals(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session newSessionInstance(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.mgt.SessionFactory getSessionFactory()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object castToJavaBean(java.util.Map,java.lang.Class,com.alibaba.fastjson.parser.ParserConfig)>-><org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.apache.shiro.authz.SimpleAuthorizationInfo: void addRole(java.lang.String)>-><java.util.HashSet: void <init>()>
<org.apache.shiro.session.ProxiedSession: java.io.Serializable getId()>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$FilterSegment: java.lang.Object eval(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: boolean pathMatches(java.lang.String,java.lang.String)>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext ensureSecurityManager(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager resolveSecurityManager()>
<org.apache.shiro.authc.AuthenticationException: void <init>(java.lang.String)>-><org.apache.shiro.ShiroException: void <init>(java.lang.String)>
<org.apache.shiro.io.DefaultSerializer: byte[] serialize(java.lang.Object)>-><java.io.ByteArrayOutputStream: void <init>()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildStreamingTransformationString()>-><org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String getStreamingModeName()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.util.Calendar: int compareTo(java.lang.Object)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<java.util.logging.LogManager: java.util.logging.Filter getFilterProperty(java.lang.String,java.util.logging.Filter)>-><java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergePrincipals(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>
<org.apache.shiro.mgt.SessionsSecurityManager: org.apache.shiro.session.Session getSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session getSession(org.apache.shiro.session.mgt.SessionKey)>
<java.util.Collections$EmptyList: boolean containsAll(java.util.Collection)>-><java.util.HashSet: boolean isEmpty()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection resolvePrincipals()>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.Subject getSubject()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.logging.StreamHandler: void <init>(java.io.OutputStream,java.util.logging.Formatter)>-><java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: void assertRealmsConfigured()>-><org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.time.OffsetTime: int compareTo(java.lang.Object)>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarUrlStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: java.lang.String substring(int,int)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<org.apache.shiro.session.mgt.DelegatingSession: java.lang.Object getAttribute(java.lang.Object)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.Object getAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object)>
<org.apache.shiro.mgt.AbstractRememberMeManager: byte[] decrypt(byte[])>-><org.apache.shiro.util.SimpleByteSource: byte[] getBytes()>
<org.apache.shiro.realm.AuthenticatingRealm: void assertCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.lang.Class: java.lang.String getName()>
<org.apache.shiro.subject.support.DefaultSubjectContext: boolean resolveAuthenticated()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.Object getAttribute(java.lang.Object)>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authz.AuthorizationInfo doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<org.apache.shiro.codec.CodecSupport: java.lang.String toString(byte[],java.lang.String)>-><org.apache.shiro.codec.CodecException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionContext: javax.servlet.ServletRequest getServletRequest()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session decorate(org.apache.shiro.session.Session)>-><org.apache.shiro.subject.support.DelegatingSubject$StoppingAwareProxiedSession: void <init>(org.apache.shiro.subject.support.DelegatingSubject,org.apache.shiro.session.Session,org.apache.shiro.subject.support.DelegatingSubject,org.apache.shiro.subject.support.DelegatingSubject$1)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>-><javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.web.subject.support.WebDelegatingSubject: void <init>(org.apache.shiro.subject.PrincipalCollection,boolean,java.lang.String,org.apache.shiro.session.Session,boolean,javax.servlet.ServletRequest,javax.servlet.ServletResponse,org.apache.shiro.mgt.SecurityManager)>-><org.apache.shiro.subject.support.DelegatingSubject: void <init>(org.apache.shiro.subject.PrincipalCollection,boolean,java.lang.String,org.apache.shiro.session.Session,boolean,org.apache.shiro.mgt.SecurityManager)>
<sun.security.jca.ProviderList$ServiceList: java.security.Provider$Service tryGet(int)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.shiro.web.session.HttpServletSession: void <init>(javax.servlet.http.HttpSession,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.rmi.runtime.Log: java.lang.String[] getSource()>-><java.lang.Exception: void <init>()>
<org.apache.commons.collections.FastHashMap$CollectionView: boolean isEmpty()>-><java.util.AbstractCollection: boolean isEmpty()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.lang.StringBuilder: void <init>()>
<ch.qos.logback.core.helpers.ThrowableToStringArray: java.lang.String formatFirstLine(java.lang.Throwable,java.lang.StackTraceElement[])>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<com.google.common.collect.Maps$Values: boolean contains(java.lang.Object)>-><com.google.common.collect.ForwardingMap: boolean containsValue(java.lang.Object)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<sun.rmi.runtime.RuntimeUtil$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void applyGlobalSessionTimeout(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: void setTimeout(long)>
<java.net.URLStreamHandler: boolean sameFile(java.net.URL,java.net.URL)>-><java.net.URLStreamHandler: int getDefaultPort()>
<org.apache.shiro.web.mgt.DefaultWebSecurityManager: void beforeLogout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.web.mgt.DefaultWebSecurityManager: void removeRequestIdentity(org.apache.shiro.subject.Subject)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[])>-><org.apache.shiro.crypto.CryptoException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionContext: void <init>()>-><org.apache.shiro.session.mgt.DefaultSessionContext: void <init>()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<org.apache.shiro.realm.AuthenticatingRealm: java.lang.Object getAuthenticationCacheKey(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.Object getPrincipal()>
<sun.rmi.runtime.Log$LogStreamLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<org.apache.shiro.subject.support.DefaultSubjectContext: void setAuthenticationInfo(org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.util.MapContext: void nullSafePut(java.lang.String,java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.apache.shiro.session.ProxiedSession: void <init>(org.apache.shiro.session.Session)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: void delete(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSubjectDAO: void delete(org.apache.shiro.subject.Subject)>
<co.yiiu.pybbs.config.service.SmsService: boolean sendSms(java.lang.String,java.lang.String)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletResponse resolveServletResponse()>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.Subject getSubject()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session decorate(org.apache.shiro.session.Session)>
<org.apache.shiro.codec.Base64: byte[] discardNonBase64(byte[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.io.ObjectInputStream: void close()>-><java.io.ObjectInputStream$BlockDataInputStream: void close()>
<org.apache.shiro.authc.pam.AbstractAuthenticationStrategy: org.apache.shiro.authc.AuthenticationInfo beforeAllAttempts(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: void <init>()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><org.springframework.util.CollectionUtils$MultiValueMapAdapter: java.util.Set entrySet()>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String toCookieDate(java.util.Date)>-><java.text.DateFormat: java.lang.String format(java.util.Date)>
<org.apache.shiro.realm.AuthenticatingRealm: void cacheAuthenticationInfoIfPossible(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authz.AuthorizationInfo doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><co.yiiu.pybbs.service.impl.PermissionService: java.util.List selectByRoleId(java.lang.Integer)>
<org.apache.shiro.authc.AbstractAuthenticator: void notifyFailure(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.shiro.subject.support.DefaultSubjectContext: void setAuthenticated(boolean)>-><org.apache.shiro.util.MapContext: java.lang.Object put(java.lang.String,java.lang.Object)>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.io.File)>-><org.apache.shiro.codec.CodecException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.realm.CachingRealm: void onLogout(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.CachingRealm: void clearCache(org.apache.shiro.subject.PrincipalCollection)>
<sun.rmi.runtime.Log$LogStreamLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><java.lang.Throwable: void printStackTrace(java.io.PrintStream)>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: java.io.InputStream getInputStream()>-><org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: void connect()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.lang.System: long currentTimeMillis()>
<javax.crypto.Cipher: javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<org.apache.shiro.mgt.AbstractRememberMeManager: void rememberIdentity(org.apache.shiro.subject.Subject,org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.mgt.AbstractRememberMeManager: byte[] convertPrincipalsToBytes(org.apache.shiro.subject.PrincipalCollection)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.elasticsearch.client.Node: int hashCode()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><sun.security.jca.ProviderList$ServiceList$1: java.lang.Object next()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.rmi.runtime.NewThreadAction$1: java.lang.Object run()>
<java.util.concurrent.PriorityBlockingQueue: boolean offer(java.lang.Object)>-><java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.web.util.WebUtils: boolean isWeb(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest getServletRequest()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session start(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session createExposedSession(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionContext)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.apache.shiro.web.mgt.DefaultWebSecurityManager: org.apache.shiro.subject.SubjectContext createSubjectContext()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[],byte[],boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<sun.rmi.runtime.Log$LoggerLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.crypto.JcaCipherService: byte[] crypt(javax.crypto.Cipher,byte[])>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.apache.shiro.crypto.JcaCipherService: byte[] crypt(byte[],byte[],byte[],int)>-><org.apache.shiro.crypto.JcaCipherService: byte[] crypt(javax.crypto.Cipher,byte[])>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: void <init>(java.lang.String)>-><org.apache.shiro.session.mgt.SimpleSession: void <init>()>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergeAuthenticationState(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.nio.ByteBuffer: int compareTo(java.lang.Object)>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean doCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.credential.SimpleCredentialsMatcher: java.lang.Object getCredentials(org.apache.shiro.authc.AuthenticationToken)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.Collections$1: boolean hasNext()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.math.BigDecimal: int compareTo(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<javax.crypto.Cipher: javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service,java.util.List)>-><java.lang.String: boolean endsWith(java.lang.String)>
<org.apache.shiro.mgt.DefaultSessionStorageEvaluator: boolean isSessionStorageEnabled(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedList: java.lang.Object get(int)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.PrincipalCollection getRememberedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.NOPLogger: boolean isWarnEnabled()>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.session.mgt.WebSessionKey: javax.servlet.ServletResponse getServletResponse()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.io.ObjectOutputStream$BlockDataOutputStream: void write(byte[],int,int,boolean)>-><java.io.BufferedOutputStream: void write(byte[],int,int)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.time.ZoneOffset: int compareTo(java.lang.Object)>
<org.apache.shiro.crypto.DefaultBlockCipherService: boolean isModeInitializationVectorCompatible(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.Object getAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.Object getAttribute(java.lang.Object)>
<org.apache.shiro.util.StringUtils: java.lang.String toString(java.lang.Object[])>-><org.apache.shiro.util.StringUtils: java.lang.String toDelimitedString(java.lang.Object[],java.lang.String)>
<javax.el.BeanELResolver$SoftConcurrentHashMap: javax.el.BeanELResolver$BeanProperties get(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String getHost()>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(java.lang.Object)>-><org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authc.AuthenticationInfo doGetAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.AuthenticatingRealm: void assertCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.util.Date: boolean before(java.util.Date)>
<com.google.common.collect.ForwardingMap: int size()>-><java.util.concurrent.ConcurrentHashMap: int size()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.session.mgt.SessionKey getSessionKey(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.session.mgt.DefaultSessionKey: void <init>(java.io.Serializable)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[],byte[],boolean)>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.mgt.SessionContext createSessionContext()>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[],byte[])>-><java.lang.StringBuilder: void <init>()>
<co.yiiu.pybbs.PybbsApplication: void initBean_synthetic()>-><org.apache.shiro.spring.config.ShiroBeanConfiguration: org.apache.shiro.spring.ShiroEventBusBeanPostProcessor shiroEventBusAwareBeanPostProcessor()>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doAuthenticate(org.apache.shiro.authc.AuthenticationToken)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.String getHost(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.HttpServletSession: java.lang.String getHost()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void afterExpired(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void delete(org.apache.shiro.session.Session)>
<org.apache.shiro.util.SimpleByteSource: void <init>(byte[])>-><java.lang.Object: void <init>()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void applyGlobalSessionTimeout(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.AbstractSessionManager: long getGlobalSessionTimeout()>
<org.apache.shiro.io.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>-><org.apache.shiro.ShiroException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.PriorityBlockingQueue: boolean offer(java.lang.Object)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void signal()>
<org.apache.shiro.session.ProxiedSession: java.lang.Object removeAttribute(java.lang.Object)>-><org.apache.shiro.session.ProxiedSession: java.lang.Object removeAttribute(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.mgt.SessionsSecurityManager: org.apache.shiro.session.Session getSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session getSession(org.apache.shiro.session.mgt.SessionKey)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolvePrincipals(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.DefaultSecurityManager: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>
<org.apache.shiro.web.servlet.SimpleCookie: void <init>(org.apache.shiro.web.servlet.Cookie)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getValue()>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.apache.shiro.realm.AuthorizingRealm: void clearCachedAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.AuthorizingRealm: org.apache.shiro.cache.Cache getAvailableAuthorizationCache()>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection onRememberedPrincipalFailure(java.lang.RuntimeException,org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>-><org.apache.shiro.web.servlet.SimpleCookie: void setValue(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher newCipherInstance(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><freemarker.ext.beans.OverloadedNumberUtil$NumberWithFallbackType: int compareTo(java.lang.Object)>
<java.rmi.server.LogStream: void write(int)>-><java.util.Date: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.JumboEnumSet: boolean isEmpty()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendHttpOnly(java.lang.StringBuilder,boolean)>
<org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>-><java.util.ConcurrentModificationException: void <init>()>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><java.rmi.server.LogStream: java.lang.String toString()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: boolean isWarnEnabled()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendVersion(java.lang.StringBuilder,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Collections$1: java.lang.Object next()>
<org.apache.shiro.util.ClassUtils$2: java.lang.ClassLoader doGetClassLoader()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.web.util.SavedRequest: java.lang.String getRequestUrl()>-><org.apache.shiro.web.util.SavedRequest: java.lang.String getQueryString()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void onStop(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void onStop(org.apache.shiro.session.Session)>
<org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy: org.apache.shiro.authc.AuthenticationInfo afterAllAttempts(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.AuthenticationException: void <init>(java.lang.String)>
<org.apache.shiro.mgt.DefaultSubjectDAO: void saveToSession(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSubjectDAO: void mergeAuthenticationState(org.apache.shiro.subject.Subject)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><java.rmi.server.LogStream: java.lang.String toString()>
<org.apache.shiro.subject.support.DelegatingSubject: void <init>(org.apache.shiro.subject.PrincipalCollection,boolean,java.lang.String,org.apache.shiro.session.Session,boolean,org.apache.shiro.mgt.SecurityManager)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.shiro.crypto.JcaCipherService: byte[] generateInitializationVector(boolean)>-><java.lang.Class: java.lang.String getSimpleName()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Map)>-><java.util.HashMap: boolean isEmpty()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolvePrincipals(org.apache.shiro.subject.SubjectContext)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<org.apache.shiro.session.mgt.DefaultSessionKey: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.shiro.util.MapContext: boolean isEmpty()>-><java.util.HashMap: boolean isEmpty()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.TreeSet: boolean addAll(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.slf4j.event.EventRecodingLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>-><org.slf4j.event.EventRecodingLogger: void recordEvent2Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void removeAt(int)>-><java.util.concurrent.PriorityBlockingQueue: void siftDownUsingComparator(int,java.lang.Object,java.lang.Object[],int,java.util.Comparator)>
<sun.rmi.runtime.Log$LogStreamLog: java.lang.String unqualifiedName(java.lang.String)>-><java.lang.String: int lastIndexOf(java.lang.String)>
<org.apache.shiro.subject.support.DelegatingSubject: java.lang.Object getPrincipal()>-><org.apache.shiro.subject.support.DelegatingSubject: java.lang.Object getPrimaryPrincipal(org.apache.shiro.subject.PrincipalCollection)>
<sun.rmi.runtime.Log: java.lang.String[] access$200()>-><sun.rmi.runtime.Log: java.lang.String[] getSource()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.credential.SimpleCredentialsMatcher: boolean equals(java.lang.Object,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest resolveServletRequest()>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.Subject getSubject()>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authz.AuthorizationInfo doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.authz.SimpleAuthorizationInfo: void addRole(java.lang.String)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<sun.rmi.runtime.Log$LoggerLog$2: java.lang.Object run()>-><sun.rmi.runtime.Log$LoggerLog$2: java.lang.Void run()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeLogout(org.apache.shiro.subject.Subject)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<org.apache.shiro.session.mgt.DefaultSessionManager: void create(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.eis.AbstractSessionDAO: java.io.Serializable create(org.apache.shiro.session.Session)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.time.Duration: java.lang.String toString()>
<com.google.common.collect.ForwardingMap: boolean containsKey(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<sun.rmi.runtime.RuntimeUtil$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.time.LocalTime: int compareTo(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.flywaydb.core.internal.resource.filesystem.FileSystemResource: int compareTo(java.lang.Object)>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.apache.shiro.session.mgt.eis.AbstractSessionDAO: void assignSessionId(org.apache.shiro.session.Session,java.io.Serializable)>-><org.apache.shiro.session.mgt.SimpleSession: void setId(java.io.Serializable)>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><org.apache.shiro.session.mgt.SimpleSession: long getTimeout()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher initNewCipher(int,byte[],byte[],boolean)>-><org.apache.shiro.crypto.JcaCipherService: java.lang.String getAlgorithmName()>
<org.apache.http.impl.nio.client.CloseableHttpAsyncClientBase: void <init>(org.apache.http.nio.conn.NHttpClientConnectionManager,java.util.concurrent.ThreadFactory,org.apache.http.nio.NHttpClientEventHandler)>-><sun.rmi.runtime.RuntimeUtil$1: java.lang.Thread newThread(java.lang.Runnable)>
<sun.rmi.runtime.Log$InternalStreamHandler: void <init>(java.io.OutputStream)>-><java.util.logging.SimpleFormatter: void <init>()>
<org.apache.shiro.crypto.JcaCipherService: byte[] crypt(byte[],byte[],byte[],int)>-><org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher initNewCipher(int,byte[],byte[],boolean)>
<org.apache.shiro.realm.AuthenticatingRealm: void assertCredentialsMatch(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.IncorrectCredentialsException: void <init>(java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.lang.Double: int compareTo(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: void removeAt(int)>-><java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.shiro.authc.AbstractAuthenticator: void notifyLogout(org.apache.shiro.subject.PrincipalCollection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.io.ObjectInputStream: void close()>-><java.io.ObjectInputStream: void clear()>
<co.yiiu.pybbs.exception.GlobalExceptionHandler: co.yiiu.pybbs.util.Result jsonErrorHandler(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.shiro.authz.AuthorizationException)>-><org.springframework.web.filter.RelativeRedirectResponseWrapper: void sendRedirect(java.lang.String)>
<java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection,int)>-><java.util.concurrent.PriorityBlockingQueue: java.lang.Object dequeue()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session doCreateSession(org.apache.shiro.session.mgt.SessionContext)>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>-><org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.google.common.collect.ForwardingMap: java.util.Set keySet()>-><com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: java.util.Map delegate()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider: java.lang.reflect.Type getType()>-><org.springframework.util.ReflectionUtils: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session createExposedSession(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void create(org.apache.shiro.session.Session)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><java.lang.Class: java.lang.String getName()>
<org.apache.shiro.mgt.RealmSecurityManager: void setRealms(java.util.Collection)>-><com.google.common.collect.Maps$Values: boolean isEmpty()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.TreeMap$KeySet: boolean isEmpty()>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<org.apache.shiro.subject.support.DelegatingSubject: void clearRunAsIdentitiesInternal()>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.lang.Enum: int compareTo(java.lang.Object)>
<java.util.Collections$EmptyList: boolean containsAll(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.session.ProxiedSession: java.lang.Object getAttribute(java.lang.Object)>-><org.apache.shiro.session.ProxiedSession: java.lang.Object getAttribute(java.lang.Object)>
<com.google.common.collect.ForwardingMap: int size()>-><com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: java.util.Map delegate()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection resolvePrincipals()>-><org.apache.shiro.session.mgt.DelegatingSession: java.lang.Object getAttribute(java.lang.Object)>
<org.apache.shiro.web.mgt.CookieRememberMeManager: byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject login(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: boolean isInfoEnabled()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.mgt.AbstractRememberMeManager: byte[] convertPrincipalsToBytes(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.mgt.AbstractRememberMeManager: byte[] serialize(org.apache.shiro.subject.PrincipalCollection)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(org.apache.shiro.subject.Subject)>-><org.apache.shiro.web.util.WebUtils: boolean isHttp(java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: int compareTo(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler getSessionValidationScheduler()>
<org.apache.shiro.codec.CodecSupport: java.lang.String toString(byte[],java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.subject.support.DefaultSubjectContext: boolean resolveAuthenticated()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<org.apache.shiro.mgt.DefaultSubjectDAO: boolean isSessionStorageEnabled(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSessionStorageEvaluator: boolean isSessionStorageEnabled(org.apache.shiro.subject.Subject)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.web.servlet.SimpleCookie: void <init>(org.apache.shiro.web.servlet.Cookie)>-><java.lang.Math: int max(int,int)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>-><java.util.Collections$EmptySet: java.lang.Object[] toArray()>
<com.google.common.collect.Maps$Values: int size()>-><com.google.common.collect.ForwardingMap: int size()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.Object)>-><org.apache.shiro.codec.CodecSupport: byte[] objectToBytes(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: java.lang.Object dequeue()>-><java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.authc.pam.AbstractAuthenticationStrategy: org.apache.shiro.authc.AuthenticationInfo merge(org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.authc.AuthenticationInfo)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>-><org.apache.commons.collections.FastHashMap$EntrySet: java.lang.Object iteratorNext(java.util.Map$Entry)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.elasticsearch.client.RestClientBuilder: org.apache.http.impl.nio.client.CloseableHttpAsyncClient createHttpClient()>-><org.apache.http.client.config.RequestConfig$Builder: org.apache.http.client.config.RequestConfig$Builder setConnectTimeout(int)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: void onLogout(org.apache.shiro.subject.PrincipalCollection)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager resolveSecurityManager()>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergePrincipals(org.apache.shiro.subject.Subject)>-><org.apache.shiro.session.ProxiedSession: java.lang.Object getAttribute(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authc.AuthenticationInfo doGetAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><co.yiiu.pybbs.service.impl.AdminUserService: co.yiiu.pybbs.model.AdminUser selectByUsername(java.lang.String)>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void setAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.Object removeAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void setAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void onChange(org.apache.shiro.session.Session)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>-><java.util.UUID: int compareTo(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.flywaydb.core.internal.resource.classpath.ClassPathResource: int compareTo(java.lang.Object)>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void <init>(java.lang.Object,java.lang.Object,java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: void <init>(java.lang.Object,java.lang.String)>
<com.google.common.collect.AbstractMapBasedMultimap$KeySet: java.util.Iterator iterator()>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.Object)>-><org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext copy(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.subject.support.DefaultSubjectContext: void <init>(org.apache.shiro.subject.SubjectContext)>
<org.apache.shiro.session.ExpiredSessionException: void <init>(java.lang.String)>-><org.apache.shiro.session.StoppedSessionException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.session.ProxiedSession: void stop()>-><org.apache.shiro.session.mgt.DelegatingSession: void stop()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.time.Duration: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String getHost()>
<org.springframework.core.DecoratingClassLoader: boolean isExcluded(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries: java.util.Iterator iterator()>
<org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.session.mgt.DelegatingSession: java.lang.Object removeAttribute(java.lang.Object)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: java.lang.Object removeAttribute(org.apache.shiro.session.mgt.SessionKey,java.lang.Object)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void forgetIdentity(org.apache.shiro.subject.Subject)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletResponse getHttpResponse(java.lang.Object)>
<org.apache.shiro.spring.config.AbstractShiroBeanConfiguration: org.apache.shiro.spring.LifecycleBeanPostProcessor lifecycleBeanPostProcessor()>-><org.apache.shiro.spring.LifecycleBeanPostProcessor: void <init>()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getLastAccessTime()>
<org.apache.shiro.web.session.mgt.WebSessionKey: void <init>(java.io.Serializable,javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.apache.shiro.session.mgt.DefaultSessionKey: void setSessionId(java.io.Serializable)>
<org.apache.shiro.session.mgt.DelegatingSession: void <init>(org.apache.shiro.session.mgt.NativeSessionManager,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionKey: java.io.Serializable getSessionId()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><java.security.Provider$Service: java.security.Provider getProvider()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: void connect()>-><org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: void connect()>
<org.apache.shiro.subject.support.DefaultSubjectContext: java.lang.String resolveHost()>-><org.apache.shiro.session.mgt.DelegatingSession: java.lang.String getHost()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.text.DateFormat: java.text.DateFormat getInstance()>
<org.apache.shiro.crypto.JcaCipherService: javax.crypto.Cipher newCipherInstance(boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.codec.CodecException: void <init>(java.lang.String,java.lang.Throwable)>-><org.apache.shiro.ShiroException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.TreeMap$Entry: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.String)>-><org.apache.shiro.codec.CodecSupport: byte[] toBytes(java.lang.String,java.lang.String)>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: java.io.Serializable doCreate(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.eis.AbstractSessionDAO: java.io.Serializable generateSessionId(org.apache.shiro.session.Session)>
<org.apache.shiro.session.mgt.eis.AbstractSessionDAO: org.apache.shiro.session.Session readSession(java.io.Serializable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.elasticsearch.client.Node: int hashCode()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void afterExpired(org.apache.shiro.session.Session)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.SubjectContext resolvePrincipals(org.apache.shiro.subject.SubjectContext)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.PrincipalCollection getRememberedIdentity(org.apache.shiro.subject.SubjectContext)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void <init>()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSubjectDAO: void mergePrincipals(org.apache.shiro.subject.Subject)>-><org.apache.shiro.session.ProxiedSession: java.lang.Object removeAttribute(java.lang.Object)>
<org.apache.shiro.web.session.mgt.ServletContainerSessionManager: org.apache.shiro.session.Session createSession(org.apache.shiro.session.mgt.SessionContext)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletRequest getHttpRequest(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<java.util.logging.StreamHandler: void flushAndClose()>-><java.io.Writer: void write(java.lang.String)>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<javax.crypto.Cipher: void chooseFirstProvider()>-><javax.crypto.Cipher$Transform: void setModePadding(javax.crypto.CipherSpi)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><sun.security.jca.ProviderList$ServiceList: java.util.Iterator iterator()>
<org.apache.shiro.web.mgt.CookieRememberMeManager: void rememberSerializedIdentity(org.apache.shiro.subject.Subject,byte[])>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.elasticsearch.client.Node: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>-><java.lang.StringBuilder: void <init>()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: java.lang.String resolveHost()>-><org.apache.shiro.subject.support.DefaultSubjectContext: java.lang.String resolveHost()>
<java.util.AbstractList: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStop(org.apache.shiro.session.Session)>
<org.apache.shiro.realm.AuthenticatingRealm: void doClearCache(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.CachingRealm: void doClearCache(org.apache.shiro.subject.PrincipalCollection)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.elasticsearch.common.ParseField: java.lang.String toString()>
<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>-><java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.client.Node: java.lang.String toString()>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><org.springframework.core.NestedExceptionUtils: java.lang.String buildMessage(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.mgt.AbstractRememberMeManager: byte[] decrypt(byte[])>-><org.apache.shiro.mgt.AbstractRememberMeManager: byte[] getDecryptionCipherKey()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.HttpServletSession: void stop()>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<org.apache.shiro.realm.AuthenticatingRealm: org.apache.shiro.authc.AuthenticationInfo getCachedAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: void onLogout(org.apache.shiro.subject.PrincipalCollection)>-><com.google.common.collect.Maps$Values: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void delete(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: int compareTo(java.lang.Object)>
<org.elasticsearch.common.xcontent.XContentParseException: java.lang.String getMessage()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<java.util.AbstractList: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.mgt.AbstractRememberMeManager: void onSuccessfulLogin(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<javax.crypto.Cipher: void chooseFirstProvider()>-><sun.security.jca.ProviderList$ServiceList$1: java.lang.Object next()>
<org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager resolveSecurityManager()>-><org.apache.shiro.subject.support.DefaultSubjectContext: org.apache.shiro.mgt.SecurityManager getSecurityManager()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.mgt.RememberMeManager getRememberMeManager()>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.TreeSet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: void login(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>
<org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy: org.apache.shiro.authc.AuthenticationInfo afterAllAttempts(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.filter.RelativeRedirectResponseWrapper: void sendRedirect(java.lang.String)>-><javax.servlet.http.HttpServletResponseWrapper: void setHeader(java.lang.String,java.lang.String)>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.PrincipalCollection getRememberedIdentity(org.apache.shiro.subject.SubjectContext)>-><ch.qos.logback.classic.Logger: boolean isWarnEnabled()>
<org.apache.shiro.session.mgt.DefaultSessionContext: void setHost(java.lang.String)>-><org.apache.shiro.util.MapContext: java.lang.Object put(java.lang.String,java.lang.Object)>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.shiro.io.DefaultSerializer: byte[] serialize(java.lang.Object)>-><java.io.ObjectOutputStream: void close()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject login(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String buildTransformationString()>-><org.apache.shiro.crypto.DefaultBlockCipherService: java.lang.String getPaddingSchemeName()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void afterStopped(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DefaultSessionManager: boolean isDeleteInvalidSessions()>
<org.apache.shiro.subject.support.DelegatingSubject: void login(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection onRememberedPrincipalFailure(java.lang.RuntimeException,org.apache.shiro.subject.SubjectContext)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String)>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><com.google.common.collect.Maps$Values: boolean isEmpty()>
<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>-><java.lang.Object: void <init>()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.web.session.HttpServletSession: void setHost(java.lang.String)>-><org.apache.shiro.web.session.HttpServletSession: void setAttribute(java.lang.Object,java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.rmi.server.LogStream: java.lang.String toString()>
<sun.rmi.runtime.NewThreadAction$2: java.lang.Object run()>-><sun.rmi.runtime.NewThreadAction$2: java.lang.ThreadGroup run()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: java.lang.Object get(int)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.lang.Character: int compareTo(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getLastAccessTime()>
<co.yiiu.pybbs.config.service.SmsService: boolean sendSms(java.lang.String,java.lang.String)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void logout(org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<com.google.common.collect.ForwardingMap: java.util.Set entrySet()>-><com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: java.util.Map delegate()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><javax.el.BeanELResolver$SoftConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: int compareTo(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: int compareTo(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><java.nio.ByteBuffer: int compareTo(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[],byte[])>-><org.apache.shiro.crypto.JcaCipherService: byte[] crypt(byte[],byte[],byte[],int)>
<org.apache.shiro.mgt.AbstractRememberMeManager: org.apache.shiro.subject.PrincipalCollection deserialize(byte[])>-><org.apache.shiro.io.DefaultSerializer: java.lang.Object deserialize(byte[])>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doAuthenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.pam.ModularRealmAuthenticator: java.util.Collection getRealms()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><java.lang.Class: java.lang.String getName()>
<co.yiiu.pybbs.config.realm.MyShiroRealm: org.apache.shiro.authz.AuthorizationInfo doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<org.apache.shiro.web.util.WebUtils: javax.servlet.ServletRequest getRequest(java.lang.Object)>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: javax.servlet.ServletRequest getServletRequest()>
<org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy: org.apache.shiro.authc.AuthenticationInfo afterAllAttempts(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>
<org.apache.shiro.codec.CodecSupport: java.lang.String toString(byte[],java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[],byte[])>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.apache.shiro.web.servlet.SimpleCookie: void saveTo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getName()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.io.DefaultSerializer: java.lang.Object deserialize(byte[])>-><java.io.ObjectInputStream: java.lang.Object readObject()>
<sun.misc.URLClassPath: void check(java.net.URL)>-><java.security.AllPermission: java.lang.String getActions()>
<org.apache.shiro.subject.support.DefaultSubjectContext: java.lang.String resolveHost()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String getHost()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.text.DateFormat: java.text.DateFormat getInstance()>-><java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int)>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletResponse getServletResponse()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.HashSet: boolean isEmpty()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><java.util.ArrayList: java.lang.Object get(int)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void create(org.apache.shiro.session.Session)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>-><org.elasticsearch.common.ParseField: java.lang.String getAllReplacedWith()>
<java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>-><org.apache.logging.log4j.Level: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.crypto.JcaCipherService: byte[] generateInitializationVector(boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Object[])>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.elasticsearch.common.xcontent.ObjectParser$FieldParser: java.lang.String toString()>
<java.util.concurrent.PriorityBlockingQueue: void tryGrow(java.lang.Object[],int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><java.rmi.server.LogStream: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getStartTimestamp()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void merge(org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.subject.SimplePrincipalCollection: void <init>(org.apache.shiro.subject.PrincipalCollection)>
<java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.shiro.authc.AbstractAuthenticator: org.apache.shiro.authc.AuthenticationInfo authenticate(org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.authc.AuthenticationException: void <init>(java.lang.String)>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: java.io.Serializable doCreate(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.eis.AbstractSessionDAO: void assignSessionId(org.apache.shiro.session.Session,java.io.Serializable)>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyExpiration(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session beforeInvalidNotification(org.apache.shiro.session.Session)>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.apache.shiro.subject.support.DelegatingSubject: void clearRunAsIdentities()>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doSingleRealmAuthentication(org.apache.shiro.realm.Realm,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.realm.AuthenticatingRealm: boolean supports(org.apache.shiro.authc.AuthenticationToken)>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session getSession(boolean)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<com.google.common.collect.Maps$Values: java.util.Iterator iterator()>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<com.google.gson.internal.LinkedTreeMap$Node: int hashCode()>-><org.elasticsearch.client.Node: int hashCode()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection,int)>-><java.lang.Math: int min(int,int)>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.web.embedded.jetty.JasperInitializer$WarURLConnection: void <init>(java.net.URL)>-><java.net.URL: java.net.URLConnection openConnection()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.elasticsearch.client.Node: int hashCode()>
<org.apache.shiro.util.MapContext: void <init>(java.util.Map)>-><org.apache.shiro.util.MapContext: void <init>()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupSession(org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.subject.support.DefaultSubjectContext: java.lang.String resolveHost()>-><org.apache.shiro.subject.support.DefaultSubjectContext: java.lang.String getHost()>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void update(org.apache.shiro.session.Session)>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeFailedLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationException,org.apache.shiro.subject.Subject)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.rmi.runtime.RuntimeUtil$1: java.lang.Thread newThread(java.lang.Runnable)>-><sun.rmi.runtime.Log$LogStreamLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.JumboEnumSet: boolean add(java.lang.Object)>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void merge(org.apache.shiro.authc.AuthenticationInfo)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: org.apache.shiro.util.ByteSource getCredentialsSalt()>
<org.apache.shiro.codec.Base64: java.lang.String encodeToString(byte[])>-><org.apache.shiro.codec.Base64: byte[] encode(byte[])>
<org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: void <init>(org.apache.commons.collections.FastHashMap$CollectionView)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection getPrincipalsLazy(java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String toString()>-><org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>-><java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.elasticsearch.client.Node: int hashCode()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>-><javax.crypto.JceSecurity: boolean canUseProvider(java.security.Provider)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.subject.PrincipalCollection getPrincipals()>-><java.util.LinkedList: java.lang.Object get(int)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.elasticsearch.client.Node: boolean equals(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject login(org.apache.shiro.subject.Subject,org.apache.shiro.authc.AuthenticationToken)>-><org.apache.shiro.mgt.DefaultSecurityManager: org.apache.shiro.subject.Subject createSubject(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void stop(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.Object removeAttribute(java.lang.Object)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<org.apache.shiro.mgt.DefaultSecurityManager: void rememberMeSuccessfulLogin(org.apache.shiro.authc.AuthenticationToken,org.apache.shiro.authc.AuthenticationInfo,org.apache.shiro.subject.Subject)>-><org.slf4j.helpers.NOPLogger: boolean isWarnEnabled()>
<com.google.common.collect.Maps$Values: void forEach(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>
<java.text.AttributeEntry: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.apache.shiro.mgt.AbstractRememberMeManager: byte[] decrypt(byte[])>-><org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource decrypt(byte[],byte[])>
<org.apache.shiro.session.mgt.DelegatingSession: void <init>(org.apache.shiro.session.mgt.NativeSessionManager,org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.authc.UnknownAccountException: void <init>(java.lang.String)>-><org.apache.shiro.authc.AccountException: void <init>(java.lang.String)>
<org.apache.shiro.mgt.DefaultSubjectDAO: org.apache.shiro.subject.Subject save(org.apache.shiro.subject.Subject)>-><org.apache.shiro.mgt.DefaultSubjectDAO: boolean isSessionStorageEnabled(org.apache.shiro.subject.Subject)>
<org.apache.shiro.crypto.JcaCipherService: org.apache.shiro.util.ByteSource encrypt(byte[],byte[],byte[],boolean)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<org.apache.shiro.util.MapContext: void <init>(java.util.Map)>-><java.util.HashMap: void putAll(java.util.Map)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.LinkedHashSet: void <init>()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.apache.shiro.session.SessionException: void <init>(java.lang.Throwable)>-><org.apache.shiro.ShiroException: void <init>(java.lang.Throwable)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.io.ObjectInputStream$PeekInputStream: int peek()>-><java.io.BufferedInputStream: int read()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doMultiRealmAuthentication(java.util.Collection,org.apache.shiro.authc.AuthenticationToken)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.subject.support.DefaultSubjectContext: boolean isSessionCreationEnabled()>-><java.lang.Boolean: boolean booleanValue()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void applyGlobalSessionTimeout(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void onChange(org.apache.shiro.session.Session)>
<java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)>-><java.util.logging.Handler: java.lang.String getEncoding()>
<org.apache.shiro.authc.AccountException: void <init>()>-><org.apache.shiro.authc.AuthenticationException: void <init>()>
<java.util.concurrent.PriorityBlockingQueue: void tryGrow(java.lang.Object[],int)>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<org.apache.shiro.authc.pam.ModularRealmAuthenticator: org.apache.shiro.authc.AuthenticationInfo doSingleRealmAuthentication(org.apache.shiro.realm.Realm,org.apache.shiro.authc.AuthenticationToken)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
