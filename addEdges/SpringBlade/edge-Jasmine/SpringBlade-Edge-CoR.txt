<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_d7dc407e26c49bb18bc56829a4073d40(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.UserController getUserController()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_70135dcd8fcacf909777bcdd64bb9d39(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController: org.springblade.core.tool.api.R list(java.util.Map)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_5823f344f37f2c6ea216346268597ad5(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.system.controller.MenuController: void <init>(org.springblade.modules.system.service.IMenuService)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee4805baba94496b354cb21f412728e8(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.service.impl.DatasourceServiceImpl getIDatasourceService()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_1758f9692d48c42a85219b8d4936550e(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R resetPassword(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R notices()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_8d23f1bdcd9d81948a57d8e71d794211(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><synthetic.method.HttpSessionImpl: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: void <init>()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_70135dcd8fcacf909777bcdd64bb9d39(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>-><org.springblade.modules.system.entity.AuthClient: void setResourceIds(java.lang.String)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_1758f9692d48c42a85219b8d4936550e(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_5823f344f37f2c6ea216346268597ad5(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogUsualController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.develop.controller.CodeController: void <init>(org.springblade.modules.develop.service.ICodeService,org.springblade.modules.develop.service.IDatasourceService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_5823f344f37f2c6ea216346268597ad5(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_f6c04f2dad6941108d186743bbc78060(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_8d23f1bdcd9d81948a57d8e71d794211(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: void <init>()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_d7dc407e26c49bb18bc56829a4073d40(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_1758f9692d48c42a85219b8d4936550e(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_8889b74d8ea942c6b55dc8e83986418c(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.system.controller.AuthClientController: void <init>(org.springblade.modules.system.service.IAuthClientService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_d7dc407e26c49bb18bc56829a4073d40(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>-><org.springblade.modules.develop.entity.Code: void setTableName(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogApiController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController: org.springblade.core.tool.api.R select()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_8d23f1bdcd9d81948a57d8e71d794211(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.core.tool.support.xss.XssFilter: boolean isSkip(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee4805baba94496b354cb21f412728e8(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7916b401693f2a647eada73543af0696(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_6ad3c21987a81ad3df9db3dd0bd50e97(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee42ba900e3fd8bba11f946fb35133bf(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_94cf6580ad22bca5b6e1f1c04c61dd20(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><io.undertow.servlet.handlers.FilterHandler$FilterChainImpl: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.tool.support.xss.XssFilter: org.springblade.core.secure.BladeUser getBladeUserInstance()>-><org.springblade.core.secure.BladeUser: void setUserId(java.lang.Long)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_8889b74d8ea942c6b55dc8e83986418c(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_c2366fd5c2eb2cf0eb2eb79cbe000ca6(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_b15ea0d1b317742ce0e58e8ce10f50dc(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><synthetic.method.HttpSessionImpl: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>-><org.springblade.modules.system.entity.AuthClient: void <init>()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.LogUsualController: void <init>(org.springblade.modules.system.service.ILogUsualService)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_c2366fd5c2eb2cf0eb2eb79cbe000ca6(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><io.undertow.servlet.handlers.FilterHandler$FilterChainImpl: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogErrorController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogErrorController: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7916b401693f2a647eada73543af0696(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>-><org.springblade.modules.system.entity.AuthClient: void setWebServerRedirectUri(java.lang.String)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: org.springblade.core.tool.api.R remove(java.lang.String)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: java.lang.String getString()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.core.mp.support.Query getQueryInstance()>-><org.springblade.core.mp.support.Query: org.springblade.core.mp.support.Query setCurrent(java.lang.Integer)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>-><org.springblade.modules.develop.entity.Code: void setPackageName(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.LogErrorController getLogErrorController()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogUsualController: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7916b401693f2a647eada73543af0696(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.system.controller.MenuController: void <init>(org.springblade.modules.system.service.IMenuService)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: void <init>()>-><org.springblade.modules.develop.controller.DatasourceController: void <init>(org.springblade.modules.develop.service.IDatasourceService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee4805baba94496b354cb21f412728e8(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.system.controller.AuthClientController: void <init>(org.springblade.modules.system.service.IAuthClientService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>-><org.springblade.modules.develop.entity.Code: void setPkName(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_1758f9692d48c42a85219b8d4936550e(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.auth.controller.AuthController getAuthController()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_6ad3c21987a81ad3df9db3dd0bd50e97(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_d7dc407e26c49bb18bc56829a4073d40(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>-><org.springblade.modules.system.entity.AuthClient: void setRefreshTokenValidity(java.lang.Integer)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_b15ea0d1b317742ce0e58e8ce10f50dc(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getServletPath()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_6ad3c21987a81ad3df9db3dd0bd50e97(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.service.impl.DatasourceServiceImpl getIDatasourceService()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.controller.CodeController getCodeController()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: void <init>()>-><org.springblade.modules.resource.OssEndpoint: void <init>(org.springblade.core.oss.QiniuTemplate)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_62c6f65ac85677b0b122df30bb98c369(org.aspectj.lang.ProceedingJoinPoint,org.springblade.modules.system.entity.Menu,org.springblade.modules.system.controller.MenuController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_f6c04f2dad6941108d186743bbc78060(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_b15ea0d1b317742ce0e58e8ce10f50dc(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><io.undertow.servlet.handlers.FilterHandler$FilterChainImpl: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_5823f344f37f2c6ea216346268597ad5(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee42ba900e3fd8bba11f946fb35133bf(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.LogApiController getLogApiController()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.PostController getPostController()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_94cf6580ad22bca5b6e1f1c04c61dd20(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.core.tool.support.xss.XssHttpServletRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.develop.controller.CodeController: void <init>(org.springblade.modules.develop.service.ICodeService,org.springblade.modules.develop.service.IDatasourceService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.core.tool.support.xss.XssFilter: org.springblade.core.secure.BladeUser getBladeUserInstance()>-><org.springblade.core.secure.BladeUser: void setRoleName(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_70135dcd8fcacf909777bcdd64bb9d39(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: org.springblade.core.tool.api.R remove(java.lang.String)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_1758f9692d48c42a85219b8d4936550e(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.system.controller.AuthClientController: void <init>(org.springblade.modules.system.service.IAuthClientService)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser)>
<org.springframework.boot.actuate.autoconfigure.web.servlet.ManagementErrorEndpoint$$InterceptorProxy: java.util.Map invoke(org.springframework.web.context.request.ServletWebRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController: org.springblade.core.tool.api.R dictionary(java.lang.String)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7916b401693f2a647eada73543af0696(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: void <init>()>-><org.springblade.modules.auth.controller.AuthController: void <init>(org.springblade.core.tool.utils.RedisUtil)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee4805baba94496b354cb21f412728e8(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_d7dc407e26c49bb18bc56829a4073d40(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.system.service.impl.AuthClientServiceImpl getIAuthClientService()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_70135dcd8fcacf909777bcdd64bb9d39(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.resource.OssEndpoint getOssEndpoint()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_3757be1b5e15ed01e6ddbed30f00dd3e(org.aspectj.lang.ProceedingJoinPoint,java.lang.Long,org.springblade.modules.develop.controller.CodeController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_70135dcd8fcacf909777bcdd64bb9d39(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_70135dcd8fcacf909777bcdd64bb9d39(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.service.impl.CodeServiceImpl getICodeService()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController: org.springblade.core.tool.api.R tree()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_5823f344f37f2c6ea216346268597ad5(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>-><org.springblade.modules.system.entity.AuthClient: void setAuthorizedGrantTypes(java.lang.String)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.RoleController getRoleController()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.desk.controller.NoticeController getNoticeController()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R removeFile(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_8889b74d8ea942c6b55dc8e83986418c(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.DeptController getDeptController()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_f6c04f2dad6941108d186743bbc78060(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_d63e3d7f4200929823da0635fdacba36(org.aspectj.lang.ProceedingJoinPoint,org.springblade.modules.system.entity.AuthClient,org.springblade.modules.system.controller.AuthClientController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_8889b74d8ea942c6b55dc8e83986418c(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>-><org.springblade.modules.develop.entity.Code: void setId(java.lang.Long)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7916b401693f2a647eada73543af0696(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7916b401693f2a647eada73543af0696(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>-><org.springblade.modules.develop.entity.Code: void setServiceName(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>-><org.springblade.modules.system.entity.Menu: void setId(java.lang.Long)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_70135dcd8fcacf909777bcdd64bb9d39(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_5823f344f37f2c6ea216346268597ad5(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.TenantController getTenantController()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_f6c04f2dad6941108d186743bbc78060(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee4805baba94496b354cb21f412728e8(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: java.lang.String getString()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee4805baba94496b354cb21f412728e8(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_f6c04f2dad6941108d186743bbc78060(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.tool.support.xss.XssFilter: org.springblade.core.secure.BladeUser getBladeUserInstance()>-><org.springblade.core.secure.BladeUser: void setUserName(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_f6c04f2dad6941108d186743bbc78060(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_8889b74d8ea942c6b55dc8e83986418c(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_e5d488faebb249eef4ac9b9521c09d50(org.aspectj.lang.ProceedingJoinPoint,java.lang.String,org.springblade.modules.develop.controller.CodeController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_6ad3c21987a81ad3df9db3dd0bd50e97(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.system.controller.MenuController: void <init>(org.springblade.modules.system.service.IMenuService)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_6ad3c21987a81ad3df9db3dd0bd50e97(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.auth.controller.SocialController getSocialController()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_6ad3c21987a81ad3df9db3dd0bd50e97(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee42ba900e3fd8bba11f946fb35133bf(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_6ad3c21987a81ad3df9db3dd0bd50e97(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_94cf6580ad22bca5b6e1f1c04c61dd20(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><synthetic.method.HttpSessionImpl: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.tool.support.xss.XssFilter: org.springblade.core.secure.BladeUser getBladeUserInstance()>-><org.springblade.core.secure.BladeUser: void setRoleId(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_1758f9692d48c42a85219b8d4936550e(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$SpringCGLIB: org.springblade.core.tool.api.R remove(java.lang.String)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: java.lang.String getString()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_8889b74d8ea942c6b55dc8e83986418c(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.system.service.impl.AuthClientServiceImpl getIAuthClientService()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_f6c04f2dad6941108d186743bbc78060(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.core.mp.support.Query getQueryInstance()>-><org.springblade.core.mp.support.Query: org.springblade.core.mp.support.Query setSize(java.lang.Integer)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_d7dc407e26c49bb18bc56829a4073d40(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>-><org.springblade.modules.develop.entity.Code: void setBaseMode(java.lang.Integer)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_b15ea0d1b317742ce0e58e8ce10f50dc(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.core.tool.support.xss.XssFilter: boolean isSkip(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_d7dc407e26c49bb18bc56829a4073d40(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.system.controller.AuthClientController: void <init>(org.springblade.modules.system.service.IAuthClientService)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.RegionController getRegionController()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_2c741134d8e869668b78ede2b2c70415(org.aspectj.lang.ProceedingJoinPoint,java.lang.String,org.springblade.modules.system.controller.MenuController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_5823f344f37f2c6ea216346268597ad5(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_d7dc407e26c49bb18bc56829a4073d40(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>-><org.springblade.modules.develop.entity.Code: void setWrapMode(java.lang.Integer)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.MenuController getMenuController()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.tool.support.xss.HtmlFilter: boolean allowedAttribute(java.lang.String,java.lang.String)>-><io.undertow.util.HeaderValues: boolean contains(java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>-><org.springblade.modules.system.entity.Menu: void setParentId(java.lang.Long)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.DictController: void <init>(org.springblade.modules.system.service.IDictService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_6ad3c21987a81ad3df9db3dd0bd50e97(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R filePath(java.lang.String)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_8889b74d8ea942c6b55dc8e83986418c(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_c2366fd5c2eb2cf0eb2eb79cbe000ca6(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.core.tool.support.xss.XssHttpServletRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee42ba900e3fd8bba11f946fb35133bf(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springblade.core.mp.support.Query getQueryInstance()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.service.impl.DatasourceServiceImpl getIDatasourceService()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.DashBoardController: org.springblade.core.tool.api.R activities()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_c2366fd5c2eb2cf0eb2eb79cbe000ca6(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getServletPath()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_5823f344f37f2c6ea216346268597ad5(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: void <init>()>-><org.springblade.modules.desk.controller.DashBoardController: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.auth.controller.SocialController: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.LogErrorController: void <init>(org.springblade.modules.system.service.ILogErrorService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.service.impl.DatasourceServiceImpl getIDatasourceService()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.tool.support.xss.XssFilter: org.springblade.core.secure.BladeUser getBladeUserInstance()>-><org.springblade.core.secure.BladeUser: void setAccount(java.lang.String)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: void <init>()>-><org.springblade.modules.develop.controller.CodeController: void <init>(org.springblade.modules.develop.service.ICodeService,org.springblade.modules.develop.service.IDatasourceService)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_87e4878d7bdabfc04fd84fff81027ac8(org.aspectj.lang.ProceedingJoinPoint,org.springblade.modules.develop.entity.Code,org.springblade.modules.develop.controller.CodeController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: void <init>()>-><org.springblade.modules.desk.controller.NoticeController: void <init>(org.springblade.modules.desk.service.INoticeService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_f6c04f2dad6941108d186743bbc78060(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.system.service.impl.MenuServiceImpl getIMenuService()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.TenantController: void <init>(org.springblade.modules.system.service.ITenantService)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_564cf47bfc5d5e6273fac11d123465e(org.aspectj.lang.ProceedingJoinPoint,org.springblade.modules.system.entity.AuthClient,org.springblade.modules.system.controller.AuthClientController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_1758f9692d48c42a85219b8d4936550e(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>-><org.springblade.modules.develop.entity.Code: void setDatasourceId(java.lang.Long)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_8d23f1bdcd9d81948a57d8e71d794211(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.core.tool.support.xss.XssHttpServletRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_5823f344f37f2c6ea216346268597ad5(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_70135dcd8fcacf909777bcdd64bb9d39(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.MenuController: void <init>(org.springblade.modules.system.service.IMenuService)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void <init>()>-><org.springblade.modules.auth.controller.SocialController: void <init>(org.springblade.core.social.props.SocialProperties)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R select(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee4805baba94496b354cb21f412728e8(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_d7dc407e26c49bb18bc56829a4073d40(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_e5d488faebb249eef4ac9b9521c09d50(org.aspectj.lang.ProceedingJoinPoint,java.lang.String,org.springblade.modules.develop.controller.CodeController)>-><org.springblade.core.secure.aspect.AuthAspect: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_8d23f1bdcd9d81948a57d8e71d794211(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getServletPath()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_1758f9692d48c42a85219b8d4936550e(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_5823f344f37f2c6ea216346268597ad5(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: java.lang.String getString()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_1758f9692d48c42a85219b8d4936550e(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>-><org.springblade.modules.system.entity.AuthClient: void setAuthorities(java.lang.String)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.AuthController: org.springblade.core.tool.api.R captcha()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>-><org.springblade.modules.develop.entity.Code: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_8889b74d8ea942c6b55dc8e83986418c(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_94cf6580ad22bca5b6e1f1c04c61dd20(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7916b401693f2a647eada73543af0696(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee4805baba94496b354cb21f412728e8(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.system.service.impl.AuthClientServiceImpl getIAuthClientService()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_c7987f18d845581bd711c4c09678a27e(org.aspectj.lang.ProceedingJoinPoint,java.lang.String,org.springblade.modules.system.controller.AuthClientController)>-><org.springblade.core.secure.aspect.AuthAspect: java.lang.String getString()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogApiController: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: java.lang.String getString()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_d7dc407e26c49bb18bc56829a4073d40(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>-><org.springblade.modules.system.entity.Menu: void setIsOpen(java.lang.Integer)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>-><org.springblade.modules.develop.entity.Code: void setIsDeleted(java.lang.Integer)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_5823f344f37f2c6ea216346268597ad5(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.develop.controller.CodeController: void <init>(org.springblade.modules.develop.service.ICodeService,org.springblade.modules.develop.service.IDatasourceService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>-><org.springblade.modules.system.entity.Menu: void setSource(java.lang.String)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>-><org.springblade.modules.develop.entity.Code: void setApiPath(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_6ad3c21987a81ad3df9db3dd0bd50e97(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.system.service.impl.MenuServiceImpl getIMenuService()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee42ba900e3fd8bba11f946fb35133bf(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_b15ea0d1b317742ce0e58e8ce10f50dc(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: void <init>()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_c2366fd5c2eb2cf0eb2eb79cbe000ca6(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>-><org.springblade.modules.system.entity.AuthClient: void setAdditionalInformation(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController: java.lang.Object refreshAuth(java.lang.String,java.lang.String)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.core.mp.support.Query getQueryInstance()>-><org.springblade.core.mp.support.Query: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springframework.boot.actuate.autoconfigure.web.servlet.ManagementErrorEndpoint$$InterceptorProxy: java.util.Map invoke(org.springframework.web.context.request.ServletWebRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7916b401693f2a647eada73543af0696(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.AuthClientController: void <init>(org.springblade.modules.system.service.IAuthClientService)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>-><org.springblade.modules.system.entity.Menu: void setCategory(java.lang.Integer)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.UserController: void <init>(org.springblade.modules.system.service.IUserService)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.service.impl.CodeServiceImpl getICodeService()>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_d7dc407e26c49bb18bc56829a4073d40(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>-><org.springblade.modules.system.entity.Menu: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_b15ea0d1b317742ce0e58e8ce10f50dc(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: java.lang.String getString()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.AuthClientController getAuthClientController()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: org.springblade.core.tool.api.R list(java.util.Map)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: org.springblade.core.tool.api.R copy(java.lang.Long)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_f6c04f2dad6941108d186743bbc78060(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7916b401693f2a647eada73543af0696(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.system.controller.AuthClientController: void <init>(org.springblade.modules.system.service.IAuthClientService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee4805baba94496b354cb21f412728e8(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee42ba900e3fd8bba11f946fb35133bf(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.PostController: void <init>(org.springblade.modules.system.service.IPostService)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_c2366fd5c2eb2cf0eb2eb79cbe000ca6(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><synthetic.method.HttpSessionImpl: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7916b401693f2a647eada73543af0696(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.system.service.impl.MenuServiceImpl getIMenuService()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>-><org.springblade.modules.system.entity.Menu: void setPath(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_5823f344f37f2c6ea216346268597ad5(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.RoleController: void <init>(org.springblade.modules.system.service.IRoleService)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_8889b74d8ea942c6b55dc8e83986418c(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.ParamController: void <init>(org.springblade.modules.system.service.IParamService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>-><org.springblade.modules.develop.entity.Code: void setTablePrefix(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_8889b74d8ea942c6b55dc8e83986418c(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_70135dcd8fcacf909777bcdd64bb9d39(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.DeptController: void <init>(org.springblade.modules.system.service.IDeptService)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.LogUsualController getLogUsualController()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_8d23f1bdcd9d81948a57d8e71d794211(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><io.undertow.servlet.handlers.FilterHandler$FilterChainImpl: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.service.impl.CodeServiceImpl getICodeService()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_8889b74d8ea942c6b55dc8e83986418c(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_f6c04f2dad6941108d186743bbc78060(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_d7dc407e26c49bb18bc56829a4073d40(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_b15ea0d1b317742ce0e58e8ce10f50dc(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.core.tool.support.xss.XssHttpServletRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.controller.DatasourceController getDatasourceController()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController: org.springblade.core.tool.api.R tree()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_f6c04f2dad6941108d186743bbc78060(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>-><org.springblade.modules.system.entity.Menu: void setAction(java.lang.Integer)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>-><org.springblade.modules.system.entity.Menu: void setSort(java.lang.Integer)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController: java.lang.Object revokeAuth(java.lang.String,java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_1758f9692d48c42a85219b8d4936550e(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee42ba900e3fd8bba11f946fb35133bf(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R myNotices()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.service.impl.CodeServiceImpl getICodeService()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_8d23f1bdcd9d81948a57d8e71d794211(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.core.tool.support.xss.XssFilter: java.lang.String getString()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_70135dcd8fcacf909777bcdd64bb9d39(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.develop.controller.CodeController: void <init>(org.springblade.modules.develop.service.ICodeService,org.springblade.modules.develop.service.IDatasourceService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.LogApiController: void <init>(org.springblade.modules.system.service.ILogApiService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R removeBucket(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_f6c04f2dad6941108d186743bbc78060(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.system.controller.MenuController: void <init>(org.springblade.modules.system.service.IMenuService)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_94cf6580ad22bca5b6e1f1c04c61dd20(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.core.tool.support.xss.XssFilter: boolean isSkip(java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController: org.springblade.core.tool.api.R info(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_70135dcd8fcacf909777bcdd64bb9d39(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee4805baba94496b354cb21f412728e8(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee42ba900e3fd8bba11f946fb35133bf(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_94cf6580ad22bca5b6e1f1c04c61dd20(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getServletPath()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee42ba900e3fd8bba11f946fb35133bf(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.core.mp.support.Query getQueryInstance()>-><org.springblade.core.mp.support.Query: org.springblade.core.mp.support.Query setAscs(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee42ba900e3fd8bba11f946fb35133bf(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><io.undertow.servlet.handlers.FilterHandler$FilterChainImpl: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>-><org.springblade.modules.system.entity.Menu: void setName(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>-><org.springblade.modules.system.entity.AuthClient: void setScope(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_d7dc407e26c49bb18bc56829a4073d40(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_1758f9692d48c42a85219b8d4936550e(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.system.service.impl.AuthClientServiceImpl getIAuthClientService()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>-><org.springblade.modules.develop.entity.Code: void setCodeName(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>-><org.springblade.modules.system.entity.Menu: void setCode(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.DictController getDictController()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_1758f9692d48c42a85219b8d4936550e(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R statFile(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R fileLink(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.core.mp.support.Query getQueryInstance()>-><org.springblade.core.mp.support.Query: org.springblade.core.mp.support.Query setDescs(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.system.service.impl.AuthClientServiceImpl getIAuthClientService()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.develop.controller.CodeController: void <init>(org.springblade.modules.develop.service.ICodeService,org.springblade.modules.develop.service.IDatasourceService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_70135dcd8fcacf909777bcdd64bb9d39(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_70135dcd8fcacf909777bcdd64bb9d39(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>-><org.springblade.modules.system.entity.AuthClient: void setAccessTokenValidity(java.lang.Integer)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.develop.entity.Code getCodeInstance()>-><org.springblade.modules.develop.entity.Code: void setWebPath(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.service.impl.CodeServiceImpl getICodeService()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee42ba900e3fd8bba11f946fb35133bf(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.system.controller.AuthClientController: void <init>(org.springblade.modules.system.service.IAuthClientService)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.modules.develop.controller.CodeController: void <init>(org.springblade.modules.develop.service.ICodeService,org.springblade.modules.develop.service.IDatasourceService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>-><org.springblade.modules.system.entity.Menu: void setIsDeleted(java.lang.Integer)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_a944db4962769feb6da2dd7cb873a0b6(org.aspectj.lang.ProceedingJoinPoint,java.lang.String,java.lang.String,org.springblade.modules.develop.controller.CodeController)>-><org.springblade.core.secure.aspect.AuthAspect: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.system.controller.UserController: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_f6c04f2dad6941108d186743bbc78060(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.desk.controller.DashBoardController getDashBoardController()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_6ad3c21987a81ad3df9db3dd0bd50e97(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_94cf6580ad22bca5b6e1f1c04c61dd20(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_94cf6580ad22bca5b6e1f1c04c61dd20(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.core.tool.support.xss.XssFilter: org.springblade.core.secure.BladeUser getBladeUserInstance()>
<org.springblade.core.tool.support.xss.XssFilter: org.springblade.core.secure.BladeUser getBladeUserInstance()>-><org.springblade.core.secure.BladeUser: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_bd597656b3b8fe0f1905d8bec1144c69(org.aspectj.lang.ProceedingJoinPoint,org.springblade.modules.system.entity.AuthClient,org.springblade.modules.system.controller.AuthClientController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_d7dc407e26c49bb18bc56829a4073d40(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_29f8df7dc59a89b34dbf49f12f8b389f(org.aspectj.lang.ProceedingJoinPoint,org.springblade.modules.system.entity.Menu,org.springblade.modules.system.controller.MenuController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_6ad3c21987a81ad3df9db3dd0bd50e97(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_1758f9692d48c42a85219b8d4936550e(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springblade.core.mp.support.Query getQueryInstance()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_8d23f1bdcd9d81948a57d8e71d794211(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_410abf2b09aecdfbec9b483165a4a370(org.aspectj.lang.ProceedingJoinPoint,org.springblade.modules.system.entity.AuthClient,org.springblade.modules.system.controller.AuthClientController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee42ba900e3fd8bba11f946fb35133bf(org.aspectj.lang.ProceedingJoinPoint)>
<org.springframework.boot.actuate.autoconfigure.web.servlet.ManagementErrorEndpoint$$InterceptorProxy: java.util.Map invoke(org.springframework.web.context.request.ServletWebRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7916b401693f2a647eada73543af0696(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springframework.boot.actuate.autoconfigure.web.servlet.ManagementErrorEndpoint$$InterceptorProxy: java.util.Map invoke(org.springframework.web.context.request.ServletWebRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>-><org.springblade.modules.system.entity.AuthClient: void setAutoapprove(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_8889b74d8ea942c6b55dc8e83986418c(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7d5b6a668c4436d47707e4bba31a2aa0(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_5823f344f37f2c6ea216346268597ad5(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7916b401693f2a647eada73543af0696(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_f6c04f2dad6941108d186743bbc78060(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.service.impl.DatasourceServiceImpl getIDatasourceService()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee42ba900e3fd8bba11f946fb35133bf(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R removeFiles(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>-><org.springblade.modules.system.entity.Menu: void setAlias(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.service.impl.CodeServiceImpl getICodeService()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_d1e617e8b7119980dae996463f06edab(org.aspectj.lang.ProceedingJoinPoint,org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,org.springblade.modules.system.controller.AuthClientController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.tool.support.xss.XssFilter: org.springblade.core.secure.BladeUser getBladeUserInstance()>-><org.springblade.core.secure.BladeUser: void setTenantId(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_6ad3c21987a81ad3df9db3dd0bd50e97(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.CompositeStringExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.tool.support.xss.XssFilter: void doFilter_c2366fd5c2eb2cf0eb2eb79cbe000ca6(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springblade.core.tool.support.xss.XssFilter: boolean isSkip(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_2037d553c2435d8bb99f7ada697193e0(org.aspectj.lang.ProceedingJoinPoint,java.util.Map,org.springblade.modules.system.controller.MenuController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_7916b401693f2a647eada73543af0696(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>-><org.springblade.modules.system.entity.AuthClient: void setClientSecret(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_ff517bedbd8efe95f25bb7265ae0fe89(org.aspectj.lang.ProceedingJoinPoint,java.util.Map,org.springblade.core.mp.support.Query,org.springblade.modules.develop.controller.CodeController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_737c9c6f7ea0551e268c94197df5a172(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_70135dcd8fcacf909777bcdd64bb9d39(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.service.impl.DatasourceServiceImpl getIDatasourceService()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_5823f344f37f2c6ea216346268597ad5(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.system.service.impl.MenuServiceImpl getIMenuService()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.AuthController: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee4805baba94496b354cb21f412728e8(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.tool.support.xss.XssFilter: org.springblade.core.secure.BladeUser getBladeUserInstance()>-><org.springblade.core.secure.BladeUser: void setClientId(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_8889b74d8ea942c6b55dc8e83986418c(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_1758f9692d48c42a85219b8d4936550e(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.ClassUtil: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_2c741134d8e869668b78ede2b2c70415(org.aspectj.lang.ProceedingJoinPoint,java.lang.String,org.springblade.modules.system.controller.MenuController)>-><org.springblade.core.secure.aspect.AuthAspect: java.lang.String getString()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_e93055e07f8b30b85674212e0ef30648(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.tool.utils.StringUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R makeBucket(java.lang.String)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.Menu getMenuInstance()>-><org.springblade.modules.system.entity.Menu: void setRemark(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_be5855b8524c8dfd8ab9dc85870f1d82(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_c7987f18d845581bd711c4c09678a27e(org.aspectj.lang.ProceedingJoinPoint,java.lang.String,org.springblade.modules.system.controller.AuthClientController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee4805baba94496b354cb21f412728e8(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.spel.standard.SpelExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.system.controller.UserController: void exportUser(javax.servlet.http.HttpServletResponse)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_a944db4962769feb6da2dd7cb873a0b6(org.aspectj.lang.ProceedingJoinPoint,java.lang.String,java.lang.String,org.springblade.modules.develop.controller.CodeController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_b05c76f7c33e3933fe9815e7573e7420(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_6ad3c21987a81ad3df9db3dd0bd50e97(org.aspectj.lang.ProceedingJoinPoint)>-><java.lang.Boolean: boolean booleanValue()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee4805baba94496b354cb21f412728e8(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.RegionController: void <init>(org.springblade.modules.system.service.IRegionService)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>-><org.springblade.modules.system.entity.AuthClient: void setClientId(java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.core.secure.aspect.AuthAspect: java.lang.Object preAuth_66e3b44537cdb167b9302201c87d5bd9(org.aspectj.lang.ProceedingJoinPoint,org.springblade.modules.develop.entity.Code,org.springblade.modules.develop.controller.CodeController)>-><org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_890129359245f79e2f49965b6931df41(org.aspectj.lang.ProceedingJoinPoint)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee42ba900e3fd8bba11f946fb35133bf(org.aspectj.lang.ProceedingJoinPoint)>-><synthetic.method.SingletonFactory: org.springblade.modules.system.service.impl.AuthClientServiceImpl getIAuthClientService()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_ee4805baba94496b354cb21f412728e8(org.aspectj.lang.ProceedingJoinPoint)>-><org.springframework.expression.common.LiteralExpression: java.lang.Object getValue(org.springframework.expression.EvaluationContext,java.lang.Class)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.core.secure.aspect.AuthAspect: org.springblade.modules.system.entity.AuthClient getAuthClientInstance()>-><org.springblade.modules.system.entity.AuthClient: void setId(java.lang.Long)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.ParamController getParamController()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_8889b74d8ea942c6b55dc8e83986418c(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.core.secure.aspect.AuthAspect: boolean handleAuth_6ad3c21987a81ad3df9db3dd0bd50e97(org.aspectj.lang.ProceedingJoinPoint)>-><org.springblade.core.secure.aspect.AuthAspect: org.springframework.expression.spel.support.StandardEvaluationContext getEvaluationContext(java.lang.reflect.Method,java.lang.Object[])>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
