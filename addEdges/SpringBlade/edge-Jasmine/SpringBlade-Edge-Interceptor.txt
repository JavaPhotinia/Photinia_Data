<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.UserController getUserController()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController: org.springblade.core.tool.api.R list(java.util.Map)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R resetPassword(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R notices()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: void <init>()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogUsualController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogApiController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController: org.springblade.core.tool.api.R select()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.LogUsualController: void <init>(org.springblade.modules.system.service.ILogUsualService)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogErrorController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogErrorController: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.LogErrorController getLogErrorController()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogUsualController: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: void <init>()>-><org.springblade.modules.develop.controller.DatasourceController: void <init>(org.springblade.modules.develop.service.IDatasourceService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.auth.controller.AuthController getAuthController()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.controller.CodeController getCodeController()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: void <init>()>-><org.springblade.modules.resource.OssEndpoint: void <init>(org.springblade.core.oss.QiniuTemplate)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.LogApiController getLogApiController()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.PostController getPostController()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser)>
<org.springframework.boot.actuate.autoconfigure.web.servlet.ManagementErrorEndpoint$$InterceptorProxy: java.util.Map invoke(org.springframework.web.context.request.ServletWebRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController: org.springblade.core.tool.api.R dictionary(java.lang.String)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: void <init>()>-><org.springblade.modules.auth.controller.AuthController: void <init>(org.springblade.core.tool.utils.RedisUtil)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.resource.OssEndpoint getOssEndpoint()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController: org.springblade.core.tool.api.R tree()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.RoleController getRoleController()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.desk.controller.NoticeController getNoticeController()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R removeFile(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.DeptController getDeptController()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.TenantController getTenantController()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.auth.controller.SocialController getSocialController()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.RegionController getRegionController()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.MenuController getMenuController()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.DictController: void <init>(org.springblade.modules.system.service.IDictService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R filePath(java.lang.String)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.DashBoardController: org.springblade.core.tool.api.R activities()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: void <init>()>-><org.springblade.modules.desk.controller.DashBoardController: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.auth.controller.SocialController: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.LogErrorController: void <init>(org.springblade.modules.system.service.ILogErrorService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: void <init>()>-><org.springblade.modules.develop.controller.CodeController: void <init>(org.springblade.modules.develop.service.ICodeService,org.springblade.modules.develop.service.IDatasourceService)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: void <init>()>-><org.springblade.modules.desk.controller.NoticeController: void <init>(org.springblade.modules.desk.service.INoticeService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.TenantController: void <init>(org.springblade.modules.system.service.ITenantService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.MenuController: void <init>(org.springblade.modules.system.service.IMenuService)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void <init>()>-><org.springblade.modules.auth.controller.SocialController: void <init>(org.springblade.core.social.props.SocialProperties)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R select(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.AuthController: org.springblade.core.tool.api.R captcha()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogApiController: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController: java.lang.Object refreshAuth(java.lang.String,java.lang.String)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.boot.actuate.autoconfigure.web.servlet.ManagementErrorEndpoint$$InterceptorProxy: java.util.Map invoke(org.springframework.web.context.request.ServletWebRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.AuthClientController: void <init>(org.springblade.modules.system.service.IAuthClientService)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.UserController: void <init>(org.springblade.modules.system.service.IUserService)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.AuthClientController getAuthClientController()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: org.springblade.core.tool.api.R list(java.util.Map)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: org.springblade.core.tool.api.R copy(java.lang.Long)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.PostController: void <init>(org.springblade.modules.system.service.IPostService)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.RoleController: void <init>(org.springblade.modules.system.service.IRoleService)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.ParamController: void <init>(org.springblade.modules.system.service.IParamService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.DeptController: void <init>(org.springblade.modules.system.service.IDeptService)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$SpringCGLIB: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.LogUsualController getLogUsualController()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.develop.controller.DatasourceController getDatasourceController()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController: org.springblade.core.tool.api.R tree()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.SocialController: java.lang.Object revokeAuth(java.lang.String,java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Role,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController: org.springblade.core.tool.api.R myNotices()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.LogApiController: void <init>(org.springblade.modules.system.service.ILogApiService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R removeBucket(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R info(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController: org.springblade.core.tool.api.R info(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.DictController getDictController()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R statFile(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R routes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R fileLink(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: void <init>()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogUsual,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R buttons(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.system.controller.UserController: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R grantTree(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.desk.controller.DashBoardController getDashBoardController()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R copyFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyList(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.boot.actuate.autoconfigure.web.servlet.ManagementErrorEndpoint$$InterceptorProxy: java.util.Map invoke(org.springframework.web.context.request.ServletWebRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springframework.boot.actuate.autoconfigure.web.servlet.ManagementErrorEndpoint$$InterceptorProxy: java.util.Map invoke(org.springframework.web.context.request.ServletWebRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.entity.Tenant,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.AuthClient,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Region,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R removeFiles(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFiles(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R genCode(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R remove(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R info(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dept,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: org.springblade.core.tool.api.R activities(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.DashBoardController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R putFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.ParamController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R filePath(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.auth.controller.AuthController: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R lazyTree(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(java.util.Map,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R select(org.springblade.modules.system.entity.Tenant,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dept,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.LogErrorController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogError,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object refreshAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object revokeAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint: org.springblade.core.tool.api.R makeBucket(java.lang.String)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R dictionary(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Menu,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R statFile(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R authRoutes(org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R registerGuest(org.springblade.modules.system.entity.User,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R page(org.springblade.modules.system.vo.PostVO,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R grant(org.springblade.modules.system.vo.GrantVO,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R removeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DeptController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RoleController$$InterceptorProxy: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RoleController: org.springblade.core.tool.api.R tree(java.lang.String,org.springblade.core.secure.BladeUser)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.Object login(java.lang.String,me.zhyd.oauth.model.AuthCallback,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R myNotices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R makeBucket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.system.controller.UserController: void exportUser(javax.servlet.http.HttpServletResponse)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R roleTreeKeys(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R update(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.RegionController: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Region)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R notices(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R token(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springblade.modules.system.controller.LogApiController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.core.log.model.LogApi,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R tree(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.develop.controller.CodeController$$SpringCGLIB: org.springblade.core.tool.api.R detail(org.springblade.modules.develop.entity.Code)>
<org.springblade.modules.system.controller.MenuController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R updatePassword(org.springblade.core.secure.BladeUser,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.desk.controller.NoticeController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.desk.entity.Notice,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R grant(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R list(org.springblade.modules.system.entity.Post,org.springblade.core.mp.support.Query)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: void <init>()>-><org.springblade.modules.system.controller.RegionController: void <init>(org.springblade.modules.system.service.IRegionService)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.LogUsualController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springblade.core.tool.api.R select(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springblade.core.tool.api.R fileLink(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.resource.OssEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Tenant,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.TenantController$$InterceptorProxy: org.springblade.core.tool.api.R remove(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.TenantController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController$$InterceptorProxy: java.lang.String getString()>
<org.springblade.modules.system.controller.AuthClientController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.AuthClientController$$SpringCGLIB: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.AuthClient)>
<org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Dict,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.DictController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R select(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springblade.modules.develop.controller.CodeController$$InterceptorProxy: org.springblade.core.tool.api.R copy(java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R userList(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.User,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R list(org.springblade.modules.develop.entity.Datasource,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.modules.system.controller.PostController: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R submit(org.springblade.modules.system.entity.Param,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.AuthController$$InterceptorProxy: org.springblade.core.tool.api.R captcha(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.ClientInterceptor: void <init>(java.lang.String)>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,org.springblade.core.secure.BladeUser,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springblade.core.secure.interceptor.SecureInterceptor: void <init>()>
<org.springblade.modules.system.controller.PostController$$InterceptorProxy: org.springblade.core.tool.api.R detail(org.springblade.modules.system.entity.Post,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.auth.controller.SocialController$$InterceptorProxy: void renderAuth(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.springblade.modules.system.controller.ParamController getParamController()>
<org.springblade.modules.develop.controller.DatasourceController$$InterceptorProxy: org.springblade.core.tool.api.R save(org.springblade.modules.develop.entity.Datasource,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.ParamController$$InterceptorProxy: org.springblade.core.tool.api.R list(java.util.Map,org.springblade.core.mp.support.Query,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springblade.modules.system.controller.RegionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: void exportUser(javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springblade.modules.system.controller.UserController$$InterceptorProxy: org.springblade.core.tool.api.R importUser(org.springframework.web.multipart.MultipartFile,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
