<sun.net.www.MeteredStream: int available()>-><java.io.ByteArrayInputStream: int available()>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void toReadMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer limit(int)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addEmp(org.javaboy.vhr.model.Employee,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$AbstractConcNode: int getChildCount()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: boolean authQop()>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: java.util.List getAllDepartments(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.net.SocksSocketImpl: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: int getPort()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.stream.Node$OfDouble: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getSchool()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.String: java.lang.String valueOf(char[])>
<java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.io.BufferedOutputStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<synthetic.method.PositionMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Position)>-><org.javaboy.vhr.model.Position: java.util.Date getCreateDate()>
<java.io.FilterInputStream: void reset()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void reset()>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllPositions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.security.util.HostnameChecker: boolean matchAllWildcards(java.lang.String,java.lang.String)>-><sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.javaboy.vhr.controller.salary.SalaryController getSalaryController()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$SpinedNodeBuilder: java.util.stream.Node build()>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.Spliterators$LongArraySpliterator: void forEachRemaining(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><java.io.InputStream: void close()>
<java.util.Hashtable: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<javax.net.ssl.SSLSocketFactory: java.lang.String getSecurityProperty(java.lang.String)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>-><java.lang.String: int compareToIgnoreCase(java.lang.String)>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.FindOps$FindSink: void accept(java.lang.Object)>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.util.Date getCreateDate()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.net.Socket: java.io.OutputStream getOutputStream()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Spliterators$IteratorSpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$DoubleArraySpliterator: long estimateSize()>
<java.security.Permission: java.lang.String toString()>-><java.net.URLPermission: java.lang.String getActions()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>
<org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.http.HttpClient: void openServer()>-><java.net.URL: java.lang.String getProtocol()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateJobLevelById(org.javaboy.vhr.model.JobLevel,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.MeteredStream: int available()>-><java.util.zip.InflaterInputStream: int available()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.DeltaRecord: java.lang.String toString()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrRole(java.lang.Integer,java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.web.authentication.logout.LogoutSuccessEventPublishingLogoutHandler: void setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setnotworkdate(java.util.Date)>
<java.util.Collections$SetFromMap: java.util.Spliterator spliterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Spliterator spliterator()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.MeteredStream: long skip(long)>-><org.apache.poi.poifs.filesystem.DocumentInputStream: long skip(long)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.lettuce.core.internal.AbstractInvocationHandler: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.InputStream: void mark(int)>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>-><java.net.URL: java.lang.String toExternalForm()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.TabIdRecord: java.lang.String toString()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllNations(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: synthetic.method.datatable.SALARY getInstance()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.HashMap: void <init>()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.catalina.connector.Response$PrivilegedDoIsEncodable: java.lang.Boolean run()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean supportsPreemptiveAuthorization()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<java.util.stream.Node$OfInt: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: void <init>(java.lang.String)>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteSalaryById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.io.FilterInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.LinkedList$ListItr: void add(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrRole(java.lang.Integer,java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: void openServer()>-><java.lang.String: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setBeginContract(java.util.Date)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.Scannable$Attr$2: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.MeteredStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getCredentials()>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: org.javaboy.vhr.model.RespBean login(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getAuth(java.lang.String,java.net.URL)>-><java.net.URL: java.lang.String getPath()>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<synthetic.method.MailSendLogMapperImpl: java.lang.Integer insert(org.javaboy.vhr.model.MailSendLog)>-><org.javaboy.vhr.model.MailSendLog: java.lang.Integer getEmpId()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.http.ChunkedInputStream: void close()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><org.apache.poi.poifs.filesystem.DocumentInputStream: int read(byte[],int,int)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Spliterators$LongArraySpliterator: long estimateSize()>
<sun.net.www.http.HttpClient: void openServer()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.AbstractPlainSocketImpl: void close()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.lang.Integer updateEmployeeSalaryById(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPSALARY: void setsid(java.lang.Integer)>
<org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: char getSeparator()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL,java.lang.String,int)>-><java.net.URL: java.lang.String getProtocol()>
<synthetic.method.PositionMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Position)>-><org.javaboy.vhr.model.Position: java.lang.String getName()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: int characteristics()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>-><java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: java.util.List getAllPositions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PositionController: java.util.List getAllPositions()>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>-><java.net.AbstractPlainSocketImpl: void setOption(int,java.lang.Object)>
<com.rabbitmq.client.impl.TruncatedInputStream: void reset()>-><java.io.FilterInputStream: void reset()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$ConcatSpliterator: java.util.Spliterator trySplit()>
<synthetic.method.JobLevelMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.JobLevel)>-><org.javaboy.vhr.model.JobLevel: java.lang.Boolean getEnabled()>
<sun.net.www.protocol.http.HttpURLConnection$12: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String,int,java.net.URL)>-><java.lang.Object: void <init>()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int lastIndexOf(int)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.Thread: void setName(java.lang.String)>
<org.springframework.web.context.request.AbstractRequestAttributes: void registerRequestDestructionCallback(java.lang.String,java.lang.Runnable)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.FilterOutputStream: void flush()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.IdentityHashMap$IdentityHashMapSpliterator: long estimateSize()>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><java.lang.ThreadLocal: java.lang.Object get()>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void settrafficsalary(java.lang.Integer)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: void close()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.stream.Node build()>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket()>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllPoliticsstatus(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.DataInputStream: int read(byte[],int,int)>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntArrayNode: java.util.Spliterator$OfPrimitive spliterator()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Node$OfDouble: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.util.TypeVariableTypeInformation: java.lang.String toString()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><sun.net.ApplicationProxy: sun.net.ApplicationProxy create(java.net.Proxy)>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void <init>()>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>
<java.io.BufferedInputStream: void fill()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.http.ResponseEntity exportData(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.misc.URLClassPath: void check(java.net.URL)>-><java.security.Permission: java.lang.String getName()>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: int characteristics()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.ArrayList$ArrayListSpliterator: long estimateSize()>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.StringBuilder: void <init>(int)>
<java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><synthetic.method.datatable.HR: synthetic.method.datatable.HR getInstance()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.security.core.userdetails.User: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.util.ParameterizedTypeInformation: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setNativePlace(java.lang.String)>
<java.util.stream.Node$OfDouble: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>
<java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Spliterators$DoubleArraySpliterator: int characteristics()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.Ref2DPtgBase: java.lang.String toString()>
<java.net.Socket: int getSoTimeout()>-><java.net.Socket: java.net.SocketImpl getImpl()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addSalary(org.javaboy.vhr.model.Salary,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrPasswd(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getPhone()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><java.nio.Buffer: int limit()>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.IntPipeline$4$1: void accept(int)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.ArrayDeque: java.lang.Object pollFirst()>
<synthetic.method.MenuRoleMapperImpl: void deleteByRid(java.lang.Integer)>-><synthetic.method.datatable.MENUROLE: synthetic.method.datatable.MENUROLE getInstance()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.aggregates.SharedValueManager$SharedFormulaGroup: java.lang.String toString()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.javaboy.vhr.utils.POIUtils: java.util.List excel2Employee(org.springframework.web.multipart.MultipartFile,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>-><org.javaboy.vhr.model.Department: java.lang.Integer getId()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.Streams$AbstractStreamBuilderImpl: long estimateSize()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.ExternSheetRecord$RefSubRecord: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>-><java.net.Proxy: java.net.Proxy$Type type()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.YearMonth: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.BackupRecord: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.lang.Object doLeaf()>-><java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.Integer: java.lang.String toHexString(int)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: void setCacheRequest(java.net.CacheRequest)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllPoliticsstatus(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>-><java.util.NoSuchElementException: void <init>(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<java.net.URLPermission: void init(java.lang.String)>-><java.util.Collections: void sort(java.util.List)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.Permissions: void <init>()>
<sun.net.www.MeteredStream: int read()>-><java.util.zip.InflaterInputStream: int read()>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.MeteredStream: int read()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getidcard()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.util.Date getBeginContract()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void openServer()>
<sun.net.www.protocol.http.NegotiateAuthentication: void <init>(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>
<java.io.BufferedOutputStream: void flushBuffer()>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: void verifyCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.reflect.Method: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.PermissionCollection: java.lang.String toString()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.LinkedList$LLSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.net.Socket: void setTcpNoDelay(boolean)>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.lang.Object next()>
<synthetic.method.MenuMapperImpl: java.util.List getAllMenus()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.util.ArrayList$SubList$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.LinkedList: java.lang.Object get(int)>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: synthetic.method.datatable.SALARY getInstance()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: int limit()>
<javax.security.auth.SubjectDomainCombiner: java.lang.String printDomain(java.security.ProtectionDomain)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.Vector: java.lang.Object elementAt(int)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator spliterator()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getid()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setConversionTime(java.util.Date)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: void remove(java.lang.String)>
<org.springframework.web.context.request.ServletWebRequest: java.lang.String getDescription(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRemoteUser()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.KeepAliveStream: long remainingToRead()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxCreate$LatestAsyncSink: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node$OfDouble: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: boolean isEmpty()>
<javax.security.auth.SubjectDomainCombiner$1: java.lang.Void run()>-><javax.security.auth.Subject: java.lang.String toString()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.usermodel.HSSFCell: java.lang.String toString()>
<org.springframework.web.context.request.AbstractRequestAttributes: void registerRequestDestructionCallback(java.lang.String,java.lang.Runnable)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.MessageHeader: java.lang.String getHeaderNamesInList()>-><java.util.StringJoiner: java.lang.String toString()>
<java.util.stream.Node$OfLong: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long estimateSize()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><synthetic.method.datatable.HR: java.lang.String getphone()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: java.util.List getAllRoles(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$2: long estimateSize()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.PermissionsEnumerator: boolean hasMoreElements()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.zip.DeflaterOutputStream: void deflate()>-><java.io.PrintStream: void write(byte[],int,int)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.javaboy.vhr.config.CustomUrlDecisionManager: boolean supports(java.lang.Class)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: void <init>()>-><org.javaboy.vhr.controller.emp.EmpBasicController: void <init>()>
<java.net.Socket: int getSoTimeout()>-><java.lang.Integer: int intValue()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>-><java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.text.MessageFormat: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection$5: java.lang.String run()>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<org.javaboy.vhr.service.HrService: boolean updateHrPasswd(java.lang.String,java.lang.String,java.lang.Integer)>-><org.javaboy.vhr.model.Hr: java.lang.String getPassword()>
<java.util.concurrent.ScheduledThreadPoolExecutor: void execute(java.lang.Runnable)>-><java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
<javax.security.auth.SubjectDomainCombiner$2: java.lang.Void run()>-><javax.security.auth.Policy: javax.security.auth.Policy getPolicy()>
<sun.net.www.protocol.http.HttpURLConnection$11: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$11: java.net.InetAddress run()>
<sun.net.www.http.KeepAliveCache: int getMaxConnections()>-><sun.security.action.GetIntegerAction: void <init>(java.lang.String,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.TreeMap$ValueSpliterator: int characteristics()>
<java.util.IdentityHashMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.SliceOps$SliceTask: java.util.stream.Node getEmptyResult()>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createProxy(com.rabbitmq.client.Channel,boolean)>-><org.springframework.aop.framework.AdvisedSupport: void addInterface(java.lang.Class)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><synthetic.method.datatable.DEPARTMENT: java.lang.Boolean getenabled()>
<java.net.HttpConnectSocketImpl$2: java.net.Socket run()>-><java.net.HttpConnectSocketImpl: java.net.Socket access$200(java.net.HttpConnectSocketImpl,java.lang.String,int)>
<java.io.FilterInputStream: void mark(int)>-><sun.net.www.MeteredStream: void mark(int)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.String: int length()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getId()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$EmptySpliterator: java.util.Spliterator trySplit()>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><org.javaboy.vhr.model.Department: void setEnabled(java.lang.Boolean)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: void forceClose()>-><org.springframework.amqp.rabbit.connection.SimpleConnection: void close()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setBeginDate(java.util.Date)>
<org.javaboy.vhr.controller.ChatController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$1: java.util.Iterator iterator()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$ArrayNode: java.util.Spliterator spliterator()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Spliterators$IteratorSpliterator: long estimateSize()>
<org.apache.tomcat.util.buf.UEncoder: void urlEncode(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.CharChunk: void append(char)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator spliterator()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL,java.lang.String,int)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.lang.Object: void wait()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.MessageHeader: void reset()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.net.httpserver.SSLStreams$OutputStream: void close()>
<java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getAccumulationFundBase()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: void afterPropertiesSet()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator spliterator()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<synthetic.method.PositionMapperImpl: java.util.List getAllPositions()>-><org.javaboy.vhr.model.Position: void setName(java.lang.String)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.io.FilterOutputStream: void close()>-><java.io.PrintStream: void close()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.io.DataOutputStream: void write(int)>-><java.io.PrintStream: void write(int)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHr(org.javaboy.vhr.model.Hr,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<synthetic.method.MenuMapperImpl: java.util.List getMidsByRid(java.lang.Integer)>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.net.HttpConnectSocketImpl$1: java.lang.Void run()>-><java.net.HttpConnectSocketImpl: java.lang.reflect.Field access$100()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveCache$1: void <init>(sun.net.www.http.KeepAliveCache,sun.net.www.http.KeepAliveCache)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><synthetic.method.datatable.DEPARTMENT: java.lang.String getdeppath()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<java.util.stream.Node$OfLong: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setbegindate(java.util.Date)>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.javaboy.vhr.controller.system.basic.PositionController getPositionController()>
<java.net.Proxy: java.lang.String toString()>-><java.net.Proxy: java.net.Proxy$Type type()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getAllRoles(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.HashSet: void <init>(java.util.Collection)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.ProgressSource: void finishTracking()>
<java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long estimateSize()>
<sun.net.www.http.KeepAliveCache: int getMaxConnections()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.WeakHashMap: void clear()>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$RangeIntSpliterator: java.util.Spliterator trySplit()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.util.DerValue: java.lang.String toString()>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.ComparableTimSort: int countRunAndMakeAscending(java.lang.Object[],int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner$2: void <init>(javax.security.auth.SubjectDomainCombiner)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.controller.ChatController$$InterceptorProxy: java.util.List getAllHrs(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.ChatController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.stream.Node$OfDouble build()>
<sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.util.ResourceBundle$RBClassLoader: java.lang.Class loadClass(java.lang.String)>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getBasicSalary()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.ReduceOps$5ReducingSink: void begin(long)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.Object: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactory: void <init>(java.lang.Object)>-><org.springframework.aop.framework.ProxyCreatorSupport: void <init>()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void begin(long)>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<java.util.stream.Nodes$LongArrayNode: void forEach(java.util.function.LongConsumer)>-><java.util.stream.Nodes$LongFixedNodeBuilder: void accept(long)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<java.util.TimSort: int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.asm.Handle: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfInt: void <init>(java.util.stream.Node$OfInt)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive)>
<org.csource.fastdfs.ProtoCommon: org.csource.fastdfs.ProtoCommon$RecvPackageInfo recvPackage(java.io.InputStream,byte,long)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.TimSort: void mergeLo(int,int,int,int)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.Collections$SynchronizedCollection: void clear()>
<sun.net.www.http.HttpClient: void logFinest(java.lang.String)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: java.util.List getAllSalaries(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.salary.SobConfigController: java.util.List getAllSalaries()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.CodeSigner: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><synthetic.method.datatable.DEPARTMENT: java.lang.String getname()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$KeySpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$ListItr: void add(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$SizedCollectorTask: void begin(long)>
<synthetic.method.PositionMapperImpl: int insertSelective(org.javaboy.vhr.model.Position)>-><synthetic.method.datatable.POSITION: void setcreatedate(java.util.Date)>
<sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setDepartmentId(java.lang.Integer)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getid()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.text.MessageFormat: int hashCode()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.www.http.HttpClient: void setIgnoreContinue(boolean)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IteratorSpliterator: long estimateSize()>
<sun.net.www.HeaderParser: int findInt(java.lang.String,int)>-><java.lang.String: java.lang.String valueOf(int)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.security.ssl.Krb5Helper: java.lang.String getPrincipalHostName(java.security.Principal)>-><sun.security.ssl.Krb5Helper: void ensureAvailable()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive,java.util.stream.Node$OfPrimitive)>-><java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><synthetic.method.datatable.HR: java.lang.Integer getid()>
<sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.FilterInputStream: int available()>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: java.util.List getAllSalaries(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<synthetic.method.HrRoleMapperImpl: java.lang.Integer addRole(java.lang.Integer,java.lang.Integer[])>-><synthetic.method.datatable.HRROLE: void sethrid(java.lang.Integer)>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.SubList: int access$208(java.util.SubList)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: int getDefaultPort()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.util.stream.Node$OfInt build()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.util.function.Tuple2: java.lang.String toString()>
<java.io.BufferedOutputStream: void flushBuffer()>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getNonce()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<java.io.DataOutputStream: void writeLong(long)>-><java.io.PrintStream: void write(byte[],int,int)>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void setConnectTimeout(int)>-><sun.net.www.protocol.http.HttpURLConnection: void setConnectTimeout(int)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><sun.security.util.DerValue: java.lang.String getAsString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean maxWorkID(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger access$000()>
<sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.net.URL)>-><sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.lang.System: long currentTimeMillis()>
<sun.net.www.http.HttpCaptureInputStream: int read(byte[])>-><java.io.FilterInputStream: int read(byte[])>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.lang.String: char charAt(int)>
<org.apache.poi.util.LittleEndianOutputStream: void writeInt(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<sun.net.www.MeteredStream: int available()>-><java.io.SequenceInputStream: int available()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Spliterators$IntIteratorSpliterator: long estimateSize()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrUserface(org.springframework.web.multipart.MultipartFile,java.lang.Integer,org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<synthetic.method.JobLevelMapperImpl: int insertSelective(org.javaboy.vhr.model.JobLevel)>-><org.javaboy.vhr.model.JobLevel: java.lang.Integer getId()>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setjoblevelid(java.lang.Integer)>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.CharBuffer: char[] array()>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: void writeToCache(byte[],int,int)>-><org.springframework.web.util.ContentCachingRequestWrapper: void handleContentOverflow(int)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: java.net.CookieHandler getCookieHandler()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$5: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$5: java.lang.String run()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void settiptopdegree(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.String: java.lang.String valueOf(int)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URL: int getPort()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: int characteristics()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.security.web.authentication.WebAuthenticationDetails: boolean equals(java.lang.Object)>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String getSessionId()>
<sun.net.www.http.HttpClient: void closeServer()>-><java.net.Socket: void close()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllJobLevels(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController: java.util.List getAllJobLevels()>
<java.util.zip.InflaterInputStream: void fill()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>
<sun.nio.cs.StreamDecoder: boolean inReady()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<synthetic.method.JobLevelMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.JobLevel)>-><org.javaboy.vhr.model.JobLevel: java.util.Date getCreateDate()>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.IdentityHashMap$KeySpliterator: int characteristics()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: java.lang.String getHost()>
<org.apache.catalina.connector.Response: javax.servlet.ServletOutputStream getOutputStream()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getPath()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><sun.net.www.http.HttpCaptureOutputStream: void <init>(java.io.OutputStream,sun.net.www.http.HttpCapture)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setschool(java.lang.String)>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getSessionMutex()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession obtainSession()>
<java.util.TimSort: int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<sun.net.ApplicationProxy: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.Proxy$Type type()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.util.jar.JarInputStream: int read(byte[],int,int)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: int size()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.httpserver.Request$ReadStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.apache.catalina.util.SessionConfig: java.lang.String getSessionUriParamName(org.apache.catalina.Context)>-><org.apache.catalina.util.SessionConfig: java.lang.String getConfiguredSessionCookieName(org.apache.catalina.Context)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.PrintGridlinesRecord: java.lang.String toString()>
<java.io.PrintStream: void close()>-><java.io.PrintStream: void close()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: boolean isEmpty()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.HeaderParser: void <init>(java.lang.String)>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: void writeToCache(byte[],int,int)>-><java.lang.Integer: int intValue()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<sun.net.www.protocol.http.HttpURLConnection$9: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$9: java.io.InputStream run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: int getPort()>-><java.net.InetSocketAddress: int getPort()>
<synthetic.method.PositionMapperImpl: java.util.List getAllPositions()>-><synthetic.method.datatable.POSITION: java.lang.String getname()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addJobLevel(org.javaboy.vhr.model.JobLevel,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.JobLevelController: org.javaboy.vhr.model.RespBean addJobLevel(org.javaboy.vhr.model.JobLevel)>
<synthetic.method.RoleMapperImpl: java.util.List getAllRoles()>-><synthetic.method.datatable.ROLE: java.lang.Integer getid()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<javax.security.auth.SubjectDomainCombiner$5: java.lang.Object run()>-><javax.security.auth.SubjectDomainCombiner$5: java.lang.String run()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setid(java.lang.Integer)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: boolean startsWith(java.lang.String)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getExpected()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addSalary(org.javaboy.vhr.model.Salary,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<sun.net.www.http.HttpClient$1: java.lang.Void run()>-><java.net.InetSocketAddress: java.lang.String getHostString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setBeginContract(java.util.Date)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.io.FilePermissionCollection: java.util.Enumeration elements()>
<java.util.stream.Node$OfLong: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$2: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.net.URI: java.lang.String getPath()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>-><java.net.Proxy: java.net.Proxy$Type type()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><java.lang.String: int length()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Spliterators$IntArraySpliterator: int characteristics()>
<sun.net.ProgressMonitor: boolean shouldMeterInput(java.net.URL,java.lang.String)>-><sun.net.DefaultProgressMeteringPolicy: boolean shouldMeterInput(java.net.URL,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.MessageDigest: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>-><java.lang.Integer: java.lang.String toHexString(int)>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.io.IOException: void <init>(java.lang.String)>
<com.rabbitmq.client.impl.recovery.AutorecoveringChannel: boolean isOpen()>-><com.rabbitmq.client.impl.ShutdownNotifierComponent: boolean isOpen()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><org.javaboy.vhr.model.Department: void setDepPath(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Spliterators$IntArraySpliterator: int characteristics()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deletePositionsByIds(java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>-><org.springframework.context.support.AbstractRefreshableApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator$OfInt spliterator()>-><java.util.stream.Nodes$InternalNodeSpliterator$OfInt: void <init>(java.util.stream.Node$OfInt)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.io.StringReader: void mark(int)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: int length()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: java.lang.String findKey(int)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator spliterator()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.ArrayList$ArrayListSpliterator: java.util.Spliterator trySplit()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.PrintStream: void write(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int,int)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.util.Date getBeginDate()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator spliterator()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><java.lang.System: long currentTimeMillis()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>
<java.io.FilterOutputStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void close()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Policy: void setPolicy(javax.security.auth.Policy)>-><javax.security.auth.AuthPermission: void <init>(java.lang.String)>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.stream.Node$OfDouble: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: int characteristics()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: synthetic.method.datatable.EMPLOYEE getInstance()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.javaboy.vhr.controller.ChatController$$InterceptorProxy: java.util.List getAllHrs(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.security.util.HostnameChecker: boolean match(java.lang.String,java.security.Principal)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.HeaderParser: void <init>(java.lang.String)>-><sun.net.www.HeaderParser: void parse()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getAuth(java.lang.String,java.net.URL)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfaces(java.lang.Object)>-><org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfacesForClass(java.lang.Class)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getSpecialty()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.net.Socket: int getSoTimeout()>-><java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hpsf.Property: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$3: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>-><javax.security.auth.Policy$3: java.lang.Object run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setpensionbase(java.lang.Integer)>
<javax.net.ssl.SSLSocketFactory: void log(java.lang.String)>-><java.io.PrintStream: void println(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.lang.String,java.lang.String)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>-><javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.mapping.model.Property: java.lang.String toString()>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void ensureOpen()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.net.URL: int getDefaultPort()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.SocketImpl: int getLocalPort()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String getCurrentName()>-><com.fasterxml.jackson.core.filter.TokenFilterContext: java.lang.String getCurrentName()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$ArrayNode: java.util.Spliterator spliterator()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.util.context.Context0: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.net.Socket: void close()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: void begin(long)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: java.util.List getAllPositions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.lang.String: void <init>()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setEndContract(java.util.Date)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: void <init>()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void <init>()>
<synthetic.method.JobLevelMapperImpl: int insertSelective(org.javaboy.vhr.model.JobLevel)>-><synthetic.method.datatable.JOBLEVEL: synthetic.method.datatable.JOBLEVEL getInstance()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deletePositionById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: void begin(long)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: void <init>(byte[],int,int,java.lang.String)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: javax.servlet.ServletRequest getObject()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>
<java.util.stream.Nodes: java.util.stream.Node emptyNode(java.util.stream.StreamShape)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: boolean isEmpty()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationProvider: void setMessageSource(org.springframework.context.MessageSource)>
<java.util.GregorianCalendar: int computeFields(int,int)>-><java.util.SimpleTimeZone: int getOffset(long)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IntIteratorSpliterator: long estimateSize()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.IntPipeline$4$1: void accept(int)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setworkstate(java.lang.String)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getSchool()>
<java.io.PrintStream: void newLine()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>-><sun.net.www.protocol.http.HttpURLConnection$8: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Collections$SetFromMap: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.util.Set keySet()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.io.PrintStream: boolean checkError()>
<sun.security.ssl.Krb5Helper$1: sun.security.ssl.Krb5Proxy run()>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.MessageHeader: void reset()>-><sun.net.www.MessageHeader: void grow()>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: void ensureOpen()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><java.io.InputStream: void close()>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.SliceOps: long access$000(long,long)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.lang.String,java.lang.String)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$8: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<sun.net.www.MeteredStream: int read()>-><sun.net.httpserver.SSLStreams$InputStream: int read()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession()>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpServletRequest _getHttpServletRequest()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URLConnection: boolean getUseCaches()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.HeaderParser headerParser()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Socket: void checkAddress(java.net.InetAddress,java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$LongWrappingSpliterator: java.util.Spliterator trySplit()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteHrById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.HrController: org.javaboy.vhr.model.RespBean deleteHrById(java.lang.Integer)>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.net.URL getURL()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getworkid()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deletePositionsByIds(java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><com.rabbitmq.client.impl.recovery.AutorecoveringChannel: com.rabbitmq.client.AMQP$Confirm$SelectOk confirmSelect()>
<java.io.BufferedInputStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: java.lang.String toString()>
<synthetic.method.JobLevelMapperImpl: int insertSelective(org.javaboy.vhr.model.JobLevel)>-><synthetic.method.datatable.JOBLEVEL: void setcreatedate(java.util.Date)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator spliterator()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.WindowTwoRecord: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.io.PrintStream: void flush()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.BoundSheetRecord: java.lang.String toString()>
<org.apache.tomcat.util.buf.C2BConverter: boolean isUndeflow()>-><java.nio.Buffer: int position()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$IntArrayNode: java.util.Spliterator$OfPrimitive spliterator()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setnativeplace(java.lang.String)>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getbirthday()>
<java.io.FilterInputStream: int read()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.MeteredStream: void close()>-><java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getEngageForm()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>-><sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>-><java.lang.Object: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.lang.String,int)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader mapToMessageHeader(java.util.Map)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>-><sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.ReduceOps$4ReducingSink: void begin(long)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.http.ChunkedInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.HeaderParser headerParser()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator$OfDouble spliterator()>-><java.util.Spliterators: java.util.Spliterator$OfDouble emptyDoubleSpliterator()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><sun.security.action.GetPropertyAction: void <init>(java.lang.String)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: boolean supports(java.lang.Class)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void prepend(java.lang.String,java.lang.String)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.io.BufferedInputStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.Object: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.JavaType getContentType()>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection: int access$600()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int,int)>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><sun.net.www.MessageHeader: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String reducePath(java.lang.String)>
<java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<java.io.DataInputStream: char readChar()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean isArrayType()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.AbstractList: java.util.ListIterator listIterator()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
<java.util.concurrent.Executors$DelegatedExecutorService: void execute(java.lang.Runnable)>-><java.util.concurrent.Executors$DelegatedExecutorService: void execute(java.lang.Runnable)>
<java.io.FilterInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: int read()>
<java.util.ArraysParallelSortHelpers$FJObject$Merger: void compute()>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>-><java.io.StringReader: void mark(int)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHr(org.javaboy.vhr.model.Hr,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<synthetic.method.PositionMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Position)>-><org.javaboy.vhr.model.Position: java.lang.Boolean getEnabled()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.SignalType: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntIteratorSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteHrById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.ArrayList$ArrayListSpliterator: java.util.Spliterator trySplit()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.AbstractShortCircuitTask: java.lang.Object getLocalResult()>-><java.util.stream.SliceOps$SliceTask: java.lang.Object getEmptyResult()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.util.Formatter: void <init>(java.lang.Appendable,java.util.Locale)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.net.URL: int getDefaultPort()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.www.MessageHeader: void reset()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void setDaemon(boolean)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.FileInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.net.URLPermission: void init(java.lang.String)>-><java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.SimpleTimeZone: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession obtainSession()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: long estimateSize()>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: org.javaboy.vhr.model.RespBean login(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.LoginController: org.javaboy.vhr.model.RespBean login()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<synthetic.method.MailSendLogMapperImpl: java.lang.Integer insert(org.javaboy.vhr.model.MailSendLog)>-><org.javaboy.vhr.model.MailSendLog: java.lang.String getMsgId()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getworkid()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList: java.util.ListIterator listIterator()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void <init>(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteEmpByEid(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController: org.javaboy.vhr.model.RespBean deleteEmpByEid(java.lang.Integer)>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.http.HttpClient: void finished()>-><java.io.PrintStream: boolean checkError()>
<org.javaboy.vhr.controller.config.SystemConfigController$$InterceptorProxy: void <init>()>-><org.javaboy.vhr.controller.config.SystemConfigController: void <init>()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean importData(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController: org.javaboy.vhr.model.RespBean importData(org.springframework.web.multipart.MultipartFile)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>
<java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfInt: boolean tryAdvance(java.util.function.IntConsumer)>
<org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>-><org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addJobLevel(org.javaboy.vhr.model.JobLevel,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.TimSort: void mergeHi(int,int,int,int)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void setConnectTimeout(int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: javax.servlet.ServletResponse getObject()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletResponse getResponse()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.Permissions: void add(java.security.Permission)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><javax.net.ssl.DefaultSSLSocketFactory: void <init>(java.lang.Exception)>
<org.springframework.security.web.FilterInvocation: java.lang.String toString()>-><org.springframework.util.StringUtils: boolean isEmpty(java.lang.Object)>
<sun.nio.cs.StreamDecoder: boolean inReady()>-><sun.net.www.http.ChunkedInputStream: int available()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: void begin(long)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: void setTunnelState(sun.net.www.protocol.http.HttpURLConnection$TunnelState)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<org.javaboy.vhr.utils.POIUtils: java.util.List excel2Employee(org.springframework.web.multipart.MultipartFile,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>-><java.util.AbstractList: int indexOf(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.String: int length()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.URL: int getPort()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: java.security.Permission getPermission()>-><java.net.HttpURLConnection: java.security.Permission getPermission()>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.Streams$RangeIntSpliterator: long estimateSize()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$SpinedNodeBuilder: void begin(long)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.net.SocketOutputStream: void write(int)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.net.SocksSocketImpl: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String)>
<java.net.URL: java.lang.String toExternalForm()>-><java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: void verifyCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.javaboy.vhr.controller.LoginController: void verifyCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.FileInputStream: long skip(long)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.TreeMap$TreeMapSpliterator: long estimateSize()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setAlgorithm(java.lang.String)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.javaboy.vhr.controller.system.basic.PermissController getPermissController()>
<org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: boolean supports(java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>-><java.lang.String: void <init>(char[],int,int)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: int size()>
<java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.UndertowHeadersAdapter)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter: io.undertow.util.HeaderMap access$100(org.springframework.http.server.reactive.UndertowHeadersAdapter)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: void finer(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: long estimateSize()>
<org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>-><org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: void remove()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.HashMap$ValueSpliterator: int characteristics()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.net.URL: java.lang.String getProtocol()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.HttpURLConnection: boolean getInstanceFollowRedirects()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: long estimateSize()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.SimpleTimeZone: boolean equals(java.lang.Object)>-><java.util.SimpleTimeZone: boolean hasSameRules(java.util.TimeZone)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.DefaultColWidthRecord: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.javaboy.vhr.controller.ChatController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.javaboy.vhr.controller.ChatController getChatController()>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getMidsByRid(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PermissController: java.util.List getMidsByRid(java.lang.Integer)>
<sun.net.www.protocol.https.Handler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.https.Handler)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction: java.lang.Void run()>-><org.apache.catalina.connector.Response: void setContentType(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$ConcatSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setPosition(org.javaboy.vhr.model.Position)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.x509.RDN: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getschool()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: boolean isEmpty()>
<synthetic.method.JobLevelMapperImpl: int insertSelective(org.javaboy.vhr.model.JobLevel)>-><synthetic.method.datatable.JOBLEVEL: void settitlelevel(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.HashMap$ValueSpliterator: int characteristics()>
<org.apache.tomcat.util.buf.CharChunk: void append(char)>-><org.apache.tomcat.util.buf.CharChunk: void makeSpace(int)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<java.util.ArrayList$SubList$1: void add(java.lang.Object)>-><java.util.ArrayList$SubList$1: void checkForComodification()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setName(java.lang.String)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.charset.CoderResult: void throwException()>
<synthetic.method.RoleMapperImpl: int insert(org.javaboy.vhr.model.Role)>-><synthetic.method.datatable.ROLE: void setnamezh(java.lang.String)>
<sun.net.www.http.HttpClient: void <init>()>-><sun.net.NetworkClient: void <init>()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.io.DataInputStream: short readShort()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.javaboy.vhr.controller.ChatController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.String: int hashCode()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void start()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><javax.security.auth.Policy$2: void <init>(java.lang.String)>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$EmptyNode: long count()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.net.URI: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Hashtable: java.lang.String toString()>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>
<java.util.AbstractMap: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getSchool()>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.InetSocketAddress: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setEndContract(java.util.Date)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.NetworkClient: void setReadTimeout(int)>
<java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator spliterator()>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator$OfInt spliterator()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><java.io.FileInputStream: void close()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveStream: java.lang.Thread access$000()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.OffsetDateTime: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setWorkID(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><synthetic.method.datatable.HR: void settelephone(java.lang.String)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.apache.ibatis.parsing.XNode: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<sun.net.www.http.ChunkedOutputStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setUseCaches(boolean)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><org.apache.catalina.connector.Response$PrivilegedEncodeUrl: java.lang.Object run()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getNativePlace()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addPosition(org.javaboy.vhr.model.Position,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setidcard(java.lang.String)>
<javax.net.ssl.HttpsURLConnection: void <init>(java.net.URL)>-><java.net.HttpURLConnection: void <init>(java.net.URL)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setphone(java.lang.String)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><com.rabbitmq.client.impl.ChannelN: com.rabbitmq.client.AMQP$Confirm$SelectOk confirmSelect()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.util.MultiValueMapAdapter: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.InputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.PasswordRecord: java.lang.String toString()>
<sun.util.logging.PlatformLogger: void finest(java.lang.String)>-><sun.util.logging.PlatformLogger$JavaLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.io.DataOutputStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.lang.Math: long min(long,long)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.MeteredStream: int available()>
<java.io.PrintStream: void write(java.lang.String)>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<org.springframework.web.context.request.DestructionCallbackBindingListener: void <init>(java.lang.Runnable)>-><java.lang.Object: void <init>()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setId(java.lang.Integer)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.net.SocketImpl: java.lang.String toString()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.lang.StringBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>-><java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.FileInputStream: int read(byte[],int,int)>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.ObjectInputStream$BlockDataInputStream: long skip(long)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: long estimateSize()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator spliterator()>
<java.io.PrintStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.aop.support.NameMatchMethodPointcutAdvisor: void <init>(org.aopalliance.aop.Advice)>-><org.springframework.aop.support.NameMatchMethodPointcut: void <init>()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getContentType()>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.RefModeRecord: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.UnknownRecord: java.lang.String toString()>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><javax.security.auth.Policy$1: void <init>()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.SubList$1: boolean hasNext()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.String: char charAt(int)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: boolean hasNext()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.javaboy.vhr.controller.HrInfoController getHrInfoController()>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: int indexOf(int)>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getAttribute(java.lang.String,int)>-><javax.servlet.ServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<java.net.SocksSocketImpl: void <init>(java.net.Proxy)>-><java.net.PlainSocketImpl: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>-><java.util.Stack: java.lang.Object pop()>
<sun.net.www.MessageHeader: void parseHeader(java.io.InputStream)>-><sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<sun.net.www.protocol.http.HttpURLConnection: boolean usingProxy()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<java.util.Hashtable: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.https.Handler)>-><javax.net.ssl.HttpsURLConnection: void <init>(java.net.URL)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.NetworkClient$1: java.lang.Object run()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.TreeMap$KeySpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.aop.support.NameMatchMethodPointcut: org.springframework.aop.support.NameMatchMethodPointcut addMethodName(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.Parsed: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setaddress(java.lang.String)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.StreamOpFlag: boolean isPreserved(int)>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.http.PosterOutputStream: void close()>
<sun.net.www.MeteredStream: int read()>-><java.util.zip.ZipFile$ZipFileInputStream: int read()>
<sun.net.www.http.ChunkedInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: void ensureOpen()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.stream.Node$OfInt: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String)>-><sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><sun.net.NetworkClient$2: void <init>(sun.net.NetworkClient)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getnationid()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: void remove()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getAllMenus(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PermissController: java.util.List getAllMenus()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.net.URL: java.lang.String getHost()>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><javax.security.auth.Policy$3: void <init>(javax.security.auth.Policy,java.lang.String)>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.MeteredStream: int read()>-><java.io.FileInputStream: int read()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><org.javaboy.vhr.model.Hr: void setName(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: void forEachRemaining(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Salary getsalary()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getDepartmentId()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void begin(long)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.AbstractFunctionPtg: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.Instant: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.tomcat.util.buf.CharChunk: void <init>(int)>-><org.apache.tomcat.util.buf.CharChunk: void allocate(int,int)>
<java.util.stream.SliceOps$1: java.util.Spliterator unorderedSkipLimitSpliterator(java.util.Spliterator,long,long,long)>-><java.lang.Math: long min(long,long)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.security.web.FilterInvocation: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.net.HttpConnectSocketImpl$1: java.lang.Object run()>-><java.net.HttpConnectSocketImpl$1: java.lang.Void run()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getjoblevelid()>
<org.springframework.web.context.request.AbstractRequestAttributesScope: java.lang.Object get(java.lang.String,org.springframework.beans.factory.ObjectFactory)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getAttribute(java.lang.String,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.MulBlankRecord: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>
<reactor.core.Exceptions: java.lang.Throwable addSuppressed(java.lang.Throwable,java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.net.SocketPermissionCollection: java.util.Enumeration elements()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: int characteristics()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.AbstractPipeline: int getStreamAndOpFlags()>
<sun.net.www.http.HttpClient: java.lang.String getRequestMethod()>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeDynamic(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.Socket: java.io.InputStream getInputStream()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.HttpClient: void closeServer()>
<synthetic.method.JobLevelMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.JobLevel)>-><org.javaboy.vhr.model.JobLevel: java.lang.String getTitleLevel()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteHrById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.MessageHeader: void prepend(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void grow()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<java.io.DataOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: java.lang.String toString()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><java.util.LinkedList: java.lang.Object poll()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.Buffer: java.nio.Buffer position(int)>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void end()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void flush(boolean)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator spliterator()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.net.ResponseCache: java.net.ResponseCache getDefault()>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: java.util.List getAllSalaries(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.javaboy.vhr.controller.ChatController$$InterceptorProxy: java.util.List getAllHrs(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.util.Map$Entry next()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: void <init>(org.springframework.http.server.reactive.UndertowHeadersAdapter,io.undertow.util.HttpString)>
<ch.qos.logback.classic.util.ContextInitializer: void configureByResource(java.net.URL)>-><java.lang.String: boolean endsWith(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient$1: java.lang.Void run()>-><java.net.InetSocketAddress: int getPort()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setwedlock(java.lang.String)>
<org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteEmpByEid(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: void <init>(sun.net.www.protocol.http.HttpCallerInfo)>
<reactor.core.publisher.Operators: void onDiscardQueueWithClear(java.util.Queue,reactor.util.context.Context,java.util.function.Function)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.javaboy.vhr.controller.system.basic.JobLevelController getJobLevelController()>
<javax.security.auth.SubjectDomainCombiner$3: java.security.PermissionCollection run()>-><javax.security.auth.Policy: javax.security.auth.Policy getPolicy()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<synthetic.method.PositionMapperImpl: java.util.List getAllPositions()>-><synthetic.method.datatable.POSITION: java.util.Date getcreatedate()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.http.HttpURLConnection$7: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><java.io.BufferedInputStream: void close()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Spliterators$IteratorSpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.lang.Object: java.lang.Class getClass()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.net.httpserver.Request$ReadStream: void reset()>-><java.nio.Buffer: java.nio.Buffer flip()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void setAllSalary(java.lang.Integer)>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.OutputStream: void write(byte[],int,int)>
<sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfaces(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.ObjectOutputStream$BlockDataOutputStream: void close()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.Vector: void addElement(java.lang.Object)>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><org.javaboy.vhr.model.Hr: java.lang.String getAddress()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>-><java.lang.String: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: void verifyCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.io.BufferedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getAddress()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getEmail()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteRoleById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PermissController: org.javaboy.vhr.model.RespBean deleteRoleById(java.lang.Integer)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><sun.net.www.protocol.https.Handler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: void begin(long)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: boolean hasNext()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setConversionTime(java.util.Date)>
<java.io.FilterInputStream: void mark(int)>-><java.io.BufferedInputStream: void mark(int)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.WSBoolRecord: java.lang.String toString()>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.catalina.connector.Response: boolean isCommitted()>
<sun.util.calendar.Era: long getSince(java.util.TimeZone)>-><java.util.SimpleTimeZone: int getOffset(long)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getbirthday()>
<synthetic.method.PositionMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Position)>-><synthetic.method.datatable.POSITION: void setname(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.lang.String: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getnationid()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: void cancel()>-><java.util.stream.AbstractShortCircuitTask: void cancel()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>-><sun.net.www.HeaderParser: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.MeteredStream: void close()>-><java.io.InputStream: void close()>
<java.io.InputStream: int read(byte[])>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><synthetic.method.datatable.HR: synthetic.method.datatable.HR getInstance()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void setName(java.lang.String)>
<java.time.format.DateTimeFormatterBuilder$ZoneTextPrinterParser: java.time.format.DateTimeFormatterBuilder$PrefixTree getTree(java.time.format.DateTimeParseContext)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.MemAreaPtg: java.lang.String toString()>
<org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllJobLevels(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: void <init>(java.util.Spliterator,long,long,long,long)>-><java.util.Spliterator: boolean hasCharacteristics(int)>
<sun.net.www.ParseUtil: void appendFragment(java.lang.StringBuffer,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.String: java.lang.String valueOf(char[])>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getNationId()>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.FindOps$FindSink: void accept(java.lang.Object)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Float getPensionPer()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setEndContract(java.util.Date)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>-><java.net.URL: java.lang.String getFile()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Vector$VectorSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: int characteristics()>
<java.util.zip.InflaterInputStream: void close()>-><java.io.InputStream: void close()>
<org.springframework.security.authentication.dao.DaoAuthenticationProvider: void doAfterPropertiesSet()>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.Vector$ListItr: void add(java.lang.Object)>-><java.util.Vector$Itr: void checkForComodification()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: boolean isEmpty()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator spliterator()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteSalaryById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>-><javax.net.ssl.SSLException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: void privilegedOpenServer(java.net.InetSocketAddress)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setengageform(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: java.lang.String trim()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int indexOf(java.lang.String)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressSource: void beginTracking()>
<sun.net.NetworkClient$1: java.lang.Object run()>-><sun.net.NetworkClient$1: java.lang.Void run()>
<org.apache.catalina.connector.OutputBuffer: int transfer(java.lang.String,int,int,java.nio.CharBuffer)>-><org.apache.catalina.connector.OutputBuffer: void toReadMode(java.nio.Buffer)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setId(java.lang.Integer)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void forEach(java.lang.Object)>
<org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int getKeyHash()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>-><java.lang.Integer: void <init>(int)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.ByteArrayInputStream: long skip(long)>
<org.apache.poi.util.LittleEndianOutputStream: void writeUInt(long)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String access$100(sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<org.apache.catalina.connector.ResponseFacade: javax.servlet.ServletOutputStream getOutputStream()>-><org.apache.catalina.connector.Response: void setSuspended(boolean)>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><java.io.InputStream: int read(byte[])>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.MeteredStream: void mark(int)>-><java.io.FilterInputStream: void mark(int)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getJobLevelId()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber: boolean isEmpty()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: boolean isEmpty()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: long estimateSize()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.net.Proxy: boolean equals(java.lang.Object)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode: java.lang.String toString()>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode: long count()>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getphone()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.BookBoolRecord: java.lang.String toString()>
<synthetic.method.NationMapperImpl: java.util.List getAllNations()>-><synthetic.method.datatable.NATION: synthetic.method.datatable.NATION getInstance()>
<java.util.WeakHashMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.SliceOps: long access$300(long,long,long)>-><java.util.stream.SliceOps: long calcSize(long,long,long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateEmp(org.javaboy.vhr.model.Employee,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator spliterator()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.http.KeepAliveCleanerEntry: void <init>(sun.net.www.http.KeepAliveStream,sun.net.www.http.HttpClient)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.DigestAuthentication: boolean supportsPreemptiveAuthorization()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: com.rabbitmq.client.AMQP$Confirm$SelectOk confirmSelect()>-><com.rabbitmq.client.impl.recovery.AutorecoveringChannel: com.rabbitmq.client.AMQP$Confirm$SelectOk confirmSelect()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.util.Date getConversionTime()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addDep(org.javaboy.vhr.model.Department,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isConcrete()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.CharBuffer: int arrayOffset()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes: java.util.stream.Node$Builder$OfInt intBuilder(long)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void setPensionBase(java.lang.Integer)>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.io.DataInputStream: int read(byte[])>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.stream.Nodes$ConcNode: java.util.Spliterator spliterator()>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void <init>(java.util.stream.Node)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$IntArrayNode: long count()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
<sun.util.locale.LocaleUtils: boolean isEmpty(java.util.Set)>-><java.util.AbstractCollection: boolean isEmpty()>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.ReduceOps$5ReducingSink: void accept(int)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Collections$2: long estimateSize()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><sun.net.www.http.HttpClient$1: java.lang.Object run()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setworkid(java.lang.String)>
<org.javaboy.vhr.controller.ChatController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>
<sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<org.springframework.util.MultiValueMapAdapter: java.util.List remove(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.Object remove(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean isAuthorizationStale(java.lang.String)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.ReduceOps$3ReducingSink: void begin(long)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><java.lang.Thread: boolean isAlive()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>-><sun.net.www.MessageHeader: void print(java.io.PrintStream)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getMidsByRid(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.io.DataInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfRef: void forEach(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.AbstractPipeline: java.util.Spliterator sourceSpliterator(int)>-><java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$EmptyNode: void forEach(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void <init>(java.util.stream.SliceOps$1,java.util.stream.Sink)>-><java.util.stream.Sink$ChainedReference: void <init>(java.util.stream.Sink)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setNotWorkDate(java.util.Date)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: java.util.List getAllPositions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: long estimateSize()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Sink: void begin(long)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: long estimateSize()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setJobLevel(org.javaboy.vhr.model.JobLevel)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getaddress()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.URL: void <init>(java.lang.String)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>-><java.io.StringReader: void reset()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.MessageHeader: void set(int,java.lang.String,java.lang.String)>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<synthetic.method.JobLevelMapperImpl: int deleteByPrimaryKey(java.lang.Integer)>-><synthetic.method.datatable.JOBLEVEL: java.lang.Integer[] getid()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: long estimateSize()>
<sun.net.www.http.HttpClient: void finished()>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<synthetic.method.JobLevelMapperImpl: java.util.List getAllJobLevels()>-><org.javaboy.vhr.model.JobLevel: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.io.DataInputStream: int read(byte[])>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<sun.net.www.MessageHeader: void remove(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getnationid()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL,java.lang.String,int)>
<sun.net.www.protocol.http.AuthenticationHeader$SchemeMapValue: void <init>(sun.net.www.HeaderParser,java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$LongArrayNode: long count()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.net.URL)>-><java.net.URL: java.lang.String getFile()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deletePositionById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getBonus()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Spliterators$EmptySpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator spliterator()>
<synthetic.method.MenuRoleMapperImpl: java.lang.Integer insertRecord(java.lang.Integer,java.lang.Integer[])>-><synthetic.method.datatable.MENUROLE: void setrid(java.lang.Integer)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.util.MultiValueMapAdapter: java.util.Collection values()>-><java.util.Collections$UnmodifiableMap: java.util.Collection values()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.PrintStream: void flush()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$DoubleArrayNode: java.util.Spliterator$OfPrimitive spliterator()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<java.io.FilterInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: int available()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$DoubleArrayNode: java.util.Spliterator spliterator()>
<org.springframework.web.context.request.ServletRequestAttributes: void setAttribute(java.lang.String,java.lang.Object,int)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.IdentityHashMap$EntrySpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><io.netty.util.concurrent.SingleThreadEventExecutor: boolean offerTask(java.lang.Runnable)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory: void destroy()>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: void destroy()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.SocketImpl: java.net.Socket getSocket()>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.SocketImpl: java.net.InetAddress getInetAddress()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.MeteredStream: long skip(long)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getemail()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$OfLong: void forEach(java.util.function.Consumer)>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.MeteredStream: int available()>-><java.util.zip.ZipFile$ZipFileInputStream: int available()>
<org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><java.lang.Integer: java.lang.String toHexString(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntArraySpliterator: java.util.Spliterator trySplit()>
<org.springframework.web.context.request.ServletWebRequest: java.lang.String getDescription(boolean)>-><javax.servlet.ServletRequestWrapper: java.lang.String getRemoteAddr()>
<java.io.DataInputStream: int read(byte[])>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: long estimateSize()>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.HttpURLConnection$2: java.lang.Object run()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean hasCharacteristics(int)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void endAuthRequest(java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setbasicsalary(java.lang.Integer)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.UseSelFSRecord: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<sun.net.www.http.ChunkedOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush(boolean)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: java.util.Spliterator trySplit()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String unquote(java.lang.String)>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addDep(org.javaboy.vhr.model.Department,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.Spliterator trySplit()>
<java.util.AbstractList: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.net.InetSocketAddress: void <init>(int,java.lang.String)>-><java.net.SocketAddress: void <init>()>
<sun.net.www.http.HttpClient: void finished()>-><sun.net.www.http.HttpClient: void closeServer()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><com.rabbitmq.client.impl.recovery.AutorecoveringChannel: com.rabbitmq.client.AMQP$Tx$SelectOk txSelect()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.HttpClient: int getKeepAliveTimeout()>
<java.util.LinkedList$ListItr: void add(java.lang.Object)>-><java.util.LinkedList$ListItr: void checkForComodification()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentSkipListMap$CSLMSpliterator: long estimateSize()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setIdCard(java.lang.String)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.net.URL: java.lang.String getProtocol()>
<org.javaboy.vhr.controller.LoginController: void verifyCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.catalina.connector.ResponseFacade: javax.servlet.ServletOutputStream getOutputStream()>
<org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>-><java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.ByteArrayOutputStream: void close()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: java.util.Spliterator trySplit()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: java.lang.Integer getlunchsalary()>
<sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><sun.net.www.http.PosterOutputStream: void close()>
<synthetic.method.MailSendLogMapperImpl: java.lang.Integer insert(org.javaboy.vhr.model.MailSendLog)>-><org.javaboy.vhr.model.MailSendLog: java.util.Date getCreateTime()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$WeakHashMapSpliterator: long estimateSize()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.MonthDay: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setname(java.lang.String)>
<sun.net.www.ParseUtil: void checkPath(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: char charAt(int)>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: java.util.Date getcreatedate()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxCreate$DropAsyncSink: java.lang.String toString()>
<java.io.DataInputStream: char readChar()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory$ChannelCachingConnectionProxy: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.util.Base64: java.util.Base64$Encoder getEncoder()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$TreeMapSpliterator: long estimateSize()>
<org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.lang.Class: java.lang.String getName()>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: java.util.List getAllSalaries(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setWorkAge(java.lang.Integer)>
<org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><java.io.BufferedInputStream: void close()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.FindOps$FindSink: void accept(java.lang.Object)>
<java.util.Collections$SetFromMap: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean isEmpty()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><java.util.BitSet: boolean get(int)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.Vector: int size()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.SubList$1: java.lang.Object next()>
<synthetic.method.JobLevelMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.JobLevel)>-><synthetic.method.datatable.JOBLEVEL: java.lang.Integer[] getid()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: java.lang.String toString()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><synthetic.method.datatable.HR: java.lang.String getname()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.convert.CustomConversions$StoreConversions: java.lang.String toString()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$DoubleArrayNode: java.util.Spliterator spliterator()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.OutputStream,long)>-><java.io.FilterOutputStream: void <init>(java.io.OutputStream)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.BufferedInputStream: void close()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.JobLevel getjoblevel()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.Object next()>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Node$OfInt: void forEach(java.util.function.Consumer)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHr(org.javaboy.vhr.model.Hr,org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.apache.tomcat.util.buf.CharChunk: void makeSpace(int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setBeginDate(java.util.Date)>
<org.springframework.aop.support.NameMatchMethodPointcut: void <init>()>-><org.springframework.aop.support.StaticMethodMatcherPointcut: void <init>()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler: java.lang.String toString()>
<sun.net.www.MessageHeader: int getKey(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Vector$VectorSpliterator: java.util.Spliterator trySplit()>
<reactor.core.publisher.Operators: void onDiscard(java.lang.Object,reactor.util.context.Context)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Nodes$IntArrayNode: long count()>
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setwedlock(java.lang.String)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>-><java.lang.String: int hashCode()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: boolean startsWith(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.TimSort: int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: boolean authQop()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>-><sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.net.URL)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.InetSocketAddress: java.lang.String getHostName()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setaccumulationfundbase(java.lang.Integer)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.ArrayDeque: void addFirst(java.lang.Object)>
<synthetic.method.JobLevelMapperImpl: java.lang.Integer deleteJobLevelsByIds(java.lang.Integer[])>-><synthetic.method.datatable.JOBLEVEL: synthetic.method.datatable.JOBLEVEL getInstance()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void close()>-><java.nio.Buffer: int remaining()>
<java.io.DataInputStream: short readShort()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: void <init>(sun.net.www.protocol.http.HttpCallerInfo)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateMenuRole(java.lang.Integer,java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.KeepAliveStream: void setClosed()>
<java.io.PrintStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.HrRoleMapperImpl: java.lang.Integer addRole(java.lang.Integer,java.lang.Integer[])>-><synthetic.method.datatable.HRROLE: synthetic.method.datatable.HRROLE getInstance()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.lang.Math: long min(long,long)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.WrappedByteBuf: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<java.lang.Object: java.lang.String toString()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.InputStream: int read(byte[],int,int)>
<org.springframework.aop.framework.ProxyFactory: void <init>(java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport: void setTarget(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.ObjectOutputStream$BlockDataOutputStream: void write(int)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.stream.Nodes$LongArrayNode: void forEach(java.util.function.LongConsumer)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: void accept(long)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: long estimateSize()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Thread: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader mapToMessageHeader(java.util.Map)>-><sun.net.www.MessageHeader: void <init>()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.util.JsonParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>-><com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.MeteredStream: void close()>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><java.nio.Buffer: int remaining()>
<java.beans.FeatureDescriptor: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<java.text.ChoiceFormat: boolean equals(java.lang.Object)>-><java.util.Arrays: boolean equals(double[],double[])>
<sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>-><sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>
<java.util.Properties: java.lang.String getProperty(java.lang.String)>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.net.CookieHandler: java.net.CookieHandler getDefault()>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.FileInputStream: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.Long: long parseLong(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.ArrayList$Itr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: void appendFragment(java.lang.StringBuffer,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>-><java.net.InetSocketAddress: java.lang.String checkHost(java.lang.String)>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteJobLevelsByIds(java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>
<com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>-><com.fasterxml.jackson.core.util.JsonParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setDepartmentId(java.lang.Integer)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.text.DateFormat: java.lang.String format(java.util.Date)>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: java.lang.Integer getallsalary()>
<java.util.Vector$ListItr: void add(java.lang.Object)>-><java.util.Vector: void add(int,java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>-><java.lang.String: int length()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.Integer: java.lang.String toString(int)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.AbstractMap: int hashCode()>-><java.lang.Object: int hashCode()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.lang.Integer maxWorkID()>-><synthetic.method.datatable.EMPLOYEE: synthetic.method.datatable.EMPLOYEE getInstance()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.ByteArrayOutputStream: void write(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><synthetic.method.datatable.HR: java.lang.String getusername()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.HttpConnectSocketImpl: void doTunneling(java.net.HttpURLConnection)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.javaboy.vhr.model.Nation: void setName(java.lang.String)>-><java.lang.String: java.lang.String trim()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.GutsRecord: java.lang.String toString()>
<java.io.DataOutputStream: void writeByte(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<java.io.DataOutputStream: void writeShort(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNonce(java.lang.String)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setbegindate(java.util.Date)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>-><sun.net.www.protocol.http.AuthCacheValue: void <init>()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$5: java.lang.String run()>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isJavaLangObject()>
<sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URL: int getDefaultPort()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.Spliterators$EmptySpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.InputStream)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllNations(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.text.AttributeEntry: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>
<java.util.stream.AbstractPipeline: java.util.stream.Sink wrapSink(java.util.stream.Sink)>-><java.util.stream.SliceOps$1: java.util.stream.Sink opWrapSink(int,java.util.stream.Sink)>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.javaboy.vhr.controller.salary.SobConfigController getSobConfigController()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator spliterator()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MeteredStream: void reset()>
<org.springframework.amqp.rabbit.core.RabbitTemplate: java.lang.Object doExecute(org.springframework.amqp.rabbit.core.ChannelCallback,org.springframework.amqp.rabbit.connection.ConnectionFactory)>-><org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>
<org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: javax.servlet.http.HttpSession getObject()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><org.apache.tomcat.util.http.parser.HttpParser: boolean isToken(int)>
<org.apache.catalina.connector.Response: void setSuspended(boolean)>-><org.apache.catalina.connector.OutputBuffer: void setSuspended(boolean)>
<java.lang.Object: java.lang.String toString()>-><java.util.SimpleTimeZone: int hashCode()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getMethod()>
<org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(org.springframework.security.core.GrantedAuthority,org.springframework.security.core.GrantedAuthority)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String getAuthority()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: java.util.List getAllSalaries(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.salary.SalaryController: java.util.List getAllSalaries()>
<java.net.URLPermission: void <init>(java.lang.String,java.lang.String)>-><java.security.Permission: void <init>(java.lang.String)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteJobLevelById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setPoliticId(java.lang.Integer)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.String: java.lang.String toLowerCase()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<sun.net.www.MeteredStream: int available()>-><com.rabbitmq.client.impl.TruncatedInputStream: int available()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.Spliterators$IntArraySpliterator: void forEachRemaining(java.lang.Object)>
<sun.net.www.http.KeepAliveCache$1: void <init>(sun.net.www.http.KeepAliveCache,sun.net.www.http.KeepAliveCache)>-><java.lang.Object: void <init>()>
<java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: int characteristics()>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><java.lang.Throwable: java.lang.String getMessage()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: boolean authQop()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: void forEach(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber: boolean isEmpty()>
<sun.net.www.MessageHeader: java.lang.String getHeaderNamesInList()>-><java.util.StringJoiner: void <init>(java.lang.CharSequence)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>
<java.util.stream.Sink$ChainedReference: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<sun.net.www.MeteredStream: void justRead(long)>-><sun.net.www.MeteredStream: void close()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setId(java.lang.Integer)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$5$1: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.BufferedInputStream: void reset()>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.AbstractShortCircuitTask: java.lang.Object getLocalResult()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.KeepAliveStream: void reset()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.BufferedInputStream: long skip(long)>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getUserInfo()>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.MeteredStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.SpinedBuffer$1Splitr: int characteristics()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.NetworkClient: void setReadTimeout(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.HashMap$HashMapSpliterator: long estimateSize()>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.web.FilterInvocation: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.ArrayList$ArrayListSpliterator: long estimateSize()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.security.auth.Policy$2: javax.security.auth.Policy run()>-><java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveCleanerEntry: sun.net.www.http.HttpClient getHttpClient()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.ObjectInputStream$BlockDataInputStream: int read(byte[],int,int)>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map$Entry)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$CSLMSpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$ArrayNode: java.util.Spliterator spliterator()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)>-><org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.OutputStream,long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.net.SocketInputStream: void close()>
<java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setNativePlace(java.lang.String)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.Vector: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator spliterator()>
<java.net.URI: int join(char[],int[])>-><java.lang.InternalError: void <init>()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(sun.net.www.protocol.http.HttpCallerInfo,java.lang.String)>
<java.util.stream.Nodes$EmptyNode$OfRef: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode: void forEach(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.Buffer: int position()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.security.web.header.Header: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getPath()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.springframework.aop.framework.JdkDynamicAopProxy: java.lang.Object getProxy()>-><org.springframework.aop.framework.JdkDynamicAopProxy: java.lang.Object getProxy(java.lang.ClassLoader)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createProxy(com.rabbitmq.client.Channel,boolean)>-><java.util.concurrent.atomic.AtomicBoolean: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.util.Map$Entry)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setWedlock(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$IntArrayNode: void forEach(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: long estimateSize()>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.nio.Buffer: java.nio.Buffer reset()>-><java.nio.InvalidMarkException: void <init>()>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.Nodes$IntArrayNode: long count()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.impl.AMQChannel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void connect()>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.AbstractTask: boolean isLeaf()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.http.ResponseEntity exportData(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.aop.support.StaticMethodMatcherPointcut: void <init>()>-><org.springframework.aop.support.StaticMethodMatcher: void <init>()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.CharChunk: void <init>(int)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$EmptyNode$OfRef: java.util.Spliterator spliterator()>
<org.apache.catalina.connector.ResponseFacade: boolean isFinished()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getMidsByRid(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: boolean available()>-><java.net.Socket: java.io.InputStream getInputStream()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$1Splitr: java.util.Spliterator trySplit()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><synthetic.method.datatable.DEPARTMENT: java.lang.Integer getid()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.net.URL,java.net.PasswordAuthentication)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><sun.security.action.GetPropertyAction: void <init>(java.lang.String)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.ScalarConstantPtg: java.lang.String toString()>
<java.net.Proxy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void mark(int)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.ArrayList$ArrayListSpliterator: int characteristics()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node$OfLong: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.socket.handler.WebSocketHandlerDecorator: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: int characteristics()>
<java.io.DataOutputStream: void writeInt(int)>-><java.io.PrintStream: void write(int)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean importData(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$DoubleArraySpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>-><java.lang.Integer: void <init>(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<synthetic.method.RoleMapperImpl: java.util.List getAllRoles()>-><org.javaboy.vhr.model.Role: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.io.StringReader: void reset()>
<java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.httpserver.Request$ReadStream: int read(byte[],int,int)>
<java.io.PrintWriter: void close()>-><org.apache.catalina.connector.OutputBuffer: void close()>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.StringBuffer: void <init>()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespPageBean getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<sun.net.www.MessageHeader: void grow()>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.io.FilterInputStream: void close()>-><java.io.InputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.RefErrorPtg: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateEmployeeSalaryById(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Boolean run()>-><sun.net.www.protocol.http.HttpURLConnection: boolean access$300(sun.net.www.protocol.http.HttpURLConnection,java.lang.String,int,java.net.URL)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.net.URL: java.lang.String getHost()>
<java.lang.Object: java.lang.String toString()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteDepById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: java.net.InetAddress getInetAddress()>-><java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$2: long estimateSize()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$LongArraySpliterator: long estimateSize()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: boolean isOpen()>-><com.rabbitmq.client.impl.ShutdownNotifierComponent: boolean isOpen()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHr(org.javaboy.vhr.model.Hr,org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllDepartments(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setNation(org.javaboy.vhr.model.Nation)>
<java.util.Calendar: boolean equals(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><org.javaboy.vhr.model.Hr: void setPhone(java.lang.String)>
<org.javaboy.vhr.controller.config.SystemConfigController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Node$OfDouble: void forEach(java.util.function.Consumer)>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.net.SocketOutputStream: void write(byte[],int,int)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><sun.net.www.protocol.http.HttpURLConnection$11: java.lang.Object run()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.NetworkClient: int getReadTimeout()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.TreeMap$ValueSpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.lang.StringBuffer: void <init>(int)>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getAllSalary()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.io.PrintStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<com.rabbitmq.client.impl.ValueWriter: void writeTable(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.InterfaceHdrRecord: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$DoubleArrayNode: java.util.Spliterator spliterator()>
<com.fasterxml.jackson.databind.JsonMappingException: void <init>(java.io.Closeable,java.lang.String,java.lang.Throwable)>-><com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.InputStream,java.net.CacheRequest)>-><java.io.FilterInputStream: void <init>(java.io.InputStream)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.io.PrintStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void close()>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addDep(org.javaboy.vhr.model.Department,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Politicsstatus getpoliticsstatus()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.https.Handler)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler,javax.net.ssl.HttpsURLConnection)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.URL: java.lang.String getHost()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<sun.net.www.MeteredStream: void close()>-><java.net.SocketInputStream: void close()>
<org.csource.fastdfs.ProtoCommon: org.csource.fastdfs.ProtoCommon$RecvPackageInfo recvPackage(java.io.InputStream,byte,long)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.javaboy.vhr.controller.config.SystemConfigController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.String: java.lang.String toString()>
<reactor.core.publisher.Operators: void onErrorDropped(java.lang.Throwable,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void reset()>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer position(int)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: int characteristics()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><sun.net.www.protocol.http.AuthCacheValue: void <init>()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: int characteristics()>
<java.io.PrintStream: void write(java.lang.String)>-><java.io.PrintStream: void flush()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: int size()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><java.io.FileInputStream: int read(byte[],int,int)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: boolean isUnresolved()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<synthetic.method.MenuMapperImpl: java.util.List getAllMenus()>-><synthetic.method.datatable.MENU: synthetic.method.datatable.MENU getInstance()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$1: boolean hasNext()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.ByteArrayInputStream: int read(byte[],int,int)>
<java.lang.Object: java.lang.String toString()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication$1: java.lang.Boolean run()>-><sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: void registerDestructionCallback(java.lang.String,java.lang.Runnable,int)>-><org.springframework.web.context.request.AbstractRequestAttributes: void registerRequestDestructionCallback(java.lang.String,java.lang.Runnable)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.font.EAttribute: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: char charAt(int)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.nio.Buffer: boolean hasRemaining()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setPoliticsstatus(org.javaboy.vhr.model.Politicsstatus)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: long estimateSize()>
<sun.net.www.MeteredStream: void justRead(long)>-><sun.net.ProgressSource: void updateProgress(long,long)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AllPermissionCollection: java.util.Enumeration elements()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.IdentityHashMap$EntrySpliterator: int characteristics()>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><java.io.FileInputStream: void close()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: void verifyCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$IntArrayNode: long count()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean)>
<java.util.stream.Nodes$DoubleArrayNode: void forEach(java.util.function.DoubleConsumer)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: void accept(double)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.lang.Integer addEmps(java.util.List)>-><java.util.ArrayList: java.lang.Object get(int)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.io.StringReader: int read()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$LongWrappingSpliterator: java.util.Spliterator trySplit()>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.RefreshAllRecord: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: long estimateSize()>
<sun.net.ProgressEvent: void <init>(sun.net.ProgressSource,java.net.URL,java.lang.String,java.lang.String,sun.net.ProgressSource$State,long,long)>-><java.util.EventObject: void <init>(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.httpserver.SSLStreams$InputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String)>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void setLunchSalary(java.lang.Integer)>
<org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.AbstractPipeline: int getStreamAndOpFlags()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.io.StringReader: void mark(int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.HttpURLConnection$TunnelState tunnelState()>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object,java.lang.Throwable)>-><org.apache.juli.logging.DirectJDKLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.HttpConnectSocketImpl: int getLocalPort()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.JapaneseImperialCalendar: int computeFields(int,int)>-><java.util.SimpleTimeZone: int getOffset(long)>
<javax.security.auth.SubjectDomainCombiner$5: void <init>(java.security.ProtectionDomain)>-><java.lang.Object: void <init>()>
<java.security.ProtectionDomain: boolean implies(java.security.Permission)>-><java.security.BasicPermissionCollection: boolean implies(java.security.Permission)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.InputStream: int read(byte[],int,int)>
<java.net.ResponseCache: java.net.ResponseCache getDefault()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<sun.net.www.MeteredStream: int read()>-><sun.net.httpserver.Request$ReadStream: int read()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getTrafficSalary()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setBirthday(java.util.Date)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><java.net.URL: java.lang.String getProtocol()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Department getdepartment()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Vector$VectorSpliterator: long estimateSize()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>-><java.lang.Enum: int hashCode()>
<synthetic.method.RoleMapperImpl: int insert(org.javaboy.vhr.model.Role)>-><org.javaboy.vhr.model.Role: java.lang.String getName()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.security.action.GetIntegerAction: void <init>(java.lang.String,int)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<synthetic.method.MailSendLogMapperImpl: java.lang.Integer insert(org.javaboy.vhr.model.MailSendLog)>-><org.javaboy.vhr.model.MailSendLog: java.util.Date getTryTime()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>-><java.util.ArrayDeque: void addFirst(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>-><sun.net.www.http.ChunkedOutputStream: void reset()>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.lang.Enum: int ordinal()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<java.util.PropertyPermissionCollection: boolean implies(java.security.Permission)>-><java.lang.String: int length()>
<sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>-><sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllDepartments(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><synthetic.method.datatable.HR: java.lang.String getaddress()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Boolean: boolean booleanValue()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addRole(org.javaboy.vhr.model.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><sun.security.util.HostnameChecker: boolean isMatched(java.lang.String,java.lang.String)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getRef()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>-><sun.net.www.http.HttpClient: void closeServer()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: void <init>()>-><org.javaboy.vhr.controller.salary.SalaryController: void <init>()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getProgress()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.util.TokenBufferReadContext: void <init>(com.fasterxml.jackson.core.JsonStreamContext,com.fasterxml.jackson.core.JsonLocation)>-><com.fasterxml.jackson.core.filter.TokenFilterContext: java.lang.String getCurrentName()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.MonoOnAssembly: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean importData(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Node$OfDouble: void forEach(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator spliterator()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.javaboy.vhr.controller.LoginController getLoginController()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: int characteristics()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction: java.lang.Object run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Vector: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.SpinedBuffer$OfDouble$1Splitr: boolean tryAdvance(java.util.function.DoubleConsumer)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Object run()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.SupBookRecord: java.lang.String toString()>
<sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>-><java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.lang.AssertionError: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.ExtendedFormatRecord: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.lettuce.core.event.metrics.CommandLatencyEvent: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.HttpURLConnection$TunnelState tunnelState()>
<sun.net.www.protocol.http.HttpURLConnection$9: java.io.InputStream run()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream access$200(sun.net.www.protocol.http.HttpURLConnection)>
<synthetic.method.PoliticsstatusMapperImpl: java.util.List getAllPoliticsstatus()>-><org.javaboy.vhr.model.Politicsstatus: void setId(java.lang.Integer)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.StringBuilder: void <init>()>
<java.io.InputStream: long skip(long)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getNationId()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.lang.Boolean: boolean booleanValue()>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.Nodes$LongArrayNode: void forEach(java.util.function.LongConsumer)>-><java.util.stream.Sink: void accept(long)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>
<sun.net.www.HeaderParser: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setGender(java.lang.String)>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteJobLevelsByIds(java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><java.io.FileInputStream: void close()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.Duration: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$LongArraySpliterator: java.util.Spliterator trySplit()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setPoliticsstatus(org.javaboy.vhr.model.Politicsstatus)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.BufferedInputStream: int available()>
<org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>-><java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: java.lang.Thread currentThread()>
<java.lang.Object: java.lang.String toString()>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.MeteredStream: void close()>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>-><com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] optimize(java.security.ProtectionDomain[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrUserface(org.springframework.web.multipart.MultipartFile,java.lang.Integer,org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.HrInfoController: org.javaboy.vhr.model.RespBean updateHrUserface(org.springframework.web.multipart.MultipartFile,java.lang.Integer,org.springframework.security.core.Authentication)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Node: java.util.stream.Node getChild(int)>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsWithOutChildren()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.lang.String: int length()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setworkage(java.lang.Integer)>
<sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>-><javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$EmptySpliterator: java.util.Spliterator trySplit()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: java.lang.String toString()>
<java.io.InputStream: int read(byte[])>-><java.io.InputStream: int read(byte[],int,int)>
<sun.security.util.HostnameChecker: boolean matchAllWildcards(java.lang.String,java.lang.String)>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: int characteristics()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void setReadTimeout(int)>-><sun.net.www.protocol.http.HttpURLConnection: void setReadTimeout(int)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$EmptySpliterator$OfInt: boolean tryAdvance(java.util.function.IntConsumer)>
<synthetic.method.SalaryMapperImpl: int deleteByPrimaryKey(java.lang.Integer)>-><synthetic.method.datatable.SALARY: java.lang.Integer getid()>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.String: java.lang.String substring(int,int)>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeParseException createError(java.lang.CharSequence,java.lang.RuntimeException)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<sun.net.NetworkClient$2: java.lang.Object run()>-><sun.net.NetworkClient$2: java.net.Socket run()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.Hr getCurrentHr(org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>-><java.lang.Integer: java.lang.Integer decode(java.lang.String)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$AbstractConcNode: java.util.stream.Node getChild(int)>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.io.StringReader: void reset()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setSalary(org.javaboy.vhr.model.Salary)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$ArrayNode: long count()>
<synthetic.method.HrMapperImpl: java.lang.Integer updateUserface(java.lang.String,java.lang.Integer)>-><synthetic.method.datatable.HR: java.lang.Integer getid()>
<sun.net.NetworkClient$2: void <init>(sun.net.NetworkClient)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateEmployeeSalaryById(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.salary.SobConfigController: org.javaboy.vhr.model.RespBean updateEmployeeSalaryById(java.lang.Integer,java.lang.Integer)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.javaboy.vhr.config.CustomFilterInvocationSecurityMetadataSource: boolean supports(java.lang.Class)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.security.x509.X500Name: void <init>(byte[])>-><sun.security.util.DerInputStream: void <init>(byte[])>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setWorkAge(java.lang.Integer)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: java.util.List getAllHrs(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.SpinedBuffer$1Splitr: long estimateSize()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.util.List getValue()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter: io.undertow.util.HeaderMap access$100(org.springframework.http.server.reactive.UndertowHeadersAdapter)>
<java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>-><java.lang.Math: long max(long,long)>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: java.lang.String getPath()>
<java.util.Collections$SetFromMap: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap: int size()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: java.util.Spliterator trySplit()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: com.rabbitmq.client.AMQP$Tx$SelectOk txSelect()>-><com.rabbitmq.client.impl.recovery.AutorecoveringChannel: com.rabbitmq.client.AMQP$Tx$SelectOk txSelect()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.io.BufferedInputStream: void fill()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void run()>-><sun.net.www.http.KeepAliveCache: void removeVector(sun.net.www.http.KeepAliveKey)>
<java.io.PushbackInputStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateSalaryById(org.javaboy.vhr.model.Salary,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getaddress()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><java.lang.Throwable: java.lang.String getMessage()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setname(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.channel.ReflectiveChannelFactory: java.lang.String toString()>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: void run()>-><java.lang.String: boolean endsWith(java.lang.String)>
<java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><java.io.FileInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Spliterators$IntIteratorSpliterator: int characteristics()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.Spliterators$DoubleArraySpliterator: void forEachRemaining(java.lang.Object)>
<javax.servlet.ServletException: void <init>(java.lang.String,java.lang.Throwable)>-><java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setpensionper(java.lang.Float)>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsWithOutChildren()>-><org.javaboy.vhr.model.Department: void setDepPath(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Character: java.lang.String toString()>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.String: int indexOf(int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.io.FilterInputStream: void reset()>-><sun.net.httpserver.SSLStreams$InputStream: void reset()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><org.javaboy.vhr.model.Hr: void setUserface(java.lang.String)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateMenuRole(java.lang.Integer,java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.ReferencePipeline$2$1: void begin(long)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.web.header.Header: int hashCode()>
<sun.net.www.MeteredStream: void close()>-><java.io.SequenceInputStream: void close()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void ensureOpen()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean maxWorkID(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: java.net.Socket access$200(java.net.HttpConnectSocketImpl,java.lang.String,int)>-><java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.security.AccessControlContext: java.security.DomainCombiner getCombiner()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.Vector: java.util.List subList(int,int)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>-><java.lang.Object: java.lang.Object clone()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String getPatternString()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: java.util.List getAllSalaries(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.ProgressSource: void finishTracking()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$6: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$6: java.lang.Void run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.CalcModeRecord: java.lang.String toString()>
<java.io.DataInputStream: int readInt()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<synthetic.method.RoleMapperImpl: int insert(org.javaboy.vhr.model.Role)>-><synthetic.method.datatable.ROLE: void setid(java.lang.Integer)>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrUserface(org.springframework.web.multipart.MultipartFile,java.lang.Integer,org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getContentType()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.ReferencePipeline: java.util.stream.StreamShape getOutputShape()>
<sun.net.www.MessageHeader$HeaderIterator: void <init>(sun.net.www.MessageHeader,java.lang.String,java.lang.Object)>-><java.lang.Object: void <init>()>
<java.io.BufferedOutputStream: void flushBuffer()>-><java.io.PrintStream: void write(byte[],int,int)>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int,int)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void <init>(java.util.Spliterator,java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: void <init>(java.util.Spliterator,java.util.stream.StreamSpliterators$UnorderedSliceSpliterator)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>
<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.EnumMap$1: java.lang.String toString()>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.javaboy.vhr.model.RespPageBean getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.salary.SobConfigController: org.javaboy.vhr.model.RespPageBean getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>
<org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.Spliterators$EmptySpliterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>-><java.util.Spliterators$EmptySpliterator: void forEachRemaining(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<synthetic.method.PositionMapperImpl: java.lang.Integer deletePositionsByIds(java.lang.Integer[])>-><synthetic.method.datatable.POSITION: java.lang.Integer getid()>
<sun.net.ProgressSource: void updateProgress(long,long)>-><sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>
<javax.net.ssl.HttpsURLConnection: void <init>(java.net.URL)>-><javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>
<java.net.URLPermission: java.lang.String actions()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>-><java.nio.Buffer: int remaining()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.JavaType getReferencedType()>
<java.util.stream.SliceOps$SliceTask: long completedSize(long)>-><java.util.stream.SliceOps$SliceTask: long completedSize(long)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: org.javaboy.vhr.model.RespBean login(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<sun.net.www.HeaderParser: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>
<sun.nio.cs.StreamDecoder: int readBytes()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Constructor findConstructor(java.lang.Class,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.http.PosterOutputStream: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getQuery()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><sun.net.util.IPAddressUtil: boolean isIPv6LiteralAddress(java.lang.String)>
<java.net.Socket: int getSoTimeout()>-><java.net.SocketException: void <init>(java.lang.String)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteHrById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.apache.catalina.connector.Response: boolean isCommitted()>-><org.apache.catalina.connector.Response: org.apache.coyote.Response getCoyoteResponse()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<sun.security.action.GetIntegerAction: java.lang.Integer run()>-><java.lang.Integer: void <init>(int)>
<java.util.AbstractList: int hashCode()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader getUserSetHeaders()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.SliceOps$1$1: boolean cancellationRequested()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.util.Set entrySet()>-><org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.MeteredStream: long skip(long)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$IntFixedNodeBuilder: void begin(long)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: long estimateSize()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getphone()>
<java.io.PrintStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>-><java.net.URL: java.lang.String getProtocol()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.javaboy.vhr.controller.emp.EmpBasicController getEmpBasicController()>
<sun.security.util.HostnameChecker: boolean matchAllWildcards(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getAddress()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.Ptg: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: void remove()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.FormatRecord: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$ConcatSpliterator: long estimateSize()>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.security.cert.CertificateException: void <init>(java.lang.String)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.Buffer: int limit()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><java.io.BufferedInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void <init>()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: java.util.List getAllJobLevels(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean add(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void clear(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer rewind()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URL: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.lang.Long: long parseLong(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$HashMapSpliterator: long estimateSize()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.io.PrintStream: boolean checkError()>-><java.io.PrintStream: boolean checkError()>
<java.net.HttpConnectSocketImpl: int getLocalPort()>-><java.net.InetSocketAddress: int getPort()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<javax.net.ssl.SSLSocketFactory$1: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedCollection: int size()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsWithOutChildren()>-><synthetic.method.datatable.DEPARTMENT: synthetic.method.datatable.DEPARTMENT getInstance()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getPosId()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setWorkState(java.lang.String)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><java.io.StringReader: void <init>(java.lang.String)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.ChunkedInputStream: void <init>(java.io.InputStream,sun.net.www.http.HttpClient,sun.net.www.MessageHeader)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.HashMap$KeySpliterator: int characteristics()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.Nodes$ArrayNode: long count()>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.http.KeepAliveStream: void close()>
<java.io.BufferedOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setgender(java.lang.String)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode: long count()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setmedicalbase(java.lang.Integer)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.lang.String,int)>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.net.URL: java.lang.String getFile()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.Area2DPtgBase: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.apache.catalina.connector.OutputBuffer: void realWriteBytes(java.nio.ByteBuffer)>-><org.apache.catalina.connector.ClientAbortException: void <init>(java.lang.Throwable)>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.IntPipeline$9$1: void accept(int)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setGender(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>-><java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.Buffer: int limit()>
<sun.net.NetworkClient$2: java.net.Socket run()>-><java.net.Socket: void <init>(java.net.Proxy)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.util.AbstractMap: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.String: char charAt(int)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: int getNCCount()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.HttpConnectSocketImpl: java.net.Socket privilegedDoTunnel(java.lang.String,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setspecialty(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setTiptopDegree(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.GridsetRecord: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllPositions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.LocalDateTime: java.lang.String toString()>
<java.io.DataOutputStream: void writeInt(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.Double getcontractterm()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.VCenterRecord: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><org.javaboy.vhr.model.Hr: void setId(java.lang.Integer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.FooterRecord: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.io.DataInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<synthetic.method.JobLevelMapperImpl: java.util.List getAllJobLevels()>-><synthetic.method.datatable.JOBLEVEL: java.lang.Integer[] getid()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache: int getMaxConnections()>-><java.lang.Integer: int intValue()>
<sun.net.www.MessageHeader: void setIfNotSet(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<org.javaboy.vhr.controller.config.SystemConfigController$$InterceptorProxy: java.util.List getMenusByHrId(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>-><java.nio.HeapCharBuffer: java.nio.CharBuffer slice()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.ArrayList: void <init>()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>
<org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>-><org.apache.catalina.connector.OutputBuffer: void realWriteBytes(java.nio.ByteBuffer)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.net.httpserver.Request$WriteStream: void write(int)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>
<sun.net.www.http.HttpClient: int getDefaultPort(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><java.net.HttpConnectSocketImpl$2: java.lang.Object run()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllPoliticsstatus(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Socket: void setSoTimeout(int)>
<com.fasterxml.jackson.databind.util.TokenBufferReadContext: void <init>(com.fasterxml.jackson.core.JsonStreamContext,com.fasterxml.jackson.core.JsonLocation)>-><com.fasterxml.jackson.core.filter.TokenFilterContext: java.lang.Object getCurrentValue()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: java.lang.Float getmedicalper()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: java.lang.Integer getmedicalbase()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.protocol.https.HttpsClient: void closeIdleConnection()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: int characteristics()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.WeakHashMap$ValueSpliterator: int characteristics()>
<java.io.FilterInputStream: void reset()>-><sun.net.www.MeteredStream: void reset()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.DigestAuthentication: boolean supportsPreemptiveAuthorization()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.WeakHashMap: void clear()>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: int getDefaultPort()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.BlankRecord: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.io.InputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator$OfInt spliterator()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.ProgressSource: void finishTracking()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getWorkID()>
<sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Socket: void setImpl()>
<java.text.MessageFormat: int hashCode()>-><java.lang.String: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: java.lang.String getPath()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllJobLevels(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.lang.Error: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<org.javaboy.vhr.controller.ChatController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.Sink: void accept(int)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: java.util.Map access$100(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.security.ssl.Krb5Helper$1: java.lang.Object run()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Double: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<sun.net.www.MeteredStream: void close()>-><java.util.zip.InflaterInputStream: void close()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getWorkID()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void logFinest(java.lang.String)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.MeteredStream: int read()>-><java.io.ObjectInputStream$BlockDataInputStream: int read()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.util.jar.Manifest$FastInputStream: void fill()>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.zip.InflaterInputStream: void fill()>-><java.io.InputStream: int read(byte[],int,int)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHr(org.javaboy.vhr.model.Hr,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.AbstractTask: boolean isRoot()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.zip.DeflaterOutputStream: void deflate()>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int readInt()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deletePositionsByIds(java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>-><sun.net.www.http.HttpClient: java.lang.String getProxyHostUsed()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Position getposition()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.io.FileNotFoundException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response$PrivilegedDoIsEncodable: java.lang.Object run()>-><org.apache.catalina.connector.Response$PrivilegedDoIsEncodable: java.lang.Boolean run()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.io.FilePermission: boolean impliesIgnoreMask(java.io.FilePermission)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><java.net.HttpConnectSocketImpl$1: java.lang.Object run()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.net.URL: java.io.InputStream openStream()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<sun.net.www.MeteredStream: void close()>-><sun.net.ProgressSource: void finishTracking()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<sun.net.www.ParseUtil: java.net.URI createURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: void checkPath(java.lang.String,java.lang.String,java.lang.String)>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getMidsByRid(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getNativePlace()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><javax.security.auth.Policy$2: java.lang.Object run()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$1: void <init>(javax.security.auth.SubjectDomainCombiner,javax.security.auth.Subject)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.misc.Signal: java.lang.String toString()>
<java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Double getContractTerm()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$EmptySpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.net.HttpConnectSocketImpl: java.net.InetAddress getInetAddress()>-><java.net.SocketImpl: java.net.InetAddress getInetAddress()>
<sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>-><java.net.InetSocketAddress: int getPort()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>
<java.io.FilterOutputStream: void flush()>-><com.rabbitmq.client.impl.nio.ByteBufferOutputStream: void flush()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setbirthday(java.util.Date)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.lang.StringBuilder: int length()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean maxWorkID(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><sun.security.util.HostnameChecker: sun.security.util.HostnameChecker getInstance(byte)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<org.javaboy.vhr.controller.ChatController$$InterceptorProxy: java.util.List getAllHrs(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.ChatController: java.util.List getAllHrs()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.stream.SpinedBuffer$1Splitr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: boolean isFull(java.nio.Buffer)>-><java.nio.Buffer: int limit()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.aop.support.NameMatchMethodPointcutAdvisor: void <init>(org.aopalliance.aop.Advice)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: void setAdvice(org.aopalliance.aop.Advice)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntArraySpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfaces(java.lang.Object)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: java.util.List getAllDepartments(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveStream: sun.net.www.http.KeepAliveStreamCleaner access$100()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URL: void <init>(java.net.URL,java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$3: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$3: java.net.ResponseCache run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.locale.Extension: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getworkage()>
<org.apache.catalina.connector.Response: javax.servlet.ServletOutputStream getOutputStream()>-><org.apache.catalina.connector.CoyoteOutputStream: void <init>(org.apache.catalina.connector.OutputBuffer)>
<java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getPhone()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.UnresolvedPermissionCollection: java.util.Enumeration elements()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setnativeplace(java.lang.String)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator$OfInt spliterator()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.lang.String getHeaderNamesInList()>-><java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setdepartmentid(java.lang.Integer)>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void forEach(java.util.function.Consumer)>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteDepById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<synthetic.method.MailSendLogMapperImpl: java.lang.Integer insert(org.javaboy.vhr.model.MailSendLog)>-><synthetic.method.datatable.MAILSENDLOG: void setexchange(java.lang.String)>
<sun.misc.URLClassPath: void check(java.net.URL)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.security.Permission getPermission()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.StringBuffer: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<sun.net.www.MeteredStream: void close()>-><sun.net.httpserver.Request$ReadStream: void close()>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<synthetic.method.HrMapperImpl: int deleteByPrimaryKey(java.lang.Integer)>-><synthetic.method.datatable.HR: synthetic.method.datatable.HR getInstance()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Float getMedicalPer()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<synthetic.method.PositionMapperImpl: java.util.List getAllPositions()>-><org.javaboy.vhr.model.Position: void setId(java.lang.Integer)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.FileInputStream: void close()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator spliterator()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: boolean isEmpty()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.InetSocketAddress: void <init>(java.lang.String,int)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator spliterator()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.util.HashSet: void <init>()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrRole(java.lang.Integer,java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int,boolean)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.AbstractCollection: boolean isEmpty()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$1: int size()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<synthetic.method.PoliticsstatusMapperImpl: java.util.List getAllPoliticsstatus()>-><synthetic.method.datatable.POLITICSSTATUS: java.lang.Integer getid()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateMenuRole(java.lang.Integer,java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: boolean hasNext()>
<io.netty.util.internal.DefaultPriorityQueue: void bubbleUp(int,io.netty.util.internal.PriorityQueueNode)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>
<java.net.URI: int needsNormalization(java.lang.String)>-><java.lang.String: char charAt(int)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.LinkedHashMap: void afterNodeInsertion(boolean)>-><org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setSchool(java.lang.String)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean importData(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.MeteredStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>
<java.util.stream.Nodes$ConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.io.BufferedInputStream: int read()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URL: java.lang.String getPath()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String raw()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Object run()>-><sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.String: int length()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.charset.CoderResult: boolean isError()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.http.HttpClient: void openServer()>-><java.net.Proxy: java.net.SocketAddress address()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.http.HttpClient: void closeServer()>
<org.apache.logging.log4j.message.ParameterFormatter: void appendMap(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.Collection: java.util.stream.Stream stream()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$ConcNode: java.util.Spliterator spliterator()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.LinkedList: int size()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.Boolean: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.PermissionsEnumerator: boolean hasMoreElements()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.FileInputStream: int read(byte[],int,int)>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteJobLevelsByIds(java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateMenuRole(java.lang.Integer,java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getposid()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.function.FunctionMetadata: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<synthetic.method.JobLevelMapperImpl: java.util.List getAllJobLevels()>-><org.javaboy.vhr.model.JobLevel: void setId(java.lang.Integer)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.Spliterator: boolean hasCharacteristics(int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void toReadMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer reset()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.beans.factory.support.DisposableBeanAdapter: void destroy()>-><org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory: void destroy()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long acquirePermits(long)>-><java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.common.UnicodeString: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getIdCard()>
<sun.net.www.http.KeepAliveStream$1: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrRole(java.lang.Integer,java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressEvent: void <init>(sun.net.ProgressSource,java.net.URL,java.lang.String,java.lang.String,sun.net.ProgressSource$State,long,long)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.net.URLPermission: void init(java.lang.String)>-><java.security.Permission: java.lang.String getName()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.stream.Node$OfInt build()>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: void <init>()>-><org.javaboy.vhr.controller.system.basic.DepartmentController: void <init>()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.io.FilterInputStream: void reset()>-><java.io.PushbackInputStream: void reset()>
<java.io.DataOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>-><org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$3: java.lang.Object nextElement()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.InputStream: int read(byte[],int,int)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.util.Date getBirthday()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.BufferedOutputStream: void write(int)>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addPosition(org.javaboy.vhr.model.Position,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.System$2: void invokeFinalize(java.lang.Object)>-><sun.net.www.http.HttpClient: void finalize()>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.Object next()>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType getReferencedType()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.charset.CoderResult: boolean isMalformed()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void setPriority(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$2: void forEachRemaining(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: java.util.Spliterator makeSpliterator(java.util.Spliterator,long,long,long,long)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long,long,long)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: java.lang.String toString()>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.AbstractChunk: void recycle()>
<sun.net.www.protocol.http.HttpURLConnection$5: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String)>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><java.io.BufferedInputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNonce(java.lang.String)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: org.javaboy.vhr.model.Department getDepartment()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$ArraySpliterator: java.util.Spliterator trySplit()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: int getPort()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addEmp(org.javaboy.vhr.model.Employee,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><synthetic.method.datatable.HR: void setuserface(java.lang.String)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: int getPort()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><java.lang.Integer: int parseInt(java.lang.String)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.http.KeepAliveStreamCleaner$2: java.lang.Integer run()>-><sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><java.util.Collections$SingletonList: int size()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.asm.Label: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner$1: void <init>(javax.security.auth.SubjectDomainCombiner,javax.security.auth.Subject)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Department: java.lang.String getName()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.util.Date getEndContract()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><org.javaboy.vhr.model.Hr: void setRemark(java.lang.String)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<synthetic.method.JobLevelMapperImpl: int insertSelective(org.javaboy.vhr.model.JobLevel)>-><synthetic.method.datatable.JOBLEVEL: void setenabled(java.lang.Boolean)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>-><java.net.InetAddressContainer: void <init>()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.javaboy.vhr.controller.config.SystemConfigController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>-><sun.net.www.protocol.http.HttpURLConnection$6: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.ColumnInfoRecord: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setEmail(java.lang.String)>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><org.apache.tomcat.util.buf.C2BConverter: boolean isUndeflow()>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><java.net.SocketInputStream: int read(byte[])>
<org.apache.catalina.connector.CoyoteOutputStream: void <init>(org.apache.catalina.connector.OutputBuffer)>-><javax.servlet.ServletOutputStream: void <init>()>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: boolean hasNext()>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<synthetic.method.JobLevelMapperImpl: int insertSelective(org.javaboy.vhr.model.JobLevel)>-><org.javaboy.vhr.model.JobLevel: java.lang.String getTitleLevel()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.text.FieldPosition: java.lang.String toString()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><synthetic.method.datatable.HR: java.lang.String getphone()>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><org.javaboy.vhr.model.Hr: java.lang.String getRemark()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: org.springframework.web.context.request.WebRequest getObject()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletResponse getResponse()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<synthetic.method.PoliticsstatusMapperImpl: java.util.List getAllPoliticsstatus()>-><synthetic.method.datatable.POLITICSSTATUS: java.lang.String getname()>
<sun.net.www.URLConnection: void setProxiedHost(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressMonitor: boolean shouldMeterInput(java.net.URL,java.lang.String)>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateSalaryById(org.javaboy.vhr.model.Salary,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<synthetic.method.MailSendLogMapperImpl: java.lang.Integer insert(org.javaboy.vhr.model.MailSendLog)>-><synthetic.method.datatable.MAILSENDLOG: synthetic.method.datatable.MAILSENDLOG getInstance()>
<sun.net.www.http.ChunkedInputStream: void <init>(java.io.InputStream,sun.net.www.http.HttpClient,sun.net.www.MessageHeader)>-><java.io.InputStream: void <init>()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>-><java.lang.String: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node: java.util.stream.StreamShape getShape()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList: java.util.ListIterator listIterator()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>
<sun.security.util.HostnameChecker: boolean matchAllWildcards(java.lang.String,java.lang.String)>-><java.util.StringTokenizer: java.lang.String nextToken()>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateEmployeeSalaryById(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><sun.net.ApplicationProxy: sun.net.ApplicationProxy create(java.net.Proxy)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void closeUnderlying()>-><sun.net.www.http.HttpClient: void closeServer()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><org.springframework.http.HttpHeaders: java.util.Set entrySet()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.io.PrintStream: void flush()>-><java.io.PrintStream: void flush()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$ConcatSpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.OrRequestMatcher: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.net.ProtocolException: void <init>(java.lang.String)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.StringBuffer: java.lang.StringBuffer append(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Spliterators$ArraySpliterator: long estimateSize()>
<org.apache.tomcat.util.buf.ByteChunk: void <init>(int)>-><org.apache.tomcat.util.buf.AbstractChunk: void <init>()>
<java.io.BufferedInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int available()>
<synthetic.method.JobLevelMapperImpl: int insertSelective(org.javaboy.vhr.model.JobLevel)>-><synthetic.method.datatable.JOBLEVEL: void setid(java.lang.Integer[])>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getposid()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><java.io.InputStream: void close()>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<sun.net.www.http.HttpClient$1: void <init>(sun.net.www.http.HttpClient,java.net.InetSocketAddress)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: void remove()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: void forEachRemaining(java.util.function.Consumer)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: int length()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.SubList$1: boolean hasNext()>
<java.security.ProtectionDomain: java.lang.String toString()>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getName()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: int characteristics()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.Hr getCurrentHr(org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.io.FilterInputStream: void mark(int)>-><java.io.FilterInputStream: void mark(int)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: java.util.Spliterator trySplit()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.MessageHeader: java.util.Iterator multiValueIterator(java.lang.String)>-><sun.net.www.MessageHeader$HeaderIterator: void <init>(sun.net.www.MessageHeader,java.lang.String,java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.http.ChunkedInputStream: void ensureRawAvailable(int)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: synthetic.method.datatable.EMPLOYEE getInstance()>
<synthetic.method.MailSendLogMapperImpl: java.lang.Integer insert(org.javaboy.vhr.model.MailSendLog)>-><org.javaboy.vhr.model.MailSendLog: java.lang.String getRouteKey()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setnationid(java.lang.Integer)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.ArrayList$ArrayListSpliterator: int characteristics()>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.lang.Thread: java.lang.Thread currentThread()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>
<synthetic.method.MenuMapperImpl: java.util.List getMidsByRid(java.lang.Integer)>-><synthetic.method.datatable.MENUROLE: java.lang.Integer getrid()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Optional: java.lang.String toString()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllPoliticsstatus(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController: java.util.List getAllPoliticsstatus()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.AbstractPipeline: long exactOutputSizeIfKnown(java.util.Spliterator)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.net.SocketOutputStream: void close()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$LongArrayNode: void forEach(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: char charAt(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<java.util.HashMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.ComparableTimSort: void mergeHi(int,int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$2: void <init>(javax.security.auth.SubjectDomainCombiner)>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsWithOutChildren()>-><org.javaboy.vhr.model.Department: void setId(java.lang.Integer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateJobLevelById(org.javaboy.vhr.model.JobLevel,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.DateWindow1904Record: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Spliterators$IteratorSpliterator: long estimateSize()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.Spliterators$EmptySpliterator: void forEachRemaining(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.BasicAuthentication: boolean supportsPreemptiveAuthorization()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.ExpPtg: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.Nodes$InternalNodeSpliterator: int characteristics()>
<sun.net.www.http.ChunkedOutputStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void ensureOpen()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onNextDropped(java.lang.Object,reactor.util.context.Context)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>-><java.net.URL: int getPort()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<synthetic.method.HrRoleMapperImpl: java.lang.Integer addRole(java.lang.Integer,java.lang.Integer[])>-><synthetic.method.datatable.HRROLE: void setrid(java.lang.Integer)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setWorkID(java.lang.String)>
<org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void disconnect()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.servlet.ServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>-><javax.servlet.ServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Proxy: java.net.Proxy$Type type()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.PropertyPermissionCollection: java.util.Enumeration elements()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<java.io.FilterOutputStream: void flush()>-><java.io.ObjectOutputStream$BlockDataOutputStream: void flush()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: void setHostnameVerifier(javax.net.ssl.HostnameVerifier)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addEmp(org.javaboy.vhr.model.Employee,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addJobLevel(org.javaboy.vhr.model.JobLevel,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>
<java.text.AttributeEntry: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: int characteristics()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void setRequestMethod(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void setRequestMethod(java.lang.String)>
<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.UndertowHeadersAdapter,org.springframework.http.server.reactive.UndertowHeadersAdapter$1)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.UndertowHeadersAdapter)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setendcontract(java.util.Date)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setNotWorkDate(java.util.Date)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.Buffer: java.nio.Buffer position(int)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><org.javaboy.vhr.model.Hr: void setId(java.lang.Integer)>
<java.net.Proxy: java.lang.String toString()>-><java.net.Proxy: java.net.SocketAddress address()>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><sun.net.www.ParseUtil: boolean isEscaped(java.lang.String,int)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.security.util.HostnameChecker: boolean isMatched(java.lang.String,java.lang.String)>-><sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>
<synthetic.method.RoleMapperImpl: int insert(org.javaboy.vhr.model.Role)>-><synthetic.method.datatable.ROLE: void setname(java.lang.String)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList: void clear()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.io.BufferedInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfInt: void forEachRemaining(java.util.function.IntConsumer)>
<java.net.Socket: void setTcpNoDelay(boolean)>-><java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getWorkID()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><org.javaboy.vhr.model.Hr: void setAddress(java.lang.String)>
<java.util.IdentityHashMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getid()>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><synthetic.method.datatable.HR: java.lang.String getpassword()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.net.ProtocolException: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<synthetic.method.RoleMapperImpl: int insert(org.javaboy.vhr.model.Role)>-><org.javaboy.vhr.model.Role: java.lang.String getNameZh()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getAllRoles(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>-><java.lang.Long: java.lang.Long valueOf(long)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.http.ChunkedInputStream: int read()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.JavaType getContentType()>
<java.io.DataInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrUserface(org.springframework.web.multipart.MultipartFile,java.lang.Integer,org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.io.PrintStream: void newLine()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: java.util.List getAllHrs(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.net.ApplicationProxy: void <init>(java.net.Proxy)>-><java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>
<sun.net.www.MeteredStream: int available()>-><java.io.ObjectInputStream$BlockDataInputStream: int available()>
<java.io.DataOutputStream: void writeLong(long)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: long estimateSize()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.Nodes$LongArrayNode: long count()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void ensureOpen()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.SliceOps$SliceTask: void <init>(java.util.stream.AbstractPipeline,java.util.stream.PipelineHelper,java.util.Spliterator,java.util.function.IntFunction,long,long)>-><java.util.stream.AbstractShortCircuitTask: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setPosition(org.javaboy.vhr.model.Position)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void <init>()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><sun.security.util.Debug: void println(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setWorkID(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.AuthenticationInfo: void endAuthRequest(java.lang.String)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><javax.net.ssl.SSLSocketFactory: java.lang.String getSecurityProperty(java.lang.String)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int available()>-><sun.net.www.http.ChunkedInputStream: int available()>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: int getPort()>
<java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator$OfInt spliterator()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>-><java.lang.String: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.DigestAuthentication: boolean supportsPreemptiveAuthorization()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><synthetic.method.datatable.HR: synthetic.method.datatable.HR getInstance()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.io.FilterInputStream: void reset()>-><org.apache.poi.poifs.filesystem.DocumentInputStream: void reset()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><synthetic.method.datatable.DEPARTMENT: java.lang.Integer getresult()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><synthetic.method.datatable.HR: java.lang.String getremark()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$EmptyNode$OfRef: java.util.Spliterator spliterator()>
<org.apache.tomcat.util.buf.UEncoder: void urlEncode(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.lang.Character: char forDigit(int,int)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void appendFragment(java.lang.StringBuffer,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<org.javaboy.vhr.utils.POIUtils: java.util.List excel2Employee(org.springframework.web.multipart.MultipartFile,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>-><org.javaboy.vhr.model.JobLevel: java.lang.Integer getId()>
<java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<java.lang.System$2: void invokeFinalize(java.lang.Object)>-><sun.net.www.MeteredStream: void finalize()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,boolean,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.stream.SliceOps$SliceTask: java.lang.Object getEmptyResult()>-><java.util.stream.SliceOps$SliceTask: java.util.stream.Node getEmptyResult()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URLConnection: long getIfModifiedSince()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getjoblevelid()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void <init>(java.nio.ByteBuffer,java.io.InputStream)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.net.SocketInputStream: void close()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.EnumMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>-><java.io.FilterInputStream: int read(byte[],int,int)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Socket: void connect(java.net.SocketAddress,int)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: void <init>()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.flywaydb.core.internal.license.Edition: java.lang.String toString()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.Ref3DPtg: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.SubList: java.util.AbstractList access$100(java.util.SubList)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getconversiontime()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: java.util.List getAllSalaries(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.AssertionError: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$DoubleArraySpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.http.KeepAliveStreamCleaner$2: java.lang.Object run()>-><sun.net.www.http.KeepAliveStreamCleaner$2: java.lang.Integer run()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongFixedNodeBuilder: void begin(long)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean)>-><java.util.Collections: java.util.Set emptySet()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.io.PrintStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream access$200(sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.LocalTime: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfInt: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode: void forEach(java.lang.Object)>
<java.util.AbstractList$ListItr: void add(java.lang.Object)>-><java.util.AbstractList: void add(int,java.lang.Object)>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveCleanerEntry: void setQueuedForCleanup()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: synthetic.method.datatable.EMPLOYEE getInstance()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<org.springframework.web.util.pattern.PathPattern: char getSeparator()>-><org.springframework.http.server.PathContainer$Options: char separator()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(sun.net.www.protocol.http.HttpCallerInfo,java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$EntrySpliterator: java.util.Spliterator trySplit()>
<org.springframework.security.web.authentication.session.AbstractSessionFixationProtectionStrategy: void setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><synthetic.method.datatable.DEPARTMENT: java.lang.Boolean getisparent()>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner$4: java.lang.String run()>-><java.security.Security: java.lang.String getProperty(java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.io.ByteArrayOutputStream: int size()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.net.URLPermission: void init(java.lang.String)>-><java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$EntrySpliterator: java.util.Spliterator trySplit()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: sun.net.ProgressSource$State getState()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.Node$OfDouble: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>
<org.springframework.security.web.authentication.WebAuthenticationDetails: boolean equals(java.lang.Object)>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String getRemoteAddress()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void disconnect()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnect()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>-><java.util.Random: void nextBytes(byte[])>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter: void afterPropertiesSet()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.net.URL: java.lang.String toExternalForm()>
<sun.net.www.protocol.http.HttpURLConnection$1: void <init>(java.lang.String,java.net.URL,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.Authenticator$RequestorType)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getEmail()>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream,boolean)>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>
<org.apache.catalina.connector.OutputBuffer: boolean isFull(java.nio.Buffer)>-><java.nio.Buffer: int capacity()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.ReduceOps$8ReducingSink: void begin(long)>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setSalary(org.javaboy.vhr.model.Salary)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$OfInt: void forEach(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: void reset()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteRoleById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getNonce()>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>-><org.springframework.context.support.AbstractRefreshableApplicationContext: void assertBeanFactoryActive()>
<synthetic.method.PoliticsstatusMapperImpl: java.util.List getAllPoliticsstatus()>-><org.javaboy.vhr.model.Politicsstatus: void <init>()>
<java.io.FilterInputStream: void mark(int)>-><sun.net.httpserver.Request$ReadStream: void mark(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.RowRecord: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: char charAt(int)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.InetSocketAddress: int getPort()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.io.InputStream: void close()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><java.net.SocketInputStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllNations(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><java.net.SocketInputStream: void close()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator$OfLong spliterator()>
<java.util.Spliterators$DoubleArraySpliterator: boolean tryAdvance(java.lang.Object)>-><java.util.Spliterators$DoubleArraySpliterator: boolean tryAdvance(java.util.function.DoubleConsumer)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><sun.security.util.HostnameChecker: void match(java.lang.String,java.security.cert.X509Certificate)>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setallsalary(java.lang.Integer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.http.ResponseEntity exportData(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.util.LazyStreamable: java.lang.String toString()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: void <init>()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void putInKeepAliveCache()>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: boolean isEscaped(java.lang.String,int)>-><java.lang.String: char charAt(int)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber: boolean isEmpty()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: int getPort()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.FileOutputStream: void write(byte[],int,int)>
<java.util.Spliterators$DoubleArraySpliterator: void forEachRemaining(java.lang.Object)>-><java.util.Spliterators$DoubleArraySpliterator: void forEachRemaining(java.util.function.DoubleConsumer)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.io.DataOutputStream: void writeShort(int)>-><java.io.PrintStream: void write(int)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$Values: boolean isEmpty()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean supportsPreemptiveAuthorization()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.io.FilterInputStream: void close()>-><sun.net.www.MeteredStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.MMSRecord: java.lang.String toString()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.net.Proxy: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntIteratorSpliterator: java.util.Spliterator trySplit()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$1Splitr: long estimateSize()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.Spliterators$EmptySpliterator: boolean tryAdvance(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.net.URLPermission: void init(java.lang.String)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<sun.net.www.ParseUtil: boolean isEscaped(java.lang.String,int)>-><java.lang.String: int length()>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.web.authentication.WebAuthenticationDetails: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.net.URL: int getPort()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<synthetic.method.PositionMapperImpl: int deleteByPrimaryKey(java.lang.Integer)>-><synthetic.method.datatable.POSITION: java.lang.Integer getid()>
<org.javaboy.vhr.controller.ChatController$$InterceptorProxy: java.util.List getAllHrs(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addEmp(org.javaboy.vhr.model.Employee,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController: org.javaboy.vhr.model.RespBean addEmp(org.javaboy.vhr.model.Employee)>
<sun.net.www.protocol.http.HttpURLConnection$5: java.lang.String run()>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode: long count()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getwedlock()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$1: int size()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter: io.undertow.util.HeaderMap access$100(org.springframework.http.server.reactive.UndertowHeadersAdapter)>
<org.springframework.util.MultiValueMapAdapter: java.util.Set keySet()>-><java.util.Collections$UnmodifiableMap: java.util.Set keySet()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Hashtable: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setNotWorkDate(java.util.Date)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setaddress(java.lang.String)>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><synthetic.method.datatable.HR: java.lang.String getusername()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.BasicAuthentication: boolean isAuthorizationStale(java.lang.String)>
<java.util.AbstractList: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.stream.Sink$ChainedInt: boolean cancellationRequested()>-><java.util.stream.SliceOps$1$1: boolean cancellationRequested()>
<org.springframework.web.servlet.HttpServletBean: void setEnvironment(org.springframework.core.env.Environment)>-><org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.text.MessageFormat: boolean equals(java.lang.Object)>-><java.util.Arrays: boolean equals(int[],int[])>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addPosition(org.javaboy.vhr.model.Position,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.awt.AppContext: java.lang.String toString()>
<sun.net.www.http.KeepAliveStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getIdCard()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.Enum: int ordinal()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: org.springframework.security.access.SecurityMetadataSource obtainSecurityMetadataSource()>
<sun.net.www.MeteredStream: void close()>-><java.io.FilterInputStream: void close()>
<synthetic.method.HrMapperImpl: java.lang.Integer updateUserface(java.lang.String,java.lang.Integer)>-><synthetic.method.datatable.HR: void setuserface(java.lang.String)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long,long,long)>-><java.util.stream.StreamSpliterators$SliceSpliterator: void <init>(java.util.Spliterator,long,long,long,long)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.Spliterators$ArraySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.lang.Thread: boolean isAlive()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.autoconfigure.template.TemplateLocation: java.lang.String toString()>
<org.springframework.web.context.request.AbstractRequestAttributesScope: void registerDestructionCallback(java.lang.String,java.lang.Runnable)>-><org.springframework.web.context.request.ServletRequestAttributes: void registerDestructionCallback(java.lang.String,java.lang.Runnable,int)>
<synthetic.method.EmployeeMapperImpl: int deleteByPrimaryKey(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getid()>
<java.net.Socket: void close()>-><java.net.AbstractPlainSocketImpl: void close()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>-><java.util.stream.Node: java.util.stream.Node getChild(int)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.JavaType getContentType()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.util.logging.PlatformLogger: void finer(java.lang.String)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap: int size()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveStream: java.lang.Thread access$002(java.lang.Thread)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String raw()>
<sun.net.www.MeteredStream: int available()>-><sun.net.www.MeteredStream: int available()>
<java.lang.Object: java.lang.String toString()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addSalary(org.javaboy.vhr.model.Salary,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>-><java.lang.Object: java.lang.Object clone()>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.util.Date getBeginContract()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.CharChunk: int subtract()>-><org.apache.tomcat.util.buf.CharChunk: boolean checkEof()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.io.FilterInputStream: int available()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><synthetic.method.datatable.HR: java.util.List getroles()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.StringTokenizer: java.lang.String nextToken()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.ChunkedInputStream: int available()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><sun.net.www.MeteredStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllPositions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$SpinedNodeBuilder: void begin(long)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.io.DataOutputStream: void writeInt(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getAlgorithm()>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>-><sun.net.www.protocol.http.HttpURLConnection: int getReadTimeout()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: java.util.List getAllDepartments(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Spliterators$EmptySpliterator: long estimateSize()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getWedlock()>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><sun.net.www.protocol.http.HttpURLConnection$3: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><org.javaboy.vhr.model.Hr: void setTelephone(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deletePositionById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Vector: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.util.StdDateFormat: void _format(java.util.TimeZone,java.util.Locale,java.util.Date,java.lang.StringBuffer)>-><java.util.SimpleTimeZone: int getOffset(long)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.AbstractChunk: int getStart()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void putInKeepAliveCache()>-><sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addPosition(org.javaboy.vhr.model.Position,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getgender()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Long: long parseLong(java.lang.String)>
<java.util.stream.Sink$ChainedInt: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.http.HttpClient: void setIgnoreContinue(boolean)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setid(java.lang.Integer)>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: void remove()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.context.support.AbstractResourceBasedMessageSource: java.util.Locale getDefaultLocale()>-><java.util.Locale: java.util.Locale getDefault()>
<sun.net.www.MeteredStream: void finalize()>-><java.lang.Object: void finalize()>
<java.util.stream.Nodes$LongArrayNode: void forEach(java.util.function.LongConsumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfLong: void accept(long)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscard(java.lang.Object,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: com.rabbitmq.client.AMQP$Tx$SelectOk txSelect()>-><com.rabbitmq.client.impl.ChannelN: com.rabbitmq.client.AMQP$Tx$SelectOk txSelect()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Class: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getAllSalary()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long acquirePermits(long)>-><java.lang.AssertionError: void <init>()>
<sun.net.www.http.ClientVector: void <init>(int)>-><java.util.Stack: void <init>()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>-><java.lang.System: long currentTimeMillis()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>
<org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>-><org.apache.catalina.connector.OutputBuffer: boolean isFull(java.nio.Buffer)>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.security.util.HostnameChecker: sun.security.util.HostnameChecker getInstance(byte)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateSalaryById(org.javaboy.vhr.model.Salary,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<sun.nio.cs.StreamDecoder: int readBytes()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.util.stream.Node build()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: java.lang.Class getSecureObjectClass()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBufferReadContext: void <init>(com.fasterxml.jackson.core.JsonStreamContext,com.fasterxml.jackson.core.JsonLocation)>-><com.fasterxml.jackson.core.filter.TokenFilterContext: com.fasterxml.jackson.core.JsonStreamContext getParent()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.flywaydb.core.internal.database.base.Schema: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setconversiontime(java.util.Date)>
<java.io.FilterOutputStream: void flush()>-><com.rabbitmq.client.impl.nio.SslEngineByteBufferOutputStream: void flush()>
<sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long)>-><java.io.FilterInputStream: void <init>(java.io.InputStream)>
<javax.security.auth.Policy$3: java.lang.Void run()>-><java.lang.String: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Position getposition()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.ProtectionRev4Record: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.javaboy.vhr.model.RespPageBean getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: void remove()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.InterfaceEndRecord: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.ArrayList$SubList: boolean addAll(java.util.Collection)>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setbasicsalary(java.lang.Integer)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.web.authentication.session.AbstractSessionFixationProtectionStrategy: void setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.DistinctOps$1$1: void begin(long)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String getSessionId()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<java.util.Collections$SetFromMap: boolean add(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: int characteristics()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.lettuce.core.masterreplica.RedisUpstreamReplicaNode: java.lang.String toString()>
<java.io.BufferedInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int available()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: int characteristics()>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><java.util.concurrent.locks.LockSupport: void parkNanos(long)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer findPropertyContentTypeSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.net.Socket: java.io.OutputStream getOutputStream()>
<org.javaboy.vhr.utils.POIUtils: java.util.List excel2Employee(org.springframework.web.multipart.MultipartFile,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>-><org.javaboy.vhr.model.Position: java.lang.Integer getId()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteJobLevelsByIds(java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$HashMapSpliterator: long estimateSize()>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.ByteChunk: void recycle()>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: java.lang.String valueOf(char)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setbegincontract(java.util.Date)>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><sun.security.util.HostnameChecker: sun.security.x509.X500Name getSubjectX500Name(java.security.cert.X509Certificate)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.SubjectDomainCombiner$2: java.lang.Object run()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getdepartmentid()>
<org.springframework.core.DecoratingClassLoader: boolean isExcluded(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.WeakHashMap$EntrySpliterator: int characteristics()>
<org.springframework.security.web.access.expression.WebExpressionVoter: boolean supports(java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.FilterInputStream: int read(byte[])>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><org.javaboy.vhr.model.Hr: void setTelephone(java.lang.String)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.PrintStream: void write(int)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteRoleById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.http.HttpHeaders: java.lang.String toString()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.Hr getCurrentHr(org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<sun.net.www.MeteredStream: int available()>-><sun.net.httpserver.SSLStreams$InputStream: int available()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRemoteUser()>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpServletRequest _getHttpServletRequest()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllPositions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$5$1: void accept(java.lang.Object)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.http.KeepAliveCache$1: java.lang.Object run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: sun.net.ProgressSource$State getState()>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: void verifyCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.StackTraceElement: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.AbstractPipeline: java.util.stream.Sink wrapSink(java.util.stream.Sink)>
<org.apache.catalina.connector.OutputBuffer$PrivilegedCreateConverter: java.lang.Object run()>-><org.apache.catalina.connector.OutputBuffer$PrivilegedCreateConverter: org.apache.tomcat.util.buf.C2BConverter run()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>-><java.util.HashMap: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.HttpURLConnection: int getResponseCode()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int length()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>-><com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<com.fasterxml.jackson.core.filter.TokenFilterContext: com.fasterxml.jackson.core.JsonStreamContext getParent()>-><com.fasterxml.jackson.core.filter.TokenFilterContext: com.fasterxml.jackson.core.filter.TokenFilterContext getParent()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$EmptySpliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateEmp(org.javaboy.vhr.model.Employee,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<synthetic.method.RoleMapperImpl: java.util.List getAllRoles()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.SubjectDomainCombiner$5: java.lang.Object run()>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap: java.util.Set keySet()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$ConcNode$OfDouble: void <init>(java.util.stream.Node$OfDouble,java.util.stream.Node$OfDouble)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setAddress(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.aop.framework.CglibAopProxy: java.lang.Object getProxy()>-><org.springframework.aop.framework.CglibAopProxy: java.lang.Object getProxy(java.lang.ClassLoader)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.net.URI: int join(char[],int[])>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.SliceOps$SliceTask: void <init>(java.util.stream.AbstractPipeline,java.util.stream.PipelineHelper,java.util.Spliterator,java.util.function.IntFunction,long,long)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.String: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.lang.Long getTotal(org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: synthetic.method.datatable.EMPLOYEE getInstance()>
<sun.util.logging.PlatformLogger: void fine(java.lang.String)>-><sun.util.logging.PlatformLogger$JavaLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>
<java.util.AbstractMap: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.javaboy.vhr.controller.ChatController$$InterceptorProxy: java.util.List getAllHrs(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.io.FileInputStream: void close()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<synthetic.method.NationMapperImpl: java.util.List getAllNations()>-><org.javaboy.vhr.model.Nation: void setName(java.lang.String)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.Hr getCurrentHr(org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<sun.security.util.HostnameChecker: boolean isMatched(java.lang.String,java.lang.String)>-><sun.security.util.HostnameChecker: boolean matchAllWildcards(java.lang.String,java.lang.String)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.String gettiptopdegree()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.SocketImpl: void setSocket(java.net.Socket)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.Spliterators$LongArraySpliterator: boolean tryAdvance(java.lang.Object)>-><java.util.Spliterators$LongArraySpliterator: boolean tryAdvance(java.util.function.LongConsumer)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: java.util.Spliterator makeSpliterator(java.util.Spliterator)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void <init>(java.util.Spliterator,java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<org.springframework.security.authentication.AnonymousAuthenticationProvider: void setMessageSource(org.springframework.context.MessageSource)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><java.io.BufferedInputStream: void close()>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><java.lang.String: int length()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toUpperCase()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addEmp(org.javaboy.vhr.model.Employee,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.javaboy.vhr.controller.config.SystemConfigController$$InterceptorProxy: java.util.List getMenusByHrId(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: long estimateSize()>
<sun.net.www.MeteredStream: int available()>-><org.apache.poi.poifs.filesystem.DocumentInputStream: int available()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.HttpsClient: int getDefaultPort()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.asm.Type: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$FixedNodeBuilder: java.util.stream.Node build()>
<sun.net.www.protocol.http.HttpURLConnection$6: java.lang.Void run()>-><sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>-><java.util.StringTokenizer: java.lang.String nextToken()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><sun.net.www.protocol.https.HttpsClient: java.net.Socket createSocket()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: java.net.Socket privilegedDoTunnel(java.lang.String,int)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.flywaydb.core.internal.resolver.ResolvedMigrationImpl: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.security.web.header.Header: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<synthetic.method.MenuMapperImpl: java.util.List getMidsByRid(java.lang.Integer)>-><synthetic.method.datatable.MENUROLE: synthetic.method.datatable.MENUROLE getInstance()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$IntArrayNode: java.util.Spliterator spliterator()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object getValue(java.lang.Object)>-><java.lang.ref.Reference: java.lang.Object get()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Collections$2: int characteristics()>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><org.javaboy.vhr.model.Hr: java.lang.String getName()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setWorkAge(java.lang.Integer)>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateEmployeeSalaryById(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntArrayNode: long count()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.NameMatchMethodPointcut: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.lang.Object: void <init>()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: int length()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.HashMap$EntrySpliterator: int characteristics()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setJobLevel(org.javaboy.vhr.model.JobLevel)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateMenuRole(java.lang.Integer,java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<sun.nio.cs.StreamEncoder: void writeBytes()>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: org.javaboy.vhr.model.RespBean login(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: boolean endsWith(java.lang.String)>
<java.security.ProtectionDomain: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$LongArraySpliterator: boolean tryAdvance(java.util.function.LongConsumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator spliterator()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.net.URL: java.lang.String getQuery()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.Object: java.lang.Class getClass()>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.stream.Node$OfLong build()>
<synthetic.method.RoleMapperImpl: java.util.List getAllRoles()>-><org.javaboy.vhr.model.Role: void setId(java.lang.Integer)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$IntArrayNode: java.util.Spliterator spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.https.DelegateHttpsURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler,javax.net.ssl.HttpsURLConnection)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.SliceOps$SliceTask: java.lang.Object getEmptyResult()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.Integer: int parseInt(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes: java.util.stream.Node$Builder$OfDouble doubleBuilder(long)>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getMethod()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String scheme()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<java.net.URLConnection: void setUseCaches(boolean)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$ConcNode$OfLong: void <init>(java.util.stream.Node$OfLong,java.util.stream.Node$OfLong)>
<java.util.stream.Nodes: java.util.stream.Node emptyNode(java.util.stream.StreamShape)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.File: void <init>(java.io.File,java.lang.String)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.AbstractCollection: java.lang.Object[] toArray()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.lang.Object next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.PermissionsEnumerator: java.lang.Object nextElement()>
<java.util.stream.SliceOps$SliceTask: boolean isLeftCompleted(long)>-><java.util.stream.AbstractTask: java.util.stream.AbstractTask getParent()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getDepartmentId()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$PermitStatus permitStatus()>
<java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setJobLevel(org.javaboy.vhr.model.JobLevel)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Spliterators$IntIteratorSpliterator: int characteristics()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.web.context.request.ServletRequestAttributes: void registerSessionDestructionCallback(java.lang.String,java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.io.PrintWriter: void newLine()>-><org.apache.catalina.connector.OutputBuffer: void flush()>
<synthetic.method.PositionMapperImpl: int insertSelective(org.javaboy.vhr.model.Position)>-><org.javaboy.vhr.model.Position: java.lang.Integer getId()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: java.io.InputStream getInputStream()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void <init>(java.nio.ByteBuffer)>-><java.io.InputStream: void <init>()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<sun.net.ApplicationProxy: sun.net.ApplicationProxy create(java.net.Proxy)>-><sun.net.ApplicationProxy: void <init>(java.net.Proxy)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.FilterInputStream: void reset()>
<org.javaboy.vhr.service.MenuService: java.util.List getMenusByHrId()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$KeySpliterator: java.util.Spliterator trySplit()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.Buffer: java.nio.Buffer flip()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$CSLMSpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.FontRecord: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><java.lang.String: char charAt(int)>
<java.util.stream.Node$OfLong: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.HeapCharBuffer: java.nio.CharBuffer put(char)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.EOFRecord: java.lang.String toString()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: java.lang.String substring(int,int)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.usermodel.HSSFName: java.lang.String toString()>
<java.util.concurrent.Executors$DelegatedExecutorService: void execute(java.lang.Runnable)>-><java.util.concurrent.ScheduledThreadPoolExecutor: void execute(java.lang.Runnable)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getTiptopDegree()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.charset.CoderResult: boolean isUnderflow()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: int characteristics()>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$ConcNode$OfInt: void <init>(java.util.stream.Node$OfInt,java.util.stream.Node$OfInt)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.net.URI: void split(char[],int[])>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.Buffer: java.nio.Buffer limit(int)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$WeakHashMapSpliterator: long estimateSize()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator spliterator()>
<synthetic.method.MailSendLogMapperImpl: java.lang.Integer insert(org.javaboy.vhr.model.MailSendLog)>-><synthetic.method.datatable.MAILSENDLOG: void setempid(java.lang.Integer)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: boolean hasNext()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><org.javaboy.vhr.model.Hr: void setPhone(java.lang.String)>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveCleanerEntry: boolean getQueuedForCleanup()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.InputStream: void close()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: java.util.List getAllJobLevels(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$1: java.util.Iterator iterator()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><org.javaboy.vhr.model.Hr: void setUsername(java.lang.String)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.SliceOps: java.util.function.IntFunction access$100()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getPosId()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.io.BufferedInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: int available()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.MeteredStream: void close()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><synthetic.method.datatable.HR: void setpassword(java.lang.String)>
<java.io.BufferedInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><io.netty.util.internal.RecyclableArrayList: boolean addAll(java.util.Collection)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><com.rabbitmq.client.impl.TruncatedInputStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<org.apache.tomcat.util.buf.CharChunk: int subtract(char[],int,int)>-><org.apache.tomcat.util.buf.CharChunk: boolean checkEof()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.WeakHashMap$KeySpliterator: int characteristics()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.lettuce.core.metrics.CommandMetrics: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setlunchsalary(java.lang.Integer)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection$11: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$IntArrayNode: java.util.Spliterator spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.SubList: boolean addAll(java.util.Collection)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.Operators$MonoSubscriber: boolean isEmpty()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setpoliticid(java.lang.Integer)>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><java.io.FilterInputStream: int read(byte[])>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void finalize()>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: void dispose()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><java.lang.Object: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.Proxy: java.net.Proxy$Type type()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: boolean isTrustedSite(java.net.URL)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updatePositions(org.javaboy.vhr.model.Position,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.NegotiateAuthentication: void <init>(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.javaboy.vhr.controller.config.SystemConfigController$$InterceptorProxy: java.util.List getMenusByHrId(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.config.SystemConfigController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: int read(byte[],int,int)>-><org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: int read(byte[],int,int)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$2: java.util.Spliterator trySplit()>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.lang.Object next()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setposid(java.lang.Integer)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.CharChunk: int subtract(char[],int,int)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfRef: java.util.Spliterator spliterator()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.Spliterators$ArraySpliterator: long estimateSize()>
<synthetic.method.PositionMapperImpl: java.util.List getAllPositions()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.util.SimpleTimeZone: int hashCode()>
<sun.net.www.HeaderParser: int findInt(java.lang.String,int)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getpoliticid()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getWorkAge()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.concurrent.ConcurrentSkipListMap$CSLMSpliterator: long estimateSize()>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.apache.tomcat.util.collections.ConcurrentCache: java.lang.Object get(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><synthetic.method.datatable.HR: void setphone(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.HCenterRecord: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.Streams$ConcatSpliterator: long estimateSize()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.jar.Manifest$FastInputStream: void fill()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: java.net.PasswordAuthentication privilegedRequestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getAllMenus(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory: boolean access$000(org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setEmail(java.lang.String)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.CharBuffer: char[] array()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.PushbackInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getAlgorithm()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<synthetic.method.RoleMapperImpl: int deleteByPrimaryKey(java.lang.Integer)>-><synthetic.method.datatable.ROLE: java.lang.Integer getid()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespPageBean getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.io.BufferedInputStream: void close()>-><sun.net.www.MeteredStream: void close()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setPoliticsstatus(org.javaboy.vhr.model.Politicsstatus)>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.net.Socket: java.io.OutputStream getOutputStream()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.net.URL: java.lang.String getRef()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.HeaderParser: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.lang.Object: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: java.lang.String substring(int)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.web.util.pattern.PathPattern: int compareTo(org.springframework.web.util.pattern.PathPattern)>-><java.lang.String: int compareTo(java.lang.String)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><org.javaboy.vhr.model.Hr: void <init>()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.collections.ConcurrentCache: java.lang.Object get(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.http.HttpClient: boolean getHttpKeepAliveSet()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Position: java.lang.String getName()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void setMedicalPer(java.lang.Float)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setcontractterm(java.lang.Double)>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.http.parser.MediaType: java.lang.String getCharset()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpCaptureInputStream: void <init>(java.io.InputStream,sun.net.www.http.HttpCapture)>-><java.io.FilterInputStream: void <init>(java.io.InputStream)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.http.KeepAliveStreamCleaner$1: java.lang.Object run()>
<sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: boolean hasNext()>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: java.util.List getAllSalaries(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.charset.CoderResult: boolean isOverflow()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$TreeMapSpliterator: long estimateSize()>
<synthetic.method.JobLevelMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.JobLevel)>-><synthetic.method.datatable.JOBLEVEL: void settitlelevel(java.lang.String)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.AssertionError: void <init>()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: java.lang.Object next()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setphone(java.lang.String)>
<org.springframework.util.MultiValueMapAdapter: java.util.List put(java.lang.Object,java.util.List)>-><java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection$5: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String)>
<java.util.concurrent.locks.LockSupport: void parkNanos(long)>-><sun.misc.Unsafe: void park(boolean,long)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean available()>-><java.io.BufferedInputStream: int read()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.TreeMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.TreeMap$EntrySpliterator: int characteristics()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressEvent: void <init>(sun.net.ProgressSource,java.net.URL,java.lang.String,java.lang.String,sun.net.ProgressSource$State,long,long)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.GregorianCalendar: void computeTime()>-><java.util.SimpleTimeZone: int getRawOffset()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: void <init>(java.util.Spliterator,long,long)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: void <init>()>-><org.javaboy.vhr.controller.system.basic.PositionController: void <init>()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>-><java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.Subject: java.util.Set getPrincipals()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getAccumulationFundBase()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream,boolean)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: long estimateSize()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllPoliticsstatus(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getAllMenus(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteSalaryById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.salary.SalaryController: org.javaboy.vhr.model.RespBean deleteSalaryById(java.lang.Integer)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.servlet.ServletRequestWrapper: java.lang.String getRemoteAddr()>-><javax.servlet.ServletRequestWrapper: java.lang.String getRemoteAddr()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)>
<org.springframework.web.util.pattern.PathPattern: int hashCode()>-><java.lang.String: int hashCode()>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: java.lang.String trim()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getName()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addRole(org.javaboy.vhr.model.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$2: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$2: java.net.CookieHandler run()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<synthetic.method.JobLevelMapperImpl: java.util.List getAllJobLevels()>-><synthetic.method.datatable.JOBLEVEL: java.lang.Boolean getenabled()>
<java.util.zip.InflaterInputStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.AbstractList: int hashCode()>-><java.text.MessageFormat: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: java.util.List getAllSalaries(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.io.DataInputStream: int readInt()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: void verifyCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.javaboy.vhr.controller.LoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.lang.String: int length()>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.net.URL: java.lang.String getHost()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.Policy$1: java.lang.Object run()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: void <init>()>-><org.javaboy.vhr.controller.system.basic.PermissController: void <init>()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deletePositionById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PositionController: org.javaboy.vhr.model.RespBean deletePositionById(java.lang.Integer)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getLunchSalary()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setContractTerm(java.lang.Double)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.TreeMap$EntrySpliterator: int characteristics()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator spliterator()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.net.URL: java.lang.String getHost()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: void <init>(java.util.Spliterator,java.util.stream.StreamSpliterators$UnorderedSliceSpliterator)>-><java.lang.Object: void <init>()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator spliterator()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.concurrent.ForkJoinWorkerThread$InnocuousForkJoinWorkerThread: java.lang.ClassLoader getContextClassLoader()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getworkage()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<org.apache.catalina.connector.ResponseFacade: boolean isFinished()>-><org.apache.catalina.connector.Response: boolean isSuspended()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.ChatController$$InterceptorProxy: void <init>()>-><org.javaboy.vhr.controller.ChatController: void <init>()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: java.lang.String substring(int)>
<java.io.DataInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressEvent: void <init>(sun.net.ProgressSource,java.net.URL,java.lang.String,java.lang.String,sun.net.ProgressSource$State,long,long)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$3: void <init>(javax.security.auth.SubjectDomainCombiner,javax.security.auth.Subject,java.security.CodeSource)>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.Policy$4: java.lang.Object run()>
<java.io.FilterInputStream: void mark(int)>-><java.io.PushbackInputStream: void mark(int)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressSource: void finishTracking()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getCredentials()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.Spliterators$IntArraySpliterator: void forEachRemaining(java.lang.Object)>-><java.util.Spliterators$IntArraySpliterator: void forEachRemaining(java.util.function.IntConsumer)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<sun.net.www.MeteredStream: void reset()>-><java.io.FilterInputStream: void reset()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.Spliterators$LongArraySpliterator: long estimateSize()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><java.net.SocketInputStream: void close()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: java.lang.Integer getid()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: void ensureOpen()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.PermissionsHash: java.util.Enumeration elements()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.String toString()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.http.PosterOutputStream: void close()>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: java.util.List getAllSalaries(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfDouble: void <init>(java.util.stream.Node$OfDouble)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive)>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IntArraySpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.security.x509.X500Name: sun.security.util.DerValue findMostSpecificAttribute(sun.security.util.ObjectIdentifier)>-><sun.security.x509.RDN: sun.security.util.DerValue findAttribute(sun.security.util.ObjectIdentifier)>
<org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.FindOps$FindSink: void accept(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Boolean run()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.HashMap$EntrySpliterator: int characteristics()>
<java.util.stream.Node$OfInt: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.http.HttpClient: void <init>()>
<com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>-><com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setPosId(java.lang.Integer)>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.SliceOps$SliceTask: java.lang.Object doLeaf()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Vector$1: boolean hasMoreElements()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<java.security.cert.CertificateParsingException: void <init>()>-><java.security.cert.CertificateException: void <init>()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfRef: void forEach(java.util.function.Consumer)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read()>-><java.io.BufferedInputStream: int read()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.io.DataOutputStream: void writeByte(int)>-><java.io.PrintStream: void write(int)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setBirthday(java.util.Date)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<sun.net.www.MeteredStream: void justRead(long)>-><sun.net.www.MeteredStream: boolean isMarked()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection: void access$400(sun.net.www.protocol.http.HttpURLConnection,boolean)>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<java.io.BufferedInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>
<java.io.BufferedOutputStream: void write(byte[],int,int)>-><java.io.PrintStream: void write(byte[],int,int)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: void parseHeader(java.io.InputStream)>
<java.security.ProtectionDomain: java.lang.String toString()>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>
<java.net.Socket: int getLocalPort()>-><java.net.SocketImpl: int getLocalPort()>
<org.apache.catalina.connector.OutputBuffer$PrivilegedCreateConverter: org.apache.tomcat.util.buf.C2BConverter run()>-><org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void <init>(int)>-><java.util.stream.StreamSpliterators$ArrayBuffer: void <init>()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsWithOutChildren()>-><org.javaboy.vhr.model.Department: void setParentId(java.lang.Integer)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsWithOutChildren()>-><synthetic.method.datatable.DEPARTMENT: java.lang.Integer getid()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void checkPath(java.lang.String,java.lang.String,java.lang.String)>-><java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.Streams$RangeIntSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.tomcat.util.collections.ConcurrentCache: java.lang.Object get(java.lang.Object)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateEmployeeSalaryById(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.lang.Object next()>
<javax.security.auth.Policy$4: java.lang.String run()>-><java.security.Security: java.lang.String getProperty(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.util.Date getEndContract()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.HttpURLConnection$3: java.lang.Object run()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$ArraySpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,boolean,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.MessageHeader: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: int read(byte[],int,int)>-><org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: void writeToCache(byte[],int,int)>
<org.springframework.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getExpected()>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.javaboy.vhr.model.RespPageBean getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Node$OfInt: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<org.springframework.core.DecoratingClassLoader: boolean isExcluded(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$LongArrayNode: java.util.Spliterator spliterator()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: boolean checkError()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.MeteredStream: int read()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getgender()>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setbonus(java.lang.Integer)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.URL: int getDefaultPort()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes: java.util.stream.Node$Builder builder(long,java.util.function.IntFunction)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.HttpRetryException: void <init>(java.lang.String,int)>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$LongArrayNode: java.util.Spliterator$OfPrimitive spliterator()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addRole(org.javaboy.vhr.model.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.apache.catalina.connector.Response: boolean access$000(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>
<sun.net.www.http.ChunkedInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void closeUnderlying()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<java.io.PrintStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getId()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.MessageHeader: java.util.Map getHeaders()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.CryptoPermissions: java.util.Enumeration elements()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.PasswordAuthentication privilegedRequestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><sun.net.www.protocol.http.HttpURLConnection$1: void <init>(java.lang.String,java.net.URL,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.Authenticator$RequestorType)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: void ensureRawAvailable(int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveCache: java.lang.Thread access$000(sun.net.www.http.KeepAliveCache)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MeteredStream: void mark(int)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: java.net.Socket createSocket()>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.math.BigDecimal: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.Subject: boolean isReadOnly()>
<reactor.core.publisher.Operators: void onDiscardQueueWithClear(java.util.Queue,reactor.util.context.Context,java.util.function.Function)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: sun.net.ProgressSource$State getState()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setworkage(java.lang.Integer)>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.springframework.security.core.context.SecurityContextImpl: int hashCode()>-><org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.lang.Integer updateEmployeeSalaryById(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPSALARY: synthetic.method.datatable.EMPSALARY getInstance()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsWithOutChildren()>-><synthetic.method.datatable.DEPARTMENT: java.lang.String getname()>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><sun.security.util.Debug: void println(java.lang.String)>
<java.util.AbstractList: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: void writeToCache(byte[],int,int)>-><java.io.ByteArrayOutputStream: void write(byte[],int,int)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>-><java.util.stream.Node: int getChildCount()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.NetProperties$1: java.lang.Object run()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void openServer()>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><org.springframework.core.NestedExceptionUtils: java.lang.String buildMessage(java.lang.String,java.lang.Throwable)>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Spliterators$LongArraySpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection$7: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Sink$ChainedReference: void begin(long)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.String: java.lang.String toLowerCase()>
<sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>-><java.lang.Object: void <init>()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.String: java.lang.String valueOf(long)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: int characteristics()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: void close()>-><sun.net.httpserver.SSLStreams$InputStream: void close()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: java.util.List getAllRoles(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.SecurityException: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Boolean run()>
<java.io.DataInputStream: int read(byte[])>-><java.io.InputStream: int read(byte[],int,int)>
<org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: javax.servlet.http.HttpSession getObject()>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession()>
<sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>-><sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<sun.misc.URLClassPath: void check(java.net.URL)>-><java.lang.String: int indexOf(java.lang.String)>
<java.io.BufferedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.net.httpserver.Request$WriteStream: void write(byte[],int,int)>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: boolean authQop()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<org.apache.catalina.connector.OutputBuffer: int transfer(java.lang.String,int,int,java.nio.CharBuffer)>-><java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.lang.Math: long min(long,long)>
<java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>-><java.net.SocketException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<java.util.zip.DeflaterOutputStream: void deflate()>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getPensionBase()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.util.Date getEndContract()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getbegindate()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$OfInt: void forEach(java.util.function.Consumer)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$IdentityHashMapSpliterator: long estimateSize()>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: void destroy()>-><org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory: void destroy()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>-><java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.net.HostPortrange: int[] parsePort(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>-><sun.net.www.protocol.http.HttpURLConnection: void reset()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: synthetic.method.datatable.SALARY getInstance()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.NetworkClient$1: java.lang.Void run()>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.csource.fastdfs.ProtoCommon: org.csource.fastdfs.ProtoCommon$RecvPackageInfo recvPackage(java.io.InputStream,byte,long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.util.Date getBeginDate()>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.Integer: int parseInt(java.lang.String)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$LongFixedNodeBuilder: void begin(long)>
<sun.net.www.MeteredStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>
<org.apache.catalina.connector.Response: javax.servlet.ServletOutputStream getOutputStream()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.PrintSetupRecord: java.lang.String toString()>
<java.util.stream.Node$OfInt: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: java.util.Iterator iterator()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.nio.cs.StreamDecoder: boolean inReady()>-><sun.net.www.MeteredStream: int available()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.KeepAliveStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long,sun.net.www.http.HttpClient)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.AbstractChunk: int getEnd()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setpensionper(java.lang.Float)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getworkage()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>-><java.util.ArrayDeque: void <init>(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String getRemoteAddress()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.http.PosterOutputStream: void close()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.http.ResponseEntity exportData(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.net.HostPortrange: int[] defaultPort()>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.charset.CoderResult: void throwException()>
<ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.PageBreakRecord: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.NetworkClient: void setReadTimeout(int)>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.InternalError: void <init>(java.lang.String)>
<java.util.ComparableTimSort: void mergeLo(int,int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getIdCard()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.Subject: boolean isReadOnly()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void afterPropertiesSet()>
<org.apache.tomcat.util.buf.CharChunk: void makeSpace(int)>-><org.apache.tomcat.util.buf.AbstractChunk: int getLimitInternal()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><sun.net.www.MessageHeader: java.lang.String getHeaderNamesInList()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: void add(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.PrintStream: void write(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.ExtSSTRecord: java.lang.String toString()>
<java.io.InputStream: int read(byte[],int,int)>-><java.lang.NullPointerException: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: int characteristics()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setIdCard(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.security.GeneralSecurityException: void <init>()>-><java.lang.Exception: void <init>()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean remove(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int getResponseCode()>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.URL: int getPort()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.io.ObjectStreamField: java.lang.String toString()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReferencePipeline$5$1: void accept(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.JobLevel getjoblevel()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.AuthenticationInfo: void endAuthRequest(java.lang.String)>
<sun.net.www.MeteredStream: void close()>-><java.io.ObjectInputStream$BlockDataInputStream: void close()>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>-><sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.web.header.Header: int hashCode()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.FileOutputStream: void close()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void setIfNotSet(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.StringBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.io.BufferedInputStream: void close()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<java.util.AbstractList: int hashCode()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.HttpClient: void closeServer()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.util.Base64: java.util.Base64$Decoder getDecoder()>
<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void setUseCaches(boolean)>-><java.net.URLConnection: void setUseCaches(boolean)>
<com.rabbitmq.client.impl.AMQChannel: void cleanRpcChannelState()>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.javaboy.vhr.utils.POIUtils: java.util.List excel2Employee(org.springframework.web.multipart.MultipartFile,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>-><org.javaboy.vhr.model.Nation: java.lang.Integer getId()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int readInt()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: char[] toCharArray()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.LocalDate: java.lang.String toString()>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.http.HttpClient: void finished()>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHost()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>-><sun.net.ProgressSource: void finishTracking()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.CryptoAllPermissionCollection: java.util.Enumeration elements()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: void <init>(java.util.Spliterator,long,long)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.ClientVector: void <init>(int)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.io.PrintStream: void write(int)>-><java.io.PrintStream: void write(int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.HashSet: void <init>(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: int size()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: char charAt(int)>
<org.springframework.web.context.request.AbstractRequestAttributesScope: java.lang.Object get(java.lang.String,org.springframework.beans.factory.ObjectFactory)>-><org.springframework.web.context.request.ServletRequestAttributes: void setAttribute(java.lang.String,java.lang.Object,int)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: char charAt(int)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String toString()>-><org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setConnectTimeout(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.net.InetAddress: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.FileInputStream: int read(byte[])>
<java.util.stream.SliceOps$SliceTask: void cancel()>-><java.util.stream.SliceOps$SliceTask: java.util.stream.Node getEmptyResult()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<synthetic.method.PositionMapperImpl: java.lang.Integer deletePositionsByIds(java.lang.Integer[])>-><synthetic.method.datatable.POSITION: synthetic.method.datatable.POSITION getInstance()>
<synthetic.method.RoleMapperImpl: java.util.List getAllRoles()>-><synthetic.method.datatable.ROLE: java.lang.String getnamezh()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getProgress()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<sun.net.www.protocol.http.HttpURLConnection: void access$400(sun.net.www.protocol.http.HttpURLConnection,boolean)>-><sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<synthetic.method.PositionMapperImpl: int insertSelective(org.javaboy.vhr.model.Position)>-><synthetic.method.datatable.POSITION: void setenabled(java.lang.Boolean)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void <init>(java.nio.ByteBuffer,java.io.InputStream)>-><java.io.InputStream: void <init>()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.HashSet: void <init>(java.util.Collection)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setschool(java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.EmptyByteBuf: java.lang.String toString()>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: long estimateSize()>
<synthetic.method.RoleMapperImpl: int insert(org.javaboy.vhr.model.Role)>-><synthetic.method.datatable.ROLE: synthetic.method.datatable.ROLE getInstance()>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.aop.framework.ProxyFactory: java.lang.Object getProxy()>-><org.springframework.aop.framework.ProxyCreatorSupport: org.springframework.aop.framework.AopProxy createAopProxy()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<javax.security.auth.Policy$3: java.lang.Object run()>-><javax.security.auth.Policy$3: java.lang.Void run()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: void <init>()>-><org.javaboy.vhr.controller.HrInfoController: void <init>()>
<java.util.TimSort: void binarySort(java.lang.Object[],int,int,int,java.util.Comparator)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><java.net.ProtocolException: void <init>(java.lang.String)>
<sun.net.www.http.HttpClient: boolean isKeepingAlive()>-><sun.net.www.http.HttpClient: boolean getHttpKeepAliveSet()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$ArrayNode: long count()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createProxy(com.rabbitmq.client.Channel,boolean)>-><org.springframework.aop.framework.ProxyFactory: java.lang.Object getProxy()>
<java.util.stream.SliceOps$1$1: boolean cancellationRequested()>-><java.util.stream.Sink: boolean cancellationRequested()>
<sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(java.lang.String)>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: void <init>(org.springframework.http.server.reactive.UndertowHeadersAdapter,io.undertow.util.HttpString)>-><java.lang.Object: void <init>()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNonce(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.MessageHeader: java.util.Iterator multiValueIterator(java.lang.String)>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.SliceOps$SliceTask makeChild(java.util.Spliterator)>-><java.util.stream.SliceOps$SliceTask: void <init>(java.util.stream.SliceOps$SliceTask,java.util.Spliterator)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.stream.Nodes: java.util.stream.Node emptyNode(java.util.stream.StreamShape)>-><java.lang.Enum: int ordinal()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.AbstractByteBufAllocator: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader getUserSetHeaders()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setcreatedate(java.util.Date)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHr(org.javaboy.vhr.model.Hr,org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.HrInfoController: org.javaboy.vhr.model.RespBean updateHr(org.javaboy.vhr.model.Hr,org.springframework.security.core.Authentication)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator spliterator()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$LongArrayNode: void forEach(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.StringRecord: java.lang.String toString()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>-><sun.net.www.protocol.http.HttpURLConnection$9: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.UnknownClassOrMethodId: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: java.lang.String findValue(int)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntArraySpliterator: long estimateSize()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getAllMenus(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getTiptopDegree()>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Department getdepartment()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.regex.Pattern: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>
<reactor.core.publisher.Operators: void onErrorDropped(java.lang.Throwable,reactor.util.context.Context)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.AbstractCollection: java.lang.Object[] toArray()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$1: int size()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$SpinedNodeBuilder: java.util.Spliterator spliterator()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setCachedHA1(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.BOFRecord: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.NetworkClient: void setConnectTimeout(int)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.InetSocketAddress: boolean isUnresolved()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: void <init>(char[],int,int)>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: void <init>()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.AbstractList: java.util.ListIterator listIterator()>
<sun.net.www.protocol.http.HttpURLConnection$11: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String)>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>-><java.lang.Long: long parseLong(java.lang.String)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.ReferencePipeline$7$1: void begin(long)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: java.util.Spliterator trySplit()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getName()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$FixedNodeBuilder: void begin(long)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<javax.security.auth.Policy$3: java.lang.Void run()>-><javax.security.auth.Policy: void setPolicy(javax.security.auth.Policy)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>-><sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<java.net.URLPermission: java.lang.String actions()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.springframework.util.MultiValueMapAdapter: boolean containsKey(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: boolean containsKey(java.lang.Object)>
<java.net.Proxy: boolean equals(java.lang.Object)>-><java.net.Proxy: java.net.Proxy$Type type()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getdepartmentid()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<synthetic.method.HrRoleMapperImpl: void deleteByHrid(java.lang.Integer)>-><synthetic.method.datatable.HRROLE: java.lang.Integer gethrid()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setBeginDate(java.util.Date)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><io.netty.util.concurrent.AbstractEventExecutor: boolean inEventLoop()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Object: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.SpinedBuffer$1Splitr: long estimateSize()>
<sun.net.www.HeaderParser: sun.net.www.HeaderParser subsequence(int,int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getbegindate()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.util.Spliterator trySplit()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><java.io.StringReader: int read()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.io.StringReader: int read()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>-><org.springframework.web.util.pattern.PatternParseException$PatternMessage: java.lang.String formatMessage(java.lang.Object[])>
<java.util.HashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><java.io.InputStream: void close()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.csource.fastdfs.ProtoCommon: org.csource.fastdfs.ProtoCommon$RecvPackageInfo recvPackage(java.io.InputStream,byte,long)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.apache.tomcat.util.buf.CharChunk: int subtract(char[],int,int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setWorkState(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getengageform()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isFinal()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.Integer: int parseInt(java.lang.String,int)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><java.io.InputStream: void close()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.zip.InflaterInputStream: void fill()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.EventObject: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.TblPtg: java.lang.String toString()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.ibatis.mapping.ResultMapping: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: java.lang.String toString()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$SpinedNodeBuilder: void end()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addDep(org.javaboy.vhr.model.Department,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.DepartmentController: org.javaboy.vhr.model.RespBean addDep(org.javaboy.vhr.model.Department)>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Object run()>-><org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>
<synthetic.method.PoliticsstatusMapperImpl: java.util.List getAllPoliticsstatus()>-><org.javaboy.vhr.model.Politicsstatus: void setName(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Position getposition()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><synthetic.method.datatable.HR: java.lang.String getname()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.http.ChunkedInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String gettiptopdegree()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.Hr getCurrentHr(org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getProgress()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<synthetic.method.RoleMapperImpl: java.util.List getAllRoles()>-><synthetic.method.datatable.ROLE: java.lang.String getname()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void <init>(java.nio.ByteBuffer)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.LinkedList$LLSpliterator: java.util.Spliterator trySplit()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.io.PrintStream: void write(int)>-><java.io.PrintStream: void flush()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.util.List getValue()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><java.net.SocketInputStream: long skip(long)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<org.springframework.web.context.request.SessionScope: java.lang.Object get(java.lang.String,org.springframework.beans.factory.ObjectFactory)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getSessionMutex()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Vector: boolean addAll(java.util.Collection)>
<synthetic.method.EmployeeMapperImpl: int deleteByPrimaryKey(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: synthetic.method.datatable.EMPLOYEE getInstance()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.http.KeepAliveStream$1: java.lang.Object run()>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator$OfDouble spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<java.util.GregorianCalendar: void computeTime()>-><java.util.SimpleTimeZone: int getOffsets(long,int[])>
<java.io.PrintStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Politicsstatus: java.lang.String getName()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.ProtectionDomain: java.lang.String toString()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.web.servlet.FrameworkServlet: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.JobLevelMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.JobLevel)>-><synthetic.method.datatable.JOBLEVEL: synthetic.method.datatable.JOBLEVEL getInstance()>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setmedicalper(java.lang.Float)>
<java.io.FilterInputStream: void reset()>-><com.rabbitmq.client.impl.TruncatedInputStream: void reset()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.Spliterators$DoubleArraySpliterator: long estimateSize()>
<java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateEmp(org.javaboy.vhr.model.Employee,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController: org.javaboy.vhr.model.RespBean updateEmp(org.javaboy.vhr.model.Employee)>
<java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><synthetic.method.datatable.HR: java.lang.String gettelephone()>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.URL: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.BufferedInputStream: void close()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><io.netty.util.internal.RecyclableArrayList: boolean add(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<java.util.stream.AbstractShortCircuitTask: void cancelLaterNodes()>-><java.util.stream.SliceOps$SliceTask: void cancel()>
<java.util.stream.Nodes$EmptyNode$OfRef: java.util.Spliterator spliterator()>-><java.util.Spliterators: java.util.Spliterator emptySpliterator()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(sun.net.www.protocol.http.HttpCallerInfo,java.lang.String)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.security.action.GetIntegerAction: java.lang.Integer run()>-><java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.StringTokenizer: java.lang.String nextToken()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getWorkState()>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.net.URI: int needsNormalization(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.io.File: java.lang.String toString()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><synthetic.method.datatable.HR: void setaddress(java.lang.String)>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$IntArrayNode: long count()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.util.Collections$EmptySet: boolean contains(java.lang.Object)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: void close()>-><org.apache.poi.poifs.filesystem.DocumentInputStream: void close()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getName()>
<java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator spliterator()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String access$000(sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.CodeSource: java.lang.String toString()>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: java.lang.String toLowerCase()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.MeteredStream: void reset()>-><sun.net.www.MeteredStream: boolean isMarked()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><com.rabbitmq.client.impl.recovery.AutorecoveringChannel: boolean isOpen()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.net.InetAddressContainer: void <init>()>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.net.URI: java.net.URI normalize(java.net.URI)>-><java.net.URI: java.lang.String normalize(java.lang.String)>
<java.net.HttpURLConnection: void <init>(java.net.URL)>-><java.net.URLConnection: void <init>(java.net.URL)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.ByteChunk: byte[] getBuffer()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: java.util.List getAllJobLevels(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.ExternSheetRecord: java.lang.String toString()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType getContentType()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: com.rabbitmq.client.AMQP$Confirm$SelectOk confirmSelect()>-><com.rabbitmq.client.impl.ChannelN: com.rabbitmq.client.AMQP$Confirm$SelectOk confirmSelect()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.IntPipeline$9$1: void begin(long)>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: java.util.List getAllDepartments(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.Byte: java.lang.Byte valueOf(byte)>
<java.io.FilterInputStream: void mark(int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void mark(int)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: com.rabbitmq.client.AMQP$Tx$SelectOk txSelect()>
<org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>-><java.lang.String: int hashCode()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addRole(org.javaboy.vhr.model.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PermissController: org.javaboy.vhr.model.RespBean addRole(org.javaboy.vhr.model.Role)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.javaboy.vhr.model.Politicsstatus: void setName(java.lang.String)>-><java.lang.String: java.lang.String trim()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.util.Base64: java.util.Base64$Encoder getEncoder()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.HttpClient: void closeServer()>
<org.springframework.security.web.util.matcher.OrRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.SpinedBuffer$1Splitr: int characteristics()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void closeIdleConnection()>-><sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setContractTerm(java.lang.Double)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addDep(org.javaboy.vhr.model.Department,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int available()>-><java.io.PushbackInputStream: int available()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.BufferedInputStream: void close()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.util.Date getNotWorkDate()>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: java.net.PasswordAuthentication privilegedRequestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>
<sun.security.util.HostnameChecker: boolean matchAllWildcards(java.lang.String,java.lang.String)>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<java.lang.Object: java.lang.String toString()>-><org.javaboy.vhr.model.Position: int hashCode()>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>-><java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><sun.net.www.ParseUtil: java.net.URI createURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespPageBean getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$AbstractConcNode: java.util.stream.Node getChild(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<javax.security.auth.Policy$1: java.lang.Object run()>-><javax.security.auth.Policy$1: java.lang.String run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<java.util.GregorianCalendar: int computeFields(int,int)>-><java.util.SimpleTimeZone: int getRawOffset()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.ObjectOutputStream$BlockDataOutputStream: void write(byte[],int,int)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean)>-><sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.net.HttpRetryException: void <init>(java.lang.String,int)>-><java.io.IOException: void <init>(java.lang.String)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.KeepAliveCleanerEntry: sun.net.www.http.KeepAliveStream getKeepAliveStream()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addDep(org.javaboy.vhr.model.Department,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>-><java.io.FilterInputStream: void close()>
<reactor.core.publisher.Operators: void onNextDropped(java.lang.Object,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>-><java.util.SimpleTimeZone: int getDSTSavings()>
<java.net.AbstractPlainSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.AbstractPlainSocketImpl: void close()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: java.util.List getAllDepartments(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.DepartmentController: java.util.List getAllDepartments()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<synthetic.method.RoleMapperImpl: java.util.List getAllRoles()>-><synthetic.method.datatable.ROLE: synthetic.method.datatable.ROLE getInstance()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Spliterators$EmptySpliterator: int characteristics()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.WriteAccessRecord: java.lang.String toString()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: int indexOf(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<java.util.jar.Manifest$FastInputStream: void fill()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.nio.cs.StreamDecoder: int readBytes()>-><org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: int read(byte[],int,int)>
<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.io.FilterInputStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setPhone(java.lang.String)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.Address: java.lang.String toString()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.Permissions: java.util.Enumeration elements()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateMenuRole(java.lang.Integer,java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PermissController: org.javaboy.vhr.model.RespBean updateMenuRole(java.lang.Integer,java.lang.Integer[])>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: java.util.Iterator multiValueIterator(java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Constructor findConstructor(java.lang.Class,boolean)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<sun.net.www.protocol.http.HttpURLConnection$7: java.net.ProxySelector run()>-><java.net.ProxySelector: java.net.ProxySelector getDefault()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$LongArrayNode: java.util.Spliterator spliterator()>
<org.apache.catalina.connector.ResponseFacade: boolean isFinished()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><sun.net.www.protocol.http.HttpURLConnection$10: java.lang.Object run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: int characteristics()>
<java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setaccumulationfundper(java.lang.Float)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createProxy(com.rabbitmq.client.Channel,boolean)>-><org.springframework.aop.support.NameMatchMethodPointcutAdvisor: void <init>(org.aopalliance.aop.Advice)>
<sun.net.www.MeteredStream: void close()>-><java.io.ByteArrayInputStream: void close()>
<org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.security.MessageDigest: void update(byte[])>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.BasicAuthentication: boolean supportsPreemptiveAuthorization()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection$10: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$10: java.io.IOException run()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.CompletableFuture: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Package: java.lang.String toString()>
<org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object resolveReference(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.beans.FeatureDescriptor: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.SliceOps$1: java.util.Spliterator unorderedSkipLimitSpliterator(java.util.Spliterator,long,long,long)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: java.util.List getAllRoles(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><java.util.Vector: int size()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: boolean isOpen()>-><com.rabbitmq.client.impl.recovery.AutorecoveringChannel: boolean isOpen()>
<sun.net.www.http.KeepAliveStreamCleaner$1: java.lang.Integer run()>-><sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<sun.util.logging.PlatformLogger: void fine(java.lang.String)>-><sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>
<reactor.core.publisher.Operators: void onDiscard(java.lang.Object,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.MeteredStream: int read()>-><com.rabbitmq.client.impl.TruncatedInputStream: int read()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setWorkState(java.lang.String)>
<java.io.FilterOutputStream: void flush()>-><sun.net.httpserver.SSLStreams$OutputStream: void flush()>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(javax.servlet.http.HttpServletRequest)>-><org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.net.URI: void maybeAddLeadingDot(char[],int[])>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.SequenceInputStream: int read(byte[],int,int)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><com.rabbitmq.client.impl.nio.SslEngineByteBufferOutputStream: void write(int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.Proxy: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setnotworkdate(java.util.Date)>
<ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: int length()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.util.Base64$Decoder: byte[] decode(java.lang.String)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Spliterators$IntArraySpliterator: boolean tryAdvance(java.lang.Object)>-><java.util.Spliterators$IntArraySpliterator: boolean tryAdvance(java.util.function.IntConsumer)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.IdentityHashMap$KeySpliterator: int characteristics()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType getContentType()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.FilterInputStream: void mark(int)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: void forEach(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long acquirePermits(long)>-><java.lang.Math: long min(long,long)>
<synthetic.method.JobLevelMapperImpl: int insertSelective(org.javaboy.vhr.model.JobLevel)>-><org.javaboy.vhr.model.JobLevel: java.lang.String getName()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.javaboy.vhr.model.JobLevel: int hashCode()>-><java.util.Objects: int hash(java.lang.Object[])>
<sun.net.ProgressSource: void beginTracking()>-><sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator$OfDouble spliterator()>-><java.util.stream.Nodes$InternalNodeSpliterator$OfDouble: void <init>(java.util.stream.Node$OfDouble)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void write(java.lang.String)>-><java.lang.String: int length()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.io.PushbackInputStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>-><sun.net.www.MessageHeader: java.lang.String[] access$100(sun.net.www.MessageHeader)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><java.text.MessageFormat: int hashCode()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.lang.String: int indexOf(java.lang.String,int)>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><sun.security.x509.X500Name: sun.security.util.DerValue findMostSpecificAttribute(sun.security.util.ObjectIdentifier)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getJobLevelId()>
<javax.security.auth.Policy$3: java.lang.Void run()>-><javax.security.auth.Policy: boolean access$002(boolean)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$EmptySpliterator: long estimateSize()>
<java.io.BufferedInputStream: void fill()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllNations(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.io.PushbackInputStream: void close()>-><java.io.InputStream: void close()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.LinkedList$LLSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Float getMedicalPer()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.Nodes$InternalNodeSpliterator: int characteristics()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.stream.SliceOps: java.util.function.IntFunction access$100()>-><java.util.stream.SliceOps: java.util.function.IntFunction castingArray()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator spliterator()>
<org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>-><java.lang.String: int hashCode()>
<synthetic.method.PositionMapperImpl: int insertSelective(org.javaboy.vhr.model.Position)>-><org.javaboy.vhr.model.Position: java.lang.Boolean getEnabled()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.net.SocketInputStream: void close()>-><java.net.AbstractPlainSocketImpl: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: long estimateSize()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><sun.net.ProgressSource: java.lang.String toString()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.HeapCharBuffer: char get()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.String: char charAt(int)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Spliterators$LongArraySpliterator: int characteristics()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: void finished()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.SelectionRecord: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Vector$1: java.lang.Object nextElement()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getWorkState()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<java.util.Collections$SetFromMap: boolean remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object remove(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.beans.CachedIntrospectionResults: boolean isClassLoaderAccepted(java.lang.ClassLoader)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.util.Date getBirthday()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getwedlock()>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><synthetic.method.datatable.HR: void setenabled(java.lang.Boolean)>
<java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: void <init>()>-><org.javaboy.vhr.controller.system.HrController: void <init>()>
<sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap: void putAll(java.util.Map)>
<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>-><java.io.PrintStream: void flush()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.HttpURLConnection: int getResponseCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><java.io.InputStream: void close()>
<org.javaboy.vhr.controller.config.SystemConfigController$$InterceptorProxy: java.util.List getMenusByHrId(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrRole(java.lang.Integer,java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.HrController: org.javaboy.vhr.model.RespBean updateHrRole(java.lang.Integer,java.lang.Integer[])>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$FixedNodeBuilder: void end()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.io.DataOutputStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Double getContractTerm()>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.lang.Object: void notifyAll()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1: java.util.stream.Sink opWrapSink(int,java.util.stream.Sink)>-><java.util.stream.SliceOps$1$1: void <init>(java.util.stream.SliceOps$1,java.util.stream.Sink)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllDepartments(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.io.FilterInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<sun.security.util.HostnameChecker: sun.security.x509.X500Name getSubjectX500Name(java.security.cert.X509Certificate)>-><java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><org.javaboy.vhr.model.Hr: java.lang.String getTelephone()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getjoblevelid()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.Object next()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator spliterator()>
<synthetic.method.PositionMapperImpl: int insertSelective(org.javaboy.vhr.model.Position)>-><org.javaboy.vhr.model.Position: java.util.Date getCreateDate()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: java.util.List getAllPositions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.util.ArrayList: void <init>()>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.MeteredStream: int read()>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>-><java.lang.Object: void <init>()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.charset.CoderResult: boolean isUnderflow()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: void writeToCache(byte[],int,int)>-><org.springframework.web.util.ContentCachingRequestWrapper: java.io.ByteArrayOutputStream access$100(org.springframework.web.util.ContentCachingRequestWrapper)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: void <init>()>
<synthetic.method.HrMapperImpl: int deleteByPrimaryKey(java.lang.Integer)>-><synthetic.method.datatable.HR: java.lang.Integer getid()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.Streams$ConcatSpliterator: long estimateSize()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongArrayNode: java.util.Spliterator$OfPrimitive spliterator()>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.Nodes$IntFixedNodeBuilder: void accept(int)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<synthetic.method.PositionMapperImpl: java.util.List getAllPositions()>-><org.javaboy.vhr.model.Position: void setEnabled(java.lang.Boolean)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode$OfRef: java.util.Spliterator spliterator()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<synthetic.method.MenuMapperImpl: java.util.List getMidsByRid(java.lang.Integer)>-><synthetic.method.datatable.MENUROLE: java.lang.Integer[] getmid()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Character$Subset: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setidcard(java.lang.String)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<java.util.zip.InflaterInputStream: void fill()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: void <init>(java.util.Spliterator,long,long)>-><java.util.concurrent.atomic.AtomicLong: void <init>(long)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<java.io.DataInputStream: short readShort()>-><sun.net.www.http.ChunkedInputStream: int read()>
<sun.net.www.HeaderParser: int findInt(java.lang.String,int)>-><java.lang.Integer: int parseInt(java.lang.String)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setNation(org.javaboy.vhr.model.Nation)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void grow()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.ZonedDateTime: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.AbstractTask: void onCompletion(java.util.concurrent.CountedCompleter)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<synthetic.method.JobLevelMapperImpl: java.util.List getAllJobLevels()>-><org.javaboy.vhr.model.JobLevel: void setEnabled(java.lang.Boolean)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><sun.net.www.protocol.http.HttpURLConnection$2: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: void <init>()>-><org.javaboy.vhr.controller.salary.SobConfigController: void <init>()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.AbstractPipeline: void copyIntoWithCancel(java.util.stream.Sink,java.util.Spliterator)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.Provider$Service: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Vector$VectorSpliterator: long estimateSize()>
<java.io.BufferedInputStream: int available()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$DoubleArraySpliterator: java.util.Spliterator trySplit()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getspecialty()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.security.util.HostnameChecker: boolean isIpAddress(java.lang.String)>-><sun.net.util.IPAddressUtil: boolean isIPv6LiteralAddress(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getspecialty()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllPoliticsstatus(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map getHeaders()>-><sun.net.www.MessageHeader: java.util.Map getHeaders(java.lang.String[])>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Collections$2: long estimateSize()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer limit(int)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.javaboy.vhr.controller.config.SystemConfigController$$InterceptorProxy: java.util.List getMenusByHrId(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.config.SystemConfigController: java.util.List getMenusByHrId()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deletePositionById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.text.MessageFormat: boolean equals(java.lang.Object)>-><java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>-><sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrRole(java.lang.Integer,java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.ChunkedInputStream: void ensureRawAvailable(int)>
<sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicy()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.util.Date getNotWorkDate()>
<io.netty.util.internal.DefaultPriorityQueue: boolean removeTyped(io.netty.util.internal.PriorityQueueNode)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<org.javaboy.vhr.model.Politicsstatus: int hashCode()>-><java.util.Objects: int hash(java.lang.Object[])>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.io.FileInputStream: void close()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.javaboy.vhr.model.Nation: int hashCode()>-><java.util.Objects: int hash(java.lang.Object[])>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>
<sun.net.www.http.KeepAliveStream: void close()>-><java.lang.Math: long min(long,long)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: long getContentLengthLong()>-><java.net.URLConnection: long getContentLengthLong()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><java.io.FileInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.ProtocolException: void <init>(java.lang.String)>
<org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy: void setMessageSource(org.springframework.context.MessageSource)>-><org.springframework.context.support.MessageSourceAccessor: void <init>(org.springframework.context.MessageSource)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<java.util.stream.SliceOps$SliceTask: void <init>(java.util.stream.SliceOps$SliceTask,java.util.Spliterator)>-><java.util.stream.AbstractShortCircuitTask: void <init>(java.util.stream.AbstractShortCircuitTask,java.util.Spliterator)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: void <init>()>-><org.javaboy.vhr.controller.LoginController: void <init>()>
<java.util.stream.Node$OfLong: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode: void forEach(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.aop.support.NameMatchMethodPointcutAdvisor: org.springframework.aop.support.NameMatchMethodPointcut addMethodName(java.lang.String)>-><org.springframework.aop.support.NameMatchMethodPointcut: org.springframework.aop.support.NameMatchMethodPointcut addMethodName(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.HttpsClient: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><java.net.SocketInputStream: void close()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: void end()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: long estimateSize()>
<java.io.FilterInputStream: void reset()>-><java.io.FilterInputStream: void reset()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedCollection: int size()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.apache.tomcat.util.buf.CharChunk: void <init>(int)>-><org.apache.tomcat.util.buf.AbstractChunk: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<synthetic.method.PoliticsstatusMapperImpl: java.util.List getAllPoliticsstatus()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.stream.StreamSpliterators$ArrayBuffer: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer: void reset()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>
<javax.security.auth.SubjectDomainCombiner$3: void <init>(javax.security.auth.SubjectDomainCombiner,javax.security.auth.Subject,java.security.CodeSource)>-><java.lang.Object: void <init>()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setSpecialty(java.lang.String)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getAllMenus(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.Area3DPtg: java.lang.String toString()>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: int length()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><java.lang.Double: double doubleValue()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: java.lang.String getHostName()>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: long estimateSize()>
<org.springframework.aop.support.NameMatchMethodPointcutAdvisor: void <init>(org.aopalliance.aop.Advice)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: void <init>()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHr(org.javaboy.vhr.model.Hr,org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicy()>-><javax.security.auth.AuthPermission: void <init>(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: void <init>()>
<java.io.FilterInputStream: int read()>-><sun.net.www.MeteredStream: int read()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.ZoneId: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.AbstractCollection: java.lang.Object[] toArray()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getemail()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: void forEach(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String getAttribute()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setlunchsalary(java.lang.Integer)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: void justRead(long)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Short: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Streams$ConcatSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setWedlock(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Department getdepartment()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.WindowOneRecord: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.util.Spliterator trySplit()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><sun.net.www.MeteredStream: void justRead(long)>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<java.util.stream.ReferencePipeline$7$1: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.Vector: int size()>
<synthetic.method.MailSendLogMapperImpl: java.lang.Integer insert(org.javaboy.vhr.model.MailSendLog)>-><synthetic.method.datatable.MAILSENDLOG: void settrytime(java.util.Date)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><org.javaboy.vhr.model.Department: void setId(java.lang.Integer)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<sun.security.util.HostnameChecker: sun.security.util.HostnameChecker getInstance(byte)>-><java.lang.StringBuilder: void <init>()>
<org.apache.tomcat.util.buf.UEncoder: void urlEncode(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.AbstractChunk: int getStart()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void forEachRemaining(java.util.function.Consumer)>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><io.netty.channel.nio.NioEventLoop: void wakeup(boolean)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.net.httpserver.SSLStreams$OutputStream: void write(byte[],int,int)>
<sun.net.www.http.KeepAliveStreamCleaner: boolean offer(sun.net.www.http.KeepAliveCleanerEntry)>-><java.util.LinkedList: boolean offer(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfLong: void <init>(java.util.stream.Node$OfLong)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.Integer: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void connect()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.net.URL: java.lang.String getProtocol()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.MergeCellsRecord: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Node: int getChildCount()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.MeteredStream: void finalize()>-><sun.net.ProgressSource: void close()>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addEmp(org.javaboy.vhr.model.Employee,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>
<sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String,long)>-><sun.net.ProgressMonitor: int getProgressUpdateThreshold()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Salary getsalary()>
<java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.SliceOps$1$1: boolean cancellationRequested()>-><java.util.stream.FindOps$FindSink: boolean cancellationRequested()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.AbstractChunk: int getLength()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.WildcardPathElement: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<synthetic.method.PositionMapperImpl: java.util.List getAllPositions()>-><synthetic.method.datatable.POSITION: java.lang.Boolean getenabled()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.flywaydb.core.api.callback.Event: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$10: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.IOException,java.lang.Object[])>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.net.URLConnection: java.net.URL getURL()>
<org.springframework.web.context.request.ServletRequestAttributes: void registerSessionDestructionCallback(java.lang.String,java.lang.Runnable)>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession obtainSession()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.Provider$UString: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<sun.net.www.http.HttpClient: void openServer()>-><java.net.Proxy: java.net.Proxy$Type type()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void set(int,java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void grow()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.util.AbstractCollection: java.lang.String toString()>
<java.util.ArrayList$SubList$1: void add(java.lang.Object)>-><java.util.ArrayList$SubList: void add(int,java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.javaboy.vhr.model.RespPageBean getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.net.URL: int getPort()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.MonoCallableOnAssembly: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<synthetic.method.JobLevelMapperImpl: java.util.List getAllJobLevels()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<org.javaboy.vhr.controller.config.SystemConfigController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.javaboy.vhr.controller.config.SystemConfigController getSystemConfigController()>
<org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>-><java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.CalcCountRecord: java.lang.String toString()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: java.lang.String getHostString()>
<java.io.PrintStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<org.springframework.aop.framework.ProxyFactory: void <init>(java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport: void setInterfaces(java.lang.Class[])>
<sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.Integer: int parseInt(java.lang.String)>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>-><sun.net.www.MessageHeader: java.lang.String[] access$200(sun.net.www.MessageHeader)>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: void finer(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.lang.Object next()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.util.Map$Entry next()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$RangeIntSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<java.net.HttpConnectSocketImpl: int getPort()>-><java.net.SocketImpl: int getPort()>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: java.util.Spliterator trySplit()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><synthetic.method.datatable.HR: java.lang.String getuserface()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getname()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String reducePath(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int indexOf(int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getBasicSalary()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setmedicalper(java.lang.Float)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.String: char charAt(int)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><sun.net.www.protocol.http.HttpURLConnection$12: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String,int,java.net.URL)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: java.lang.String substring(int)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><org.javaboy.vhr.model.Hr: void setEnabled(java.lang.Boolean)>
<com.fasterxml.jackson.databind.JsonMappingException: void <init>(java.io.Closeable,java.lang.String)>-><com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.impl.recovery.AutorecoveringChannel: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.ByteArrayOutputStream: void write(int)>
<java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><synthetic.method.datatable.HR: java.lang.Integer getid()>
<java.util.stream.Nodes: java.util.stream.Node emptyNode(java.util.stream.StreamShape)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.io.FilterInputStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getAllRoles(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.AbstractShortCircuitTask: void setLocalResult(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.FilterOutputStream: void close()>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.stream.Nodes$InternalNodeSpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Spliterators$IntIteratorSpliterator: long estimateSize()>
<java.io.FilterInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void settiptopdegree(java.lang.String)>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteJobLevelById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.security.ProtectionDomain$2: boolean getStaticPermissionsField(java.security.ProtectionDomain)>-><java.security.ProtectionDomain: boolean access$200(java.security.ProtectionDomain)>
<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Variable getKey()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<sun.net.www.http.KeepAliveStreamCleaner$1: java.lang.Object run()>-><sun.net.www.http.KeepAliveStreamCleaner$1: java.lang.Integer run()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$OfDouble: void forEach(java.util.function.Consumer)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.Spliterators$LongArraySpliterator: boolean tryAdvance(java.lang.Object)>
<sun.security.util.HostnameChecker: sun.security.x509.X500Name getSubjectX500Name(java.security.cert.X509Certificate)>-><java.security.cert.CertificateParsingException: void <init>()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.javaboy.vhr.controller.system.HrController getHrController()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Node$OfInt: void forEach(java.util.function.Consumer)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.security.util.HostnameChecker: sun.security.x509.X500Name getSubjectX500Name(java.security.cert.X509Certificate)>-><sun.security.x509.X500Name: void <init>(byte[])>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.slf4j.event.Level: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>-><org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getMethod()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: sun.net.www.HeaderParser subsequence(int,int)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>-><org.apache.tomcat.util.buf.AbstractChunk: int getLimit()>
<synthetic.method.NationMapperImpl: java.util.List getAllNations()>-><org.javaboy.vhr.model.Nation: void <init>()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getMedicalBase()>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL,java.lang.String,int)>-><java.lang.Object: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>-><java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.WeakHashMap$EntrySpliterator: int characteristics()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.rabbitmq.client.impl.ValueWriter: void writeTable(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<sun.net.www.protocol.http.HttpURLConnection$11: java.net.InetAddress run()>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.nio.ByteBuffer: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.util.Date getConversionTime()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<java.util.Collections$SetFromMap: void clear()>-><org.springframework.util.LinkedCaseInsensitiveMap: void clear()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Object run()>-><sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Nation getnation()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void setDaemon(boolean)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.CharChunk: int subtract()>
<javax.net.ssl.SSLSocketFactory: java.lang.String getSecurityProperty(java.lang.String)>-><javax.net.ssl.SSLSocketFactory$1: void <init>(java.lang.String)>
<sun.security.util.HostnameChecker: sun.security.util.HostnameChecker getInstance(byte)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<java.util.Spliterators$EmptySpliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>-><java.util.Spliterators$EmptySpliterator: boolean tryAdvance(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllDepartments(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Byte: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<com.rabbitmq.client.impl.AMQChannel: void cleanRpcChannelState()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.PrintStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.HashSet: int size()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.io.FileInputStream: int read(byte[],int,int)>
<java.io.FilterInputStream: void mark(int)>-><com.rabbitmq.client.impl.TruncatedInputStream: void mark(int)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><java.util.LinkedHashMap: void <init>()>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.SpinedBuffer$OfLong$1Splitr: boolean tryAdvance(java.util.function.LongConsumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: java.util.List getAllRoles(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.util.StringTokenizer: java.lang.String nextToken()>
<java.net.URL: int getDefaultPort()>-><sun.net.www.protocol.https.Handler: int getDefaultPort()>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.charset.CoderResult: boolean isOverflow()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<synthetic.method.RoleMapperImpl: java.util.List getAllRoles()>-><org.javaboy.vhr.model.Role: void setNameZh(java.lang.String)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: java.util.List getAllSalaries(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: boolean isOpen()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><sun.net.www.protocol.http.HttpURLConnection$10: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.IOException,java.lang.Object[])>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.Operators$ScalarSubscription: boolean isEmpty()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getMethod()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updatePositions(org.javaboy.vhr.model.Position,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.InputStream,java.net.CacheRequest)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><sun.net.www.ParseUtil: boolean match(char,long,long)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$IdentityHashMapSpliterator: long estimateSize()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.security.web.access.ExceptionTranslationFilter: void afterPropertiesSet()>
<java.net.HttpConnectSocketImpl$2: java.lang.Object run()>-><java.net.HttpConnectSocketImpl$2: java.net.Socket run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.String: java.lang.String toString()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: com.rabbitmq.client.AMQP$Confirm$SelectOk confirmSelect()>
<java.util.stream.Nodes: java.util.stream.Node emptyNode(java.util.stream.StreamShape)>-><java.lang.StringBuilder: void <init>()>
<org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object,java.lang.Throwable)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner$1: java.lang.Void run()>-><javax.security.auth.SubjectDomainCombiner: sun.security.util.Debug access$100()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.catalina.connector.Response$PrivilegedDoIsEncodable: java.lang.Boolean run()>-><org.apache.catalina.connector.Response: boolean access$000(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>-><sun.net.NetworkClient: void setReadTimeout(int)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.io.DataOutputStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<org.springframework.web.util.pattern.PathPattern: int compareTo(org.springframework.web.util.pattern.PathPattern)>-><java.util.Comparators$NullComparator: int compare(java.lang.Object,java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<javax.security.auth.Policy$3: void <init>(javax.security.auth.Policy,java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Node$OfLong: void forEach(java.util.function.Consumer)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setworkstate(java.lang.String)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.apache.poi.util.LittleEndianOutputStream: void writeInt(int)>-><java.io.PrintStream: void write(int)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.net.SocketInputStream: int read(byte[])>
<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.StreamOpFlag: boolean isKnown(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: void begin(long)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.net.www.MessageHeader: void set(int,java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><java.io.BufferedInputStream: void close()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void setIfNotSet(java.lang.String,java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Spliterators$ArraySpliterator: long estimateSize()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Spliterators$EmptySpliterator: long estimateSize()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.SubjectDomainCombiner$3: java.lang.Object run()>
<sun.net.www.http.KeepAliveStreamCleaner: boolean offer(sun.net.www.http.KeepAliveCleanerEntry)>-><java.util.LinkedList: int size()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: java.lang.String substring(int,int)>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deletePositionsByIds(java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>-><sun.nio.cs.US_ASCII: java.nio.charset.CharsetEncoder newEncoder()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getwedlock()>
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteEmpByEid(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.lang.String: java.lang.String valueOf(int)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.net.URI: java.net.URI normalize()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void reset()>-><java.io.FilterInputStream: void reset()>
<java.io.FilterInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.util.Date getBirthday()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><sun.net.ProgressSource: java.lang.String toString()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsWithOutChildren()>-><synthetic.method.datatable.DEPARTMENT: java.lang.String getdeppath()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><org.apache.catalina.util.SessionConfig: java.lang.String getSessionUriParamName(org.apache.catalina.Context)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpCaptureInputStream: void <init>(java.io.InputStream,sun.net.www.http.HttpCapture)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>-><com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Double getcontractterm()>
<java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int)>
<synthetic.method.JobLevelMapperImpl: java.util.List getAllJobLevels()>-><synthetic.method.datatable.JOBLEVEL: synthetic.method.datatable.JOBLEVEL getInstance()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$DoubleArrayNode: void forEach(java.lang.Object)>
<java.util.stream.Node$OfDouble: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode: void forEach(java.lang.Object)>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: void reset()>
<java.io.DataOutputStream: void writeShort(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: void <init>()>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.String getName()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.Buffer: int position()>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.InputStream: long skip(long)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><java.io.InputStream: void close()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setNationId(java.lang.Integer)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$DoubleArraySpliterator: boolean tryAdvance(java.util.function.DoubleConsumer)>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setWedlock(java.lang.String)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><java.io.IOException: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void <init>()>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.io.FilterInputStream: void mark(int)>-><java.io.InputStream: void mark(int)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: java.lang.String getProtocol()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.UndertowHeadersAdapter)>-><java.lang.Object: void <init>()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getpoliticid()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Value getValue()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$1Splitr: java.util.Spliterator trySplit()>
<java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfInt: boolean tryAdvance(java.util.function.IntConsumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.SaveRecalcRecord: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.MessageHeader: void set(int,java.lang.String,java.lang.String)>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.CountDownLatch: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.Objects: int hashCode(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.ChunkedInputStream: void processRaw()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><java.net.ProtocolException: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.util.MimeType: java.lang.String toString()>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getExpected()>
<java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator$OfLong spliterator()>-><java.util.Spliterators: java.util.Spliterator$OfLong emptyLongSpliterator()>
<java.util.stream.Nodes$ConcNode: java.lang.String toString()>-><java.lang.Long: java.lang.Long valueOf(long)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.FilterInvocation: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.CharChunk: char[] getBuffer()>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.ResourceLeakDetector$TraceRecord: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.CodepageRecord: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<java.text.AttributeEntry: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$1: java.util.Iterator iterator()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Vector$Itr: boolean hasNext()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<java.lang.System$2: void invokeFinalize(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void finalize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.constant.ErrorConstant: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><sun.net.www.http.ChunkedOutputStream: void reset()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.SliceOps: long access$300(long,long,long)>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Hr: int hashCode()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: void setAttribute(java.lang.String,java.lang.Object,int)>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession obtainSession()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.net.URL: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><sun.net.www.http.ChunkedInputStream: void closeUnderlying()>
<java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: java.util.Spliterator trySplit()>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><java.io.InputStream: int read(byte[],int,int)>
<synthetic.method.JobLevelMapperImpl: java.util.List getAllJobLevels()>-><synthetic.method.datatable.JOBLEVEL: java.lang.String gettitlelevel()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<org.apache.catalina.connector.ResponseFacade$FlushBufferPrivilegedAction: java.lang.Void run()>-><org.apache.catalina.connector.Response: void setAppCommitted(boolean)>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.io.BufferedInputStream: void fill()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.security.x509.X500Name: void <init>(byte[])>-><java.lang.Object: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.http.HttpClient: boolean getHttpKeepAliveSet()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<synthetic.method.JobLevelMapperImpl: int deleteByPrimaryKey(java.lang.Integer)>-><synthetic.method.datatable.JOBLEVEL: synthetic.method.datatable.JOBLEVEL getInstance()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.Period: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><java.security.cert.CertificateException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<sun.security.util.HostnameChecker: sun.security.util.HostnameChecker getInstance(byte)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.io.DataInputStream: char readChar()>-><sun.net.www.MeteredStream: int read()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.StringJoiner: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deletePositionsByIds(java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: long estimateSize()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.lang.Long getTotal(org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.Long getcount()>
<org.apache.catalina.connector.OutputBuffer: void close()>-><org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>-><java.lang.Object: void <init>()>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.BasicAuthentication: boolean supportsPreemptiveAuthorization()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.calendar.Era: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setEngageForm(java.lang.String)>
<java.io.BufferedInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$ArrayNode: long count()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.SpinedBuffer$1Splitr: long estimateSize()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: java.util.List getAllSalaries(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<synthetic.method.JobLevelMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.JobLevel)>-><synthetic.method.datatable.JOBLEVEL: void setcreatedate(java.util.Date)>
<javax.security.auth.Policy$2: javax.security.auth.Policy run()>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.nio.ByteOrder: java.lang.String toString()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.charset.CoderResult: boolean isMalformed()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addPosition(org.javaboy.vhr.model.Position,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PositionController: org.javaboy.vhr.model.RespBean addPosition(org.javaboy.vhr.model.Position)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.util.logging.PlatformLogger: void warning(java.lang.String)>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.StringBuilder: void <init>()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getTrafficSalary()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.io.FilterInputStream: void mark(int)>-><java.io.ByteArrayInputStream: void mark(int)>
<synthetic.method.EmployeeMapperImpl: java.lang.Integer addEmps(java.util.List)>-><synthetic.method.datatable.EMPLOYEE: synthetic.method.datatable.EMPLOYEE getInstance()>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.AbstractTask: boolean isRoot()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void disconnect()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.StringBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.text.DigitList: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Integer: int parseInt(java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.BufferedInputStream: void mark(int)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setjoblevelid(java.lang.Integer)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>-><java.util.SimpleTimeZone: int getRawOffset()>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.Thread: void <init>(java.lang.Runnable)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: void <init>()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.javaboy.vhr.model.Department: int hashCode()>-><java.util.Objects: int hash(java.lang.Object[])>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.flywaydb.core.api.Location: java.lang.String toString()>
<java.security.cert.CertificateException: void <init>()>-><java.security.GeneralSecurityException: void <init>()>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.http.ChunkedInputStream: int read()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: long estimateSize()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createProxy(com.rabbitmq.client.Channel,boolean)>-><org.springframework.aop.framework.ProxyFactory: void <init>(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.net.URL: int getPort()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getidcard()>
<sun.net.www.MeteredStream: void close()>-><java.io.FileInputStream: void close()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.ProgressSource: void updateProgress(long,long)>-><sun.net.ProgressSource: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.IterationRecord: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.ArrayList$ArrayListSpliterator: long estimateSize()>
<java.net.CookieHandler: java.net.CookieHandler getDefault()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><org.springframework.security.web.access.expression.WebExpressionVoter: boolean supports(java.lang.Class)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: synthetic.method.datatable.EMPLOYEE getInstance()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<java.io.BufferedInputStream: void close()>-><java.io.InputStream: void close()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.Character: boolean isSpaceChar(char)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.MeteredStream: void close()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.Nodes$InternalNodeSpliterator: int characteristics()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.Vector: void addElement(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: long estimateSize()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setGender(java.lang.String)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<sun.net.www.MeteredStream: int read()>-><java.net.SocketInputStream: int read()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setworkid(java.lang.String)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: int getNCCount()>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$LongArrayNode: long count()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: long estimateSize()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateEmp(org.javaboy.vhr.model.Employee,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode: long count()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long,long,long)>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsWithOutChildren()>-><org.javaboy.vhr.model.Department: void setEnabled(java.lang.Boolean)>
<org.springframework.context.expression.BeanFactoryResolver: java.lang.Object resolve(org.springframework.expression.EvaluationContext,java.lang.String)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.String)>
<synthetic.method.NationMapperImpl: java.util.List getAllNations()>-><org.javaboy.vhr.model.Nation: void setId(java.lang.Integer)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.Streams$ConcatSpliterator: int characteristics()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setconversiontime(java.util.Date)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long)>
<java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator$OfLong spliterator()>-><java.util.stream.Nodes$InternalNodeSpliterator$OfLong: void <init>(java.util.stream.Node$OfLong)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.stream.IntPipeline$9$1: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$DoubleArrayNode: void forEach(java.lang.Object)>
<sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>-><java.net.URL: java.lang.String getHost()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><org.javaboy.vhr.model.Department: void setResult(java.lang.Integer)>
<java.util.ComparableTimSort: void binarySort(java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.apache.tomcat.util.buf.CharChunk: void append(char)>-><org.apache.tomcat.util.buf.AbstractChunk: int getLimitInternal()>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><java.net.SocketInputStream: void close()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.MeteredStream: void close()>
<java.net.HttpURLConnection: int getResponseCode()>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.SubList$1: int previousIndex()>
<sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String,long)>-><java.lang.Object: void <init>()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$LongArrayNode: long count()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream access$100(sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setaccumulationfundbase(java.lang.Integer)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.ChunkedInputStream: void closeUnderlying()>-><sun.net.www.http.HttpClient: void finished()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addRole(org.javaboy.vhr.model.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.HeaderParser$ParserIterator: void <init>(sun.net.www.HeaderParser,boolean)>-><java.lang.Object: void <init>()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getname()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getschool()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void setTrafficSalary(java.lang.Integer)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String exceptionMessage(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.util.StringTokenizer: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteDepById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxCreate$IgnoreSink: java.lang.String toString()>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.util.Hashtable: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>-><java.io.StringReader: int read()>
<org.springframework.util.MultiValueMapAdapter: int size()>-><java.util.Collections$UnmodifiableMap: int size()>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: void <init>()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveEntry: void <init>(sun.net.www.http.HttpClient,long)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.text.DateFormat: void setTimeZone(java.util.TimeZone)>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: java.util.Spliterator trySplit()>
<java.io.FilterInputStream: void mark(int)>-><org.apache.poi.poifs.filesystem.DocumentInputStream: void mark(int)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.InetSocketAddress: boolean isUnresolved()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.CellRecord: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getWorkState()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.AssertionError: void <init>()>
<org.springframework.aop.framework.ProxyFactory: java.lang.Object getProxy()>-><org.springframework.aop.framework.CglibAopProxy: java.lang.Object getProxy()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressMonitor: sun.net.ProgressMonitor getDefault()>
<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.reflect.Method determineDestroyMethod(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.http.HttpClient: void openServer()>-><sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.AssertionError: void <init>()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator$OfInt spliterator()>-><java.util.Spliterators: java.util.Spliterator$OfInt emptyIntSpliterator()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<reactor.core.Exceptions: java.lang.Throwable addSuppressed(java.lang.Throwable,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.lang.StringBuilder: void <init>()>
<java.io.FilterInputStream: void reset()>-><sun.net.httpserver.Request$ReadStream: void reset()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.util.MultiValueMapAdapter: java.util.List get(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.net.URI: void split(char[],int[])>-><java.lang.InternalError: void <init>()>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getnativeplace()>
<org.apache.catalina.connector.Response$PrivilegedEncodeUrl: java.lang.Object run()>-><org.apache.catalina.connector.Response$PrivilegedEncodeUrl: org.apache.tomcat.util.buf.CharChunk run()>
<java.io.FilterInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.util.stream.Node$OfDouble build()>
<synthetic.method.MenuRoleMapperImpl: void deleteByRid(java.lang.Integer)>-><synthetic.method.datatable.MENUROLE: java.lang.Integer getrid()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.HashSet: int size()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteEmpByEid(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser$ParserIterator: boolean hasNext()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<org.javaboy.vhr.utils.POIUtils: java.util.List excel2Employee(org.springframework.web.multipart.MultipartFile,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>-><org.javaboy.vhr.model.Politicsstatus: java.lang.Integer getId()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.BasicPermissionCollection: java.util.Enumeration elements()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: java.lang.Integer gettrafficsalary()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongArrayNode: long count()>
<org.apache.catalina.connector.OutputBuffer: void toReadMode(java.nio.Buffer)>-><java.nio.Buffer: int position()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getPath()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.http.ChunkedInputStream: int read()>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.Object: int hashCode()>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.URL: int getDefaultPort()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: long estimateSize()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.apache.poi.util.LittleEndianOutputStream: void writeUInt(long)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<java.net.InetSocketAddress: void <init>(int,java.lang.String)>-><java.net.InetSocketAddress$InetSocketAddressHolder: void <init>(java.lang.String,java.net.InetAddress,int,java.net.InetSocketAddress$1)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.http.PosterOutputStream: void close()>-><java.io.ByteArrayOutputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.protocol.http.HttpCallerInfo getHttpCallerInfo()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>
<java.util.Spliterator: boolean hasCharacteristics(int)>-><java.util.stream.Nodes$InternalNodeSpliterator: int characteristics()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: java.util.List getAllHrs(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: java.lang.String getString()>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void <init>(java.util.stream.Node)>-><java.util.stream.Nodes$InternalNodeSpliterator: void <init>(java.util.stream.Node)>
<sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getworkstate()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void <init>()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.util.CellReference: java.lang.String toString()>
<org.springframework.web.bind.ServletRequestBindingException: void <init>(java.lang.String,java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.http.ResponseEntity exportData(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.SortedOps$RefSortingSink: void begin(long)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.Nodes$EmptyNode: long count()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<synthetic.method.PositionMapperImpl: int insertSelective(org.javaboy.vhr.model.Position)>-><org.javaboy.vhr.model.Position: java.lang.String getName()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getid()>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Double getcontractterm()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: org.javaboy.vhr.model.RespBean login(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$10: java.io.IOException run()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>
<sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>-><javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$ConcatSpliterator: void forEachRemaining(java.util.function.Consumer)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Politicsstatus getpoliticsstatus()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.LinkedList$LLSpliterator: long estimateSize()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Nodes$ArrayNode: long count()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Spliterators$IntArraySpliterator: long estimateSize()>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.WeakHashMap$WeakHashMapSpliterator: long estimateSize()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.StringBuilder: void <init>()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><synthetic.method.datatable.HR: java.lang.Integer get!()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: org.javaboy.vhr.model.Nation getNation()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.AbstractChunk: void setOffset(int)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllPositions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList$Itr: boolean hasNext()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setEngageForm(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.NameXPtg: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.catalina.connector.ResponseFacade$FlushBufferPrivilegedAction: java.lang.Object run()>-><org.apache.catalina.connector.ResponseFacade$FlushBufferPrivilegedAction: java.lang.Void run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<java.io.FilterInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.Collections$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.JapaneseImperialCalendar: int computeFields(int,int)>-><java.util.SimpleTimeZone: int getRawOffset()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>-><java.net.URLConnection: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.KeepAliveCleanerEntry: sun.net.www.http.HttpClient getHttpClient()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void accept(int)>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteJobLevelById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.CharChunk: void append(char)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: void end()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Spliterators$DoubleArraySpliterator: long estimateSize()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$AbstractConcNode: java.util.stream.Node getChild(int)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.net.PlainSocketImpl: void <init>()>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Spliterators$ArraySpliterator: int characteristics()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.javaboy.vhr.model.Employee: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getworkid()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>-><java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Node$OfPrimitive: java.util.stream.Node getChild(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.DBCellRecord: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.ParseUtil: void appendEscape(java.lang.StringBuffer,byte)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.io.FilterInputStream: void reset()>-><sun.net.www.http.KeepAliveStream: void reset()>
<sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>-><sun.net.www.MessageHeader: int access$000(sun.net.www.MessageHeader)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: void <init>(java.net.URL,java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getContentType()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHr(org.javaboy.vhr.model.Hr,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteJobLevelsByIds(java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.JobLevelController: org.javaboy.vhr.model.RespBean deleteJobLevelsByIds(java.lang.Integer[])>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getconversiontime()>
<sun.net.www.HeaderParser: void parse()>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.time.format.DateTimeFormatterBuilder$ZoneTextPrinterParser: java.time.format.DateTimeFormatterBuilder$PrefixTree getTree(java.time.format.DateTimeParseContext)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.apache.tomcat.util.buf.ByteChunk: void <init>(int)>-><org.apache.tomcat.util.buf.ByteChunk: void allocate(int,int)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.MeteredStream: long skip(long)>-><sun.net.www.MeteredStream: long skip(long)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void mark(int)>-><java.io.FilterInputStream: void mark(int)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setdepartmentid(java.lang.Integer)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: java.lang.String getProtocol()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><synthetic.method.datatable.HR: java.lang.String gettelephone()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<java.net.URI: java.net.URI normalize(java.net.URI)>-><java.lang.String: int length()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.springframework.web.context.request.ServletRequestAttributes: void registerSessionDestructionCallback(java.lang.String,java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getidcard()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteEmpByEid(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.io.FilterOutputStream: void flush()>-><java.io.PrintStream: void flush()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.nio.cs.StreamDecoder: int readBytes()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.String: java.lang.String valueOf(char[])>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><java.net.SocketInputStream: void close()>
<java.util.stream.ReferencePipeline$StatefulOp: void <init>(java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int)>-><java.util.stream.IntPipeline: java.util.stream.StreamShape getOutputShape()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.util.StringTokenizer: java.lang.String nextToken()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>-><sun.net.www.protocol.http.HttpURLConnection$8: java.lang.Object run()>
<java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.ArrayList$SubList$1: int previousIndex()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: java.util.List getAllRoles(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.HrController: java.util.List getAllRoles()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setMessageSource(org.springframework.context.MessageSource)>-><org.springframework.context.support.MessageSourceAccessor: void <init>(org.springframework.context.MessageSource)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: int getKey(java.lang.String)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean maxWorkID(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.stream.SliceOps$SliceTask: boolean isLeftCompleted(long)>-><java.util.stream.SliceOps$SliceTask: long completedSize(long)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void ensureOpen()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: java.lang.Object next()>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>-><java.net.AbstractPlainSocketImpl: boolean isClosedOrPending()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteJobLevelsByIds(java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.net.URL: int getPort()>
<java.util.stream.Nodes$ConcNode$OfDouble: void <init>(java.util.stream.Node$OfDouble,java.util.stream.Node$OfDouble)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive,java.util.stream.Node$OfPrimitive)>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><org.javaboy.vhr.model.Hr: java.lang.String getPassword()>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.MeteredStream: void close()>
<reactor.core.publisher.Operators: void onErrorDropped(java.lang.Throwable,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.net.URI: java.net.URI normalize(java.net.URI)>-><java.net.URI: boolean isOpaque()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Currency: java.lang.String toString()>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpServletRequest _getHttpServletRequest()>-><javax.servlet.ServletRequestWrapper: javax.servlet.ServletRequest getRequest()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><synthetic.method.datatable.DEPARTMENT: java.lang.Integer getparentid()>
<java.net.URLPermission: java.lang.String actions()>-><java.lang.StringBuilder: void <init>()>
<java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.UUID: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: int hashCode()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>
<sun.net.httpserver.Request$ReadStream: int read(byte[],int,int)>-><java.nio.Buffer: int remaining()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$ArrayNode: long count()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateSalaryById(org.javaboy.vhr.model.Salary,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.salary.SalaryController: org.javaboy.vhr.model.RespBean updateSalaryById(org.javaboy.vhr.model.Salary)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getworkstate()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfInt: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: java.util.Spliterator trySplit()>
<sun.net.www.MeteredStream: long skip(long)>-><sun.net.httpserver.SSLStreams$InputStream: long skip(long)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void setMessageSource(org.springframework.context.MessageSource)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getbegincontract()>
<sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.text.MessageFormat: int hashCode()>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.MeteredStream: int read()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.io.IOException: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ThreadGroup: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.JobLevel: java.lang.String getName()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>
<java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator$OfDouble spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: org.javaboy.vhr.model.Position getPosition()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongArrayNode: long count()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.StringBuffer: void <init>(int)>
<sun.net.www.http.KeepAliveEntry: void <init>(sun.net.www.http.HttpClient,long)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.net.URL: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.LinkedList$LLSpliterator: long estimateSize()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: void setAttribute(java.lang.String,java.lang.Object,int)>-><org.springframework.web.context.request.AbstractRequestAttributes: boolean isRequestActive()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.apache.ibatis.parsing.XNode: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long,sun.net.www.http.HttpClient)>-><sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.Boolean: boolean getBoolean(java.lang.String)>
<org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(org.springframework.web.util.pattern.PathPattern)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.http.ChunkedInputStream: void close()>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Float getAccumulationFundPer()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.CharChunk: int subtract(char[],int,int)>-><org.apache.tomcat.util.buf.AbstractChunk: int getLength()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap: int size()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.http.HttpClient$1: java.lang.Object run()>-><sun.net.www.http.HttpClient$1: java.lang.Void run()>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setaccumulationfundper(java.lang.Float)>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.net.URL,java.net.PasswordAuthentication)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: java.lang.String substring(int,int)>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><java.util.concurrent.RejectedExecutionException: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setSchool(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int available()>-><java.io.FilterInputStream: int available()>
<java.util.stream.SliceOps$1$1: boolean cancellationRequested()>-><java.util.stream.MatchOps$BooleanTerminalSink: boolean cancellationRequested()>
<java.io.FilterInputStream: int available()>-><sun.net.www.MeteredStream: int available()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.ZoneOffset: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String exceptionMessage(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.context.i18n.LocaleContextHolder: java.util.Locale getLocale(org.springframework.context.i18n.LocaleContext)>-><org.springframework.context.i18n.SimpleLocaleContext: java.util.Locale getLocale()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.PasswordRev4Record: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: int indexOf(int)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getAttribute(java.lang.String,int)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction: java.lang.Object run()>-><org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction: java.lang.Void run()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$3: java.net.ResponseCache run()>-><java.net.ResponseCache: java.net.ResponseCache getDefault()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.net.www.MeteredStream: void justRead(long)>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int getResponseCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Locale: java.lang.String toString()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>-><java.lang.String: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsWithOutChildren()>-><synthetic.method.datatable.DEPARTMENT: java.lang.Boolean getenabled()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: java.lang.String getProtocol()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>
<synthetic.method.JobLevelMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.JobLevel)>-><org.javaboy.vhr.model.JobLevel: java.lang.String getName()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Node: int getChildCount()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getAuthority()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession()>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: java.lang.String printDomain(java.security.ProtectionDomain)>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setSchool(java.lang.String)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><synthetic.method.datatable.HR: java.lang.String getuserface()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.LinkedList: boolean addAll(java.util.Collection)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllNations(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><synthetic.method.datatable.HR: java.lang.String getaddress()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.Semaphore: java.lang.String toString()>
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>-><org.springframework.web.context.request.AbstractRequestAttributes: boolean isRequestActive()>
<java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.MessageHeader: void <init>()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<java.util.Collections$SetFromMap: java.util.Iterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: java.util.List getAllHrs(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><org.javaboy.vhr.model.Department: void setName(java.lang.String)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.FileOutputStream: void write(int)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getbegindate()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllNations(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController: java.util.List getAllNations()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.io.PrintStream: void write(byte[],int,int)>-><java.io.PrintStream: void flush()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.net.Proxy: java.lang.String toString()>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>-><java.net.PlainSocketImpl: int socketGetOption(int,java.lang.Object)>
<sun.net.www.HeaderParser$ParserIterator: java.lang.Object next()>-><sun.net.www.HeaderParser$ParserIterator: java.lang.String next()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Node: java.util.stream.Node getChild(int)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.ChunkedInputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.common.UnicodeString$FormatRun: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.protocol.http.HttpCallerInfo getHttpCallerInfo()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: int getPort()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: java.util.Spliterator makeSpliterator(java.util.Spliterator)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: void <init>(java.lang.String,int)>
<org.springframework.security.web.header.Header: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.aop.framework.ProxyFactory: java.lang.Object getProxy()>-><org.springframework.aop.framework.JdkDynamicAopProxy: java.lang.Object getProxy()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.LongPipeline: java.util.stream.Node$Builder makeNodeBuilder(long,java.util.function.IntFunction)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getschool()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: java.util.List getAllJobLevels(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.JobLevelController: java.util.List getAllJobLevels()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator$OfDouble spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Streams$ConcatSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.net.Proxy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><java.io.PrintStream: void flush()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<synthetic.method.MenuRoleMapperImpl: java.lang.Integer insertRecord(java.lang.Integer,java.lang.Integer[])>-><synthetic.method.datatable.MENUROLE: synthetic.method.datatable.MENUROLE getInstance()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.lang.Integer updateEmployeeSalaryById(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPSALARY: void seteid(java.lang.Integer)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.File: void <init>(java.lang.String,java.lang.String)>
<java.util.SimpleTimeZone: java.lang.Object clone()>-><java.util.TimeZone: java.lang.Object clone()>
<synthetic.method.PositionMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Position)>-><synthetic.method.datatable.POSITION: void setcreatedate(java.util.Date)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHr(org.javaboy.vhr.model.Hr,org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getPhone()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.beans.CachedIntrospectionResults: boolean isClassLoaderAccepted(java.lang.ClassLoader)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.io.DataInputStream: int readInt()>-><sun.net.www.MeteredStream: int read()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: int length()>
<java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><sun.security.util.Debug: void println(java.lang.String)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.AbstractPipeline: java.util.Spliterator wrapSpliterator(java.util.Spliterator)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isArrayType()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.net.ApplicationProxy: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.util.Date getCreateDate()>
<java.text.AttributeEntry: java.lang.String toString()>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.aop.support.NameMatchMethodPointcut: void <init>()>-><java.util.ArrayList: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<sun.security.ssl.Krb5Helper$1: java.lang.Object run()>-><sun.security.ssl.Krb5Helper$1: sun.security.ssl.Krb5Proxy run()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator spliterator()>
<sun.net.www.MessageHeader: java.util.Map getHeaders(java.lang.String[])>-><sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>
<org.javaboy.vhr.controller.LoginController: void verifyCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.MeteredStream: void close()>-><java.io.PushbackInputStream: void close()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void setPriority(int)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.concurrent.ForkJoinTask: java.lang.Object invoke()>
<org.apache.tomcat.util.buf.ByteChunk: void recycle()>-><org.apache.tomcat.util.buf.AbstractChunk: void recycle()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$9: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void setAccumulationFundBase(java.lang.Integer)>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addSalary(org.javaboy.vhr.model.Salary,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes: java.util.stream.Node$Builder$OfLong longBuilder(long)>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><org.springframework.util.AntPathMatcher: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void accept(java.lang.Object)>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntFixedNodeBuilder: void begin(long)>
<org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>-><java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void ensureOpen()>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.LinkedList: boolean add(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getbirthday()>
<sun.net.www.protocol.http.HttpURLConnection$7: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$7: java.net.ProxySelector run()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.Spliterators$DoubleArraySpliterator: boolean tryAdvance(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<synthetic.method.PositionMapperImpl: java.util.List getAllPositions()>-><org.javaboy.vhr.model.Position: void <init>()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><sun.nio.cs.ThreadLocalCoders: java.nio.charset.CharsetEncoder encoderFor(java.lang.Object)>
<java.io.FilterOutputStream: void flush()>-><java.io.BufferedOutputStream: void flush()>
<sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>-><java.util.HashMap: void putAll(java.util.Map)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><org.javaboy.vhr.model.Hr: void <init>()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.ByteBuffer: byte[] array()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.lang.String: char[] toCharArray()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.PasswordAuthentication privilegedRequestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: boolean cancellationRequested()>-><java.util.stream.Sink$ChainedReference: boolean cancellationRequested()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.util.Date: void <init>(long)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><org.apache.catalina.connector.ResponseFacade$FlushBufferPrivilegedAction: java.lang.Object run()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.Year: java.lang.String toString()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: void <init>(java.util.Spliterator,long,long,long,long)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean hasCharacteristics(int)>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.io.FileInputStream: int read(byte[],int,int)>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><org.javaboy.vhr.model.Hr: java.lang.String getUsername()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator spliterator()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsWithOutChildren()>-><org.javaboy.vhr.model.Department: void setName(java.lang.String)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.File: java.lang.String getCanonicalPath()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.security.AccessController: java.security.AccessControlContext getContext()>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<java.io.FilterInputStream: void reset()>-><java.io.BufferedInputStream: void reset()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.ChunkedInputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.net.Socket: void connect(java.net.SocketAddress,int)>-><java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<sun.net.www.http.HttpCaptureInputStream: void close()>-><java.io.FilterInputStream: void close()>
<java.lang.Object: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.NetworkClient$2: java.lang.Object run()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><java.io.InputStream: void close()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.naming.NamingException: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node$OfInt: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><java.util.zip.InflaterInputStream: long skip(long)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setBirthday(java.util.Date)>
<sun.net.www.http.ChunkedOutputStream: boolean checkError()>-><java.io.PrintStream: boolean checkError()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><java.io.InputStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: long estimateSize()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.KeepAliveStream: void mark(int)>
<synthetic.method.JobLevelMapperImpl: java.util.List getAllJobLevels()>-><synthetic.method.datatable.JOBLEVEL: java.lang.String getname()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.security.util.HostnameChecker: boolean match(java.lang.String,java.security.Principal)>-><sun.security.util.HostnameChecker: java.lang.String getServerName(java.security.Principal)>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$ConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>
<java.io.FilterOutputStream: void flush()>-><java.io.OutputStream: void flush()>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$LongArraySpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>-><java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.http.HttpClient: boolean isCachedConnection()>
<java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString()>-><javax.security.auth.Subject: java.lang.String toString(boolean)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><org.javaboy.vhr.model.Hr: void setUserface(java.lang.String)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.FindOps$FindSink: void accept(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: void writeToCache(byte[],int,int)>-><java.io.ByteArrayOutputStream: int size()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addJobLevel(org.javaboy.vhr.model.JobLevel,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hpsf.Section: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.lang.String: int length()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.awt.Point: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Sink$ChainedInt: void begin(long)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int,boolean)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: void remove()>
<java.text.MessageFormat: boolean equals(java.lang.Object)>-><java.util.Locale: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.MeteredStream: void justRead(long)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.WeakHashMap$KeySpliterator: int characteristics()>
<java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String reducePath(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator spliterator()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long acquirePermits(long)>-><java.lang.Math: long max(long,long)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><synthetic.method.datatable.HR: void setname(java.lang.String)>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<org.springframework.aop.support.StaticMethodMatcher: void <init>()>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setEmail(java.lang.String)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><java.util.HashMap: int size()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator$OfLong spliterator()>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getAttribute(java.lang.String,int)>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void closeServer()>
<java.net.HttpConnectSocketImpl: int getLocalPort()>-><java.net.SocketImpl: int getLocalPort()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.AbstractList$ListItr: int previousIndex()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$ArrayNode: java.util.Spliterator spliterator()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$DoubleArrayNode: java.util.Spliterator spliterator()>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Node: int getChildCount()>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String scheme()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.String: char charAt(int)>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setpensionbase(java.lang.Integer)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: java.util.List getAllDepartments(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.ProgressSource: void setContentType(java.lang.String)>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator spliterator()>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator$OfInt spliterator()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.io.DataOutputStream: void flush()>-><java.io.PrintStream: void flush()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<synthetic.method.PositionMapperImpl: int deleteByPrimaryKey(java.lang.Integer)>-><synthetic.method.datatable.POSITION: synthetic.method.datatable.POSITION getInstance()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.HttpClient: java.io.InputStream getInputStream()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setContractTerm(java.lang.Double)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.javaboy.vhr.model.RespPageBean getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getconversiontime()>
<org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: java.lang.Float getaccumulationfundper()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<sun.security.util.HostnameChecker: sun.security.util.HostnameChecker getInstance(byte)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Float getAccumulationFundPer()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.Buffer: int capacity()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getpoliticid()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.String: java.lang.String trim()>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.SubList$1: void add(java.lang.Object)>
<synthetic.method.PositionMapperImpl: int insertSelective(org.javaboy.vhr.model.Position)>-><synthetic.method.datatable.POSITION: void setname(java.lang.String)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.FileInputStream: int available()>
<java.net.Socket: int getSoTimeout()>-><java.net.Socket: boolean isClosed()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><sun.net.www.http.HttpClient: void closeServer()>
<synthetic.method.MailSendLogMapperImpl: java.lang.Integer insert(org.javaboy.vhr.model.MailSendLog)>-><synthetic.method.datatable.MAILSENDLOG: void setcreatetime(java.util.Date)>
<org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>-><org.apache.catalina.connector.OutputBuffer: int transfer(java.lang.String,int,int,java.nio.CharBuffer)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><org.javaboy.vhr.model.Department: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$EmptySpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.io.FilterInputStream: int read(byte[])>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.HeapCharBuffer: java.nio.CharBuffer get(char[],int,int)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrUserface(org.springframework.web.multipart.MultipartFile,java.lang.Integer,org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: boolean isAuthorizationStale(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.util.ClassTypeInformation: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.util.Base64: java.util.Base64$Encoder getEncoder()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator: void forEachRemaining(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.web.util.pattern.PatternParseException$PatternMessage: java.lang.String formatMessage(java.lang.Object[])>-><java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$FixedNodeBuilder: void begin(long)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.IdentityHashMap$IdentityHashMapSpliterator: long estimateSize()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator spliterator()>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator$OfDouble spliterator()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxHide$SuppressFuseableSubscriber: boolean isEmpty()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<reactor.core.publisher.Operators: void onNextDropped(java.lang.Object,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>-><java.lang.String: void <init>(byte[],int,int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.x509.Extension: java.lang.String toString()>
<org.springframework.security.access.expression.AbstractSecurityExpressionHandler: void setApplicationContext(org.springframework.context.ApplicationContext)>-><org.springframework.context.expression.BeanFactoryResolver: void <init>(org.springframework.beans.factory.BeanFactory)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: java.util.List getAllJobLevels(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.Integer: int parseInt(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setPosId(java.lang.Integer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.net.URL: int getPort()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.security.action.GetIntegerAction: java.lang.Object run()>-><sun.security.action.GetIntegerAction: java.lang.Integer run()>
<java.util.stream.SliceOps$1: java.util.Spliterator unorderedSkipLimitSpliterator(java.util.Spliterator,long,long,long)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>
<sun.net.NetworkClient$1: java.lang.Void run()>-><java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>-><java.lang.Math: long min(long,long)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: void setMessageSource(org.springframework.context.MessageSource)>-><org.springframework.context.support.MessageSourceAccessor: void <init>(org.springframework.context.MessageSource)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<org.apache.tomcat.util.buf.CharChunk: void append(char)>-><org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>
<java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$8: java.io.OutputStream run()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream access$100(sun.net.www.protocol.http.HttpURLConnection)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.LinkedList$ListItr: void add(java.lang.Object)>-><java.util.LinkedList: void linkLast(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>-><java.lang.Object: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.util.Date getBeginContract()>
<org.javaboy.vhr.model.Position: int hashCode()>-><java.util.Objects: int hash(java.lang.Object[])>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.BasicAuthentication: boolean supportsPreemptiveAuthorization()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><java.util.Stack: java.lang.Object push(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.Object: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String gettiptopdegree()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.io.PushbackInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><java.net.CookieHandler: java.net.CookieHandler getDefault()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.OutputStream: void close()>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getSessionMutex()>-><org.springframework.web.util.WebUtils: java.lang.Object getSessionMutex(javax.servlet.http.HttpSession)>
<java.util.concurrent.Executors$RunnableAdapter: java.lang.Object call()>-><io.netty.util.internal.ThreadExecutorMap$2: void run()>
<org.apache.catalina.connector.ResponseFacade: javax.servlet.ServletOutputStream getOutputStream()>-><org.apache.catalina.connector.ResponseFacade: boolean isFinished()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.Nodes$InternalNodeSpliterator: int characteristics()>
<java.io.BufferedInputStream: int available()>-><sun.net.www.MeteredStream: int available()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator spliterator()>
<java.util.stream.SliceOps$1$1: boolean cancellationRequested()>-><java.util.stream.SortedOps$AbstractRefSortingSink: boolean cancellationRequested()>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: int getKey(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.Integer: int intValue()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.text.ChoiceFormat: boolean equals(java.lang.Object)>-><java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$PermitStatus permitStatus()>-><java.util.concurrent.atomic.AtomicLong: long get()>
<java.util.Spliterators$EmptySpliterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>-><java.util.Spliterators$EmptySpliterator: void forEachRemaining(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setIdCard(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.security.access.SecurityConfig: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><java.io.FileInputStream: int read(byte[])>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.net.URL: int getDefaultPort()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.LinkedList$ListItr: int previousIndex()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.ObjectName: java.lang.String toString()>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String getAttribute()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.Vector: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$2: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.HttpClient: boolean isInKeepAliveCache()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: java.util.List getAllJobLevels(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicy()>-><javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.io.FilterInputStream: void reset()>-><java.util.zip.InflaterInputStream: void reset()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addJobLevel(org.javaboy.vhr.model.JobLevel,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.apache.catalina.connector.OutputBuffer: int transfer(java.lang.String,int,int,java.nio.CharBuffer)>-><java.lang.Math: int min(int,int)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: java.lang.String getname()>
<org.springframework.security.web.header.Header: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.context.request.AbstractRequestAttributesScope: java.lang.Object resolveContextualObject(java.lang.String)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object resolveReference(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.net.URL: int getPort()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.util.logging.PlatformLogger: void finest(java.lang.String)>-><sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: int transfer(java.lang.String,int,int,java.nio.CharBuffer)>-><java.nio.Buffer: int remaining()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.math.BigInteger: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: int characteristics()>
<sun.net.www.ParseUtil: boolean isEscaped(java.lang.String,int)>-><sun.net.www.ParseUtil: boolean match(char,long,long)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: long estimateSize()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getAttribute(java.lang.String,int)>-><org.springframework.web.context.request.AbstractRequestAttributes: boolean isRequestActive()>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()>
<org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>-><java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.lang.StringBuilder: void <init>()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getEngageForm()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode: long count()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setgender(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteJobLevelById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.JobLevelController: org.javaboy.vhr.model.RespBean deleteJobLevelById(java.lang.Integer)>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.net.HostPortrange: int[] defaultPort()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Nation: java.lang.String getName()>
<org.springframework.security.authentication.AnonymousAuthenticationProvider: void setMessageSource(org.springframework.context.MessageSource)>-><org.springframework.context.support.MessageSourceAccessor: void <init>(org.springframework.context.MessageSource)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.net.URL,java.net.PasswordAuthentication)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.springframework.security.web.util.matcher.OrRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.AbstractChunk: void setEnd(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: void closeUnderlying()>-><sun.net.www.http.ChunkedInputStream: boolean hurry()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getAllRoles(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PermissController: java.util.List getAllRoles()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Long: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: java.lang.String toString()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getGender()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.WeakHashMap$WeakHashMapSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<javax.security.auth.SubjectDomainCombiner$1: java.lang.Void run()>-><sun.security.util.Debug: void println(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$1Splitr: java.util.Spliterator trySplit()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.FileInputStream: void close()>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.http.ChunkedInputStream: int read()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><com.rabbitmq.client.impl.ShutdownNotifierComponent: boolean isOpen()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.String: int length()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.redis.listener.PatternTopic: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<synthetic.method.MailSendLogMapperImpl: java.lang.Integer insert(org.javaboy.vhr.model.MailSendLog)>-><synthetic.method.datatable.MAILSENDLOG: void setmsgid(java.lang.String)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.AbstractPipeline: long exactOutputSizeIfKnown(java.util.Spliterator)>
<sun.net.www.http.HttpCaptureInputStream: int read()>-><java.io.FilterInputStream: int read()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.net.URL: int getPort()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>-><sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void setCreateDate(java.util.Date)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean isReferenceType()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>-><org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Node$OfLong: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: java.util.List getAllPositions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.String: int length()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><org.springframework.amqp.rabbit.support.RabbitExceptionTranslator: java.lang.RuntimeException convertRabbitAccessException(java.lang.Throwable)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList: void <init>()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: java.lang.Integer getbonus()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.io.BufferedOutputStream: void flush()>-><java.io.PrintStream: void flush()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: java.util.Spliterator trySplit()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.net.Socket: int getLocalPort()>-><java.net.HttpConnectSocketImpl: int getLocalPort()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.io.BufferedInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><java.io.BufferedInputStream: void close()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$IntArrayNode: void forEach(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHr(org.javaboy.vhr.model.Hr,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><sun.net.util.IPAddressUtil: byte[] textToNumericFormatV6(java.lang.String)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$1: java.util.Iterator iterator()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.UndertowHeadersAdapter,org.springframework.http.server.reactive.UndertowHeadersAdapter$1)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$ConcatSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getnotworkdate()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><com.rabbitmq.client.impl.nio.ByteBufferOutputStream: void write(int)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.net.SocketInputStream: int read(byte[],int,int)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Policy$1: java.lang.String run()>-><java.security.Security: java.lang.String getProperty(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.bootstrap.AbstractBootstrap: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser$ParserIterator: java.lang.Object next()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getbegincontract()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: long getContentLengthLong()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.URL: java.lang.String getAuthority()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.io.FilterInputStream: void mark(int)>-><sun.net.www.http.KeepAliveStream: void mark(int)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: void openServer()>-><sun.net.NetworkClient: void openServer(java.lang.String,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: void setReadTimeout(int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllJobLevels(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: void cancel()>-><java.util.stream.AbstractShortCircuitTask: void setLocalResult(java.lang.Object)>
<synthetic.method.RoleMapperImpl: int insert(org.javaboy.vhr.model.Role)>-><org.javaboy.vhr.model.Role: java.lang.Integer getId()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.PrecisionRecord: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$ArrayNode: long count()>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long acquirePermits(long)>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setJobLevelId(java.lang.Integer)>
<java.util.AbstractList: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.URL: java.lang.String getProtocol()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap: void <init>()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><java.lang.ThreadLocal: void set(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$RangeIntSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><java.net.HttpURLConnection: void <init>(java.net.URL)>
<org.javaboy.vhr.utils.POIUtils: java.util.List excel2Employee(org.springframework.web.multipart.MultipartFile,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.SocketImpl: int getPort()>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: java.lang.String printDomain(java.security.ProtectionDomain)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: java.util.Map getHeaders(java.lang.String[])>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$EmptyNode: void forEach(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.SpinedBuffer$OfInt$1Splitr: boolean tryAdvance(java.util.function.IntConsumer)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>-><java.util.stream.Node$OfPrimitive: java.util.stream.Node getChild(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.BitSet: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: java.util.Map getHeaders()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.URL: java.lang.String getPath()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.security.x509.RDN: sun.security.util.DerValue findAttribute(sun.security.util.ObjectIdentifier)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.HashMap$KeySpliterator: int characteristics()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.util.stream.Node build()>
<synthetic.method.JobLevelMapperImpl: java.util.List getAllJobLevels()>-><org.javaboy.vhr.model.JobLevel: void setName(java.lang.String)>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntArrayNode: long count()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.EmptyInputStream: void <init>()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setendcontract(java.util.Date)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.String: java.lang.String toLowerCase()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addRole(org.javaboy.vhr.model.Role,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateJobLevelById(org.javaboy.vhr.model.JobLevel,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read()>-><org.apache.poi.poifs.filesystem.DocumentInputStream: int read()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.util.Pair: java.lang.String toString()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateEmp(org.javaboy.vhr.model.Employee,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.sql.Date: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.Streams$RangeIntSpliterator: int characteristics()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int lastIndexOf(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$ArraySpliterator: long estimateSize()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addJobLevel(org.javaboy.vhr.model.JobLevel,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.net.URL: java.lang.String getAuthority()>
<sun.net.www.protocol.http.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$OfLong: void forEach(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.nio.cs.StreamDecoder: int readBytes()>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>
<sun.net.www.MeteredStream: int read()>-><java.io.FilterInputStream: int read()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: int getResponseCode()>-><java.net.HttpURLConnection: int getResponseCode()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.io.InputStream: int read(byte[],int,int)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><javax.net.ssl.SSLSocketFactory: void log(java.lang.String)>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setReadTimeout(int)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getOpaque()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.net.URLConnection: long getContentLengthLong()>-><java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: int characteristics()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.http.ChunkedInputStream: int read()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getnativeplace()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.ReferencePipeline: java.util.stream.Node$Builder makeNodeBuilder(long,java.util.function.IntFunction)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.FileInputStream: int read(byte[],int,int)>
<org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object resolveReference(java.lang.String)>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void settrafficsalary(java.lang.Integer)>
<java.net.URLPermission: java.lang.String actions()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.util.LinkedHashMap$LinkedValues: void forEach(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.net.URI: java.net.URI normalize()>-><java.net.URI: java.net.URI normalize(java.net.URI)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>
<synthetic.method.NationMapperImpl: java.util.List getAllNations()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>
<sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>-><java.lang.String: int length()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setbirthday(java.util.Date)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: int deleteByPrimaryKey(java.lang.Integer)>-><synthetic.method.datatable.SALARY: synthetic.method.datatable.SALARY getInstance()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: long estimateSize()>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><io.netty.util.concurrent.SingleThreadEventExecutor: void wakeup(boolean)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.charset.CoderResult: boolean isError()>
<java.util.concurrent.Executors$DelegatedExecutorService: void shutdown()>-><java.util.concurrent.Executors$DelegatedExecutorService: void shutdown()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntFixedNodeBuilder: void end()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: boolean hurry()>-><sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><synthetic.method.datatable.HR: java.lang.Integer getid()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.net.ssl.SSLSocketFactory$1: java.lang.String run()>-><java.security.Security: java.lang.String getProperty(java.lang.String)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.nio.cs.StreamDecoder: int readBytes()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.nio.charset.Charset: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.springframework.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.net.Socket: void setSoLinger(boolean,int)>-><java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.HeaderParser: java.util.Iterator keys()>-><sun.net.www.HeaderParser$ParserIterator: void <init>(sun.net.www.HeaderParser,boolean)>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setmedicalbase(java.lang.Integer)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String reducePath(java.lang.String)>-><java.lang.String: int lastIndexOf(int)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<sun.net.www.MeteredStream: int available()>-><sun.net.httpserver.Request$ReadStream: int available()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<synthetic.method.NationMapperImpl: java.util.List getAllNations()>-><synthetic.method.datatable.NATION: java.lang.Integer getid()>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><sun.net.www.http.HttpClient: void closeServer()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long acquirePermits(long)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean importData(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(sun.net.www.protocol.http.HttpCallerInfo,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.ArrayPtg: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.security.web.FilterInvocation: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.http.KeepAliveStreamCleaner$2: java.lang.Object run()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllJobLevels(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<synthetic.method.JobLevelMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.JobLevel)>-><synthetic.method.datatable.JOBLEVEL: void setenabled(java.lang.Boolean)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$EmptyNode: long count()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteSalaryById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.apache.catalina.connector.Response$PrivilegedEncodeUrl: org.apache.tomcat.util.buf.CharChunk run()>-><org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>
<javax.net.ssl.SSLSocketFactory$1: java.lang.Object run()>-><javax.net.ssl.SSLSocketFactory$1: java.lang.String run()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.AbstractList$ListItr: void add(java.lang.Object)>-><java.util.AbstractList$Itr: void checkForComodification()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.Vector: int size()>
<java.io.PrintWriter: void newLine()>-><org.apache.catalina.connector.OutputBuffer: void write(java.lang.String)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.InputStream)>-><java.io.FilterInputStream: void <init>(java.io.InputStream)>
<java.io.DataInputStream: short readShort()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getPensionBase()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheValue: void <init>()>-><java.lang.Object: void <init>()>
<com.rabbitmq.client.impl.ForgivingExceptionHandler: void log(java.lang.String,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.Permission: java.lang.String toString()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Policy$2: javax.security.auth.Policy run()>-><java.util.concurrent.ForkJoinWorkerThread$InnocuousForkJoinWorkerThread: java.lang.ClassLoader getContextClassLoader()>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.ByteChunk: void <init>(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntArraySpliterator: java.util.Spliterator trySplit()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>-><java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.CryptoPermissionCollection: java.util.Enumeration elements()>
<java.util.stream.Sink$ChainedReference: boolean cancellationRequested()>-><java.util.stream.SliceOps$1$1: boolean cancellationRequested()>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setpoliticid(java.lang.Integer)>
<java.io.InputStream: int read(byte[],int,int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<synthetic.method.JobLevelMapperImpl: int insertSelective(org.javaboy.vhr.model.JobLevel)>-><org.javaboy.vhr.model.JobLevel: java.util.Date getCreateDate()>
<java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator spliterator()>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator$OfLong spliterator()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>-><java.lang.String: boolean endsWith(java.lang.String)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setspecialty(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean available()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<org.apache.catalina.connector.OutputBuffer: int transfer(java.lang.String,int,int,java.nio.CharBuffer)>-><org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllPositions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController: java.util.List getAllPositions()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.http.KeepAliveStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><org.javaboy.vhr.model.Hr: java.lang.String getUserface()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Politicsstatus getpoliticsstatus()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.net.URLPermission: java.lang.String actions()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.io.PrintWriter: void write(java.lang.String,int,int)>-><org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteDepById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.net.URLPermission: java.lang.String actions()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrPasswd(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.InetSocketAddress: java.lang.String getHostName()>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Socket: void <init>(java.net.Proxy)>
<org.springframework.aop.target.SingletonTargetSource: java.lang.Class getTargetClass()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: int characteristics()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean available()>-><java.net.Socket: void setSoTimeout(int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: org.javaboy.vhr.model.JobLevel getJobLevel()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: void remove()>
<sun.net.www.protocol.https.HttpsClient: java.net.Socket createSocket()>-><sun.net.NetworkClient: java.net.Socket createSocket()>
<sun.net.www.http.HttpCaptureOutputStream: void flush()>-><java.io.FilterOutputStream: void flush()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: int characteristics()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.LinkedList$LLSpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<java.util.AbstractList$ListItr: void add(java.lang.Object)>-><java.util.ConcurrentModificationException: void <init>()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.SubjectDomainCombiner$4: java.lang.Object run()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<synthetic.method.PoliticsstatusMapperImpl: java.util.List getAllPoliticsstatus()>-><synthetic.method.datatable.POLITICSSTATUS: synthetic.method.datatable.POLITICSSTATUS getInstance()>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createProxy(com.rabbitmq.client.Channel,boolean)>-><org.springframework.aop.support.NameMatchMethodPointcutAdvisor: org.springframework.aop.support.NameMatchMethodPointcut addMethodName(java.lang.String)>
<sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>-><sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: java.util.List getAllRoles(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.String: java.lang.String toLowerCase()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.Buffer: int remaining()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$IntArrayNode: java.util.Spliterator spliterator()>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><java.io.BufferedInputStream: void close()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: synthetic.method.datatable.EMPLOYEE getInstance()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.NegotiateAuthentication: byte[] nextToken(byte[])>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.Character: boolean isISOControl(char)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: org.javaboy.vhr.model.Politicsstatus getPoliticsstatus()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.javaboy.vhr.utils.HrUtils: org.javaboy.vhr.model.Hr getCurrentHr()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$ConcNode: java.util.Spliterator spliterator()>
<java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.net.httpserver.SSLStreams$OutputStream: void write(int)>
<org.springframework.web.util.pattern.PathPattern: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: char getSeparator()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.Streams$ConcatSpliterator: int characteristics()>
<java.util.stream.Nodes$AbstractConcNode: java.util.stream.Node getChild(int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.TreeMap$KeySpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.util.Collections$SetFromMap: boolean contains(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean containsKey(java.lang.Object)>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.io.PrintStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteJobLevelById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getMidsByRid(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getengageform()>
<java.net.SocksSocketImpl: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: java.lang.String getHostString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: java.util.Iterator keys()>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>-><java.util.SimpleTimeZone: int getRawOffset()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: void end()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Vector$VectorSpliterator: int characteristics()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.SubjectDomainCombiner$1: java.lang.Object run()>
<sun.net.www.ParseUtil: java.net.URI createURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.net.URI: void <init>(java.lang.String)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.io.DataOutputStream: void writeByte(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getnotworkdate()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)>-><org.springframework.context.support.AbstractResourceBasedMessageSource: java.util.Locale getDefaultLocale()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.Object next()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveStreamCleaner: boolean offer(sun.net.www.http.KeepAliveCleanerEntry)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: void forEach(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<java.io.BufferedInputStream: long skip(long)>-><sun.net.www.MeteredStream: long skip(long)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><java.lang.SecurityException: void <init>(java.lang.String)>
<javax.security.auth.Policy$2: java.lang.Object run()>-><javax.security.auth.Policy$2: javax.security.auth.Policy run()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><java.util.SimpleTimeZone: int hashCode()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateJobLevelById(org.javaboy.vhr.model.JobLevel,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setDepartment(org.javaboy.vhr.model.Department)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean isAuthorizationStale(java.lang.String)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object,java.lang.Throwable)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Vector$VectorSpliterator: int characteristics()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><synthetic.method.datatable.DEPARTMENT: synthetic.method.datatable.DEPARTMENT getInstance()>
<java.io.FilePermission: boolean impliesIgnoreMask(java.io.FilePermission)>-><java.lang.String: int lastIndexOf(int)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getQuery()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.util.Arrays: void fill(byte[],byte)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.net.httpserver.Request$WriteStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>
<java.util.stream.SliceOps: long calcSize(long,long,long)>-><java.lang.Math: long min(long,long)>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.String: int lastIndexOf(int)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>-><java.util.stream.Nodes$AbstractConcNode: java.util.stream.Node getChild(int)>
<java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.stream.ReferencePipeline$2$1: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.String: java.lang.String toLowerCase()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: java.lang.Integer getaccumulationfundbase()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.MBeanInfo: java.lang.String toString()>
<io.netty.util.internal.ThreadExecutorMap$1: void execute(java.lang.Runnable)>-><java.util.concurrent.Executors$DelegatedExecutorService: void execute(java.lang.Runnable)>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void setMedicalBase(java.lang.Integer)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$LongArrayNode: java.util.Spliterator spliterator()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$ArrayNode: long count()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.net.URL: java.lang.String getHost()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void afterPropertiesSet()>-><org.springframework.security.authentication.dao.DaoAuthenticationProvider: void doAfterPropertiesSet()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node getEmptyResult()>-><java.util.stream.Nodes: java.util.stream.Node emptyNode(java.util.stream.StreamShape)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$3: boolean hasMoreElements()>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><com.rabbitmq.client.impl.ChannelN: com.rabbitmq.client.AMQP$Tx$SelectOk txSelect()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.IdentityHashMap$ValueSpliterator: int characteristics()>
<synthetic.method.PositionMapperImpl: java.util.List getAllPositions()>-><synthetic.method.datatable.POSITION: synthetic.method.datatable.POSITION getInstance()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllJobLevels(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void <init>()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(org.springframework.security.core.GrantedAuthority,org.springframework.security.core.GrantedAuthority)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber: boolean isEmpty()>
<org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.Buffer: java.nio.Buffer flip()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Policy$2: javax.security.auth.Policy run()>-><java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator subTypeValidator(com.fasterxml.jackson.databind.cfg.MapperConfig)>
<java.io.PushbackInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteEmpByEid(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getPoliticId()>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createProxy(com.rabbitmq.client.Channel,boolean)>
<org.springframework.security.web.header.Header: int hashCode()>-><java.lang.String: int hashCode()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.DigestAuthentication$1: java.lang.Object run()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getAddress()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.http.HttpClient: java.lang.String getProxyHostUsed()>-><java.net.Proxy: java.net.SocketAddress address()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.Nodes$AbstractConcNode: int getChildCount()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.ibatis.mapping.ParameterMapping: java.lang.String toString()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$1: int size()>-><io.undertow.util.HeaderMap: int size()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: boolean tryAdvance(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.springframework.security.web.util.matcher.OrRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.io.DataOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveCache: java.lang.Thread access$002(sun.net.www.http.KeepAliveCache,java.lang.Thread)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updatePositions(org.javaboy.vhr.model.Position,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PositionController: org.javaboy.vhr.model.RespBean updatePositions(org.javaboy.vhr.model.Position)>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><java.io.InputStream: void close()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int lastIndexOf(int,int)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getemail()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthScheme getAuthScheme()>
<sun.net.www.MeteredStream: int available()>-><java.util.zip.ZipInputStream: int available()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Spliterators$IntArraySpliterator: long estimateSize()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><sun.security.util.HostnameChecker: boolean match(java.lang.String,java.security.Principal)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><sun.misc.SharedSecrets: sun.misc.JavaNetHttpCookieAccess getJavaNetHttpCookieAccess()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.AbstractList: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.MeteredStream: void close()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<java.io.PrintStream: void write(java.lang.String)>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.ibatis.type.TypeReference: java.lang.String toString()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>-><java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.lang.StringBuilder: void <init>()>
<sun.net.httpserver.Request$ReadStream: void mark(int)>-><java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setNation(org.javaboy.vhr.model.Nation)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>
<java.text.AttributeEntry: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: void <init>(java.util.Spliterator,long,long,long,long)>-><java.lang.AssertionError: void <init>()>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: java.util.List getAllHrs(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$5$1: void accept(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean available()>-><java.net.Socket: int getSoTimeout()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean maxWorkID(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController: org.javaboy.vhr.model.RespBean maxWorkID()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.amqp.utils.SerializationUtils: byte[] serialize(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><java.lang.Object: void notifyAll()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.net.www.http.HttpClient: void openServer()>-><sun.net.www.http.HttpClient: void privilegedOpenServer(java.net.InetSocketAddress)>
<java.io.FilterInputStream: void reset()>-><java.io.InputStream: void reset()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.Vector$ListItr: void add(java.lang.Object)>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.lang.String: void <init>(char[],int,int)>
<java.util.SimpleTimeZone: boolean equals(java.lang.Object)>-><java.util.TimeZone: java.lang.String getID()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: void reset()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespPageBean getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController: org.javaboy.vhr.model.RespPageBean getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: void <init>()>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteDepById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.io.PrintStream: void newLine()>-><java.io.PrintStream: void flush()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.CountryRecord: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setTiptopDegree(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<java.net.URLPermission: void init(java.lang.String)>-><java.net.URLPermission: void parseURI(java.lang.String)>
<java.util.Vector$Itr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><org.javaboy.vhr.model.Hr: void setEnabled(java.lang.Boolean)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteRoleById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.io.FilterInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<synthetic.method.MenuMapperImpl: java.util.List getMidsByRid(java.lang.Integer)>-><java.lang.Integer: void <init>(int)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.lang.String: java.lang.String copyValueOf(char[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.util.context.ContextN: java.lang.String toString()>
<java.net.Socket: void setSoTimeout(int)>-><java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean supportsPreemptiveAuthorization()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getAllRoles(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.MeteredStream: int available()>-><java.util.zip.ZipFile$ZipFileInflaterInputStream: int available()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.URL: int getPort()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.ProtectRecord: java.lang.String toString()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleArrayNode: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.net.SocketInputStream: int available()>
<org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: org.springframework.web.context.request.WebRequest getObject()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: java.util.List getAllHrs(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.HrController: java.util.List getAllHrs(java.lang.String)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.Buffer: java.nio.Buffer limit(int)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer findPropertyTypeSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: int characteristics()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.StdDateFormat: com.fasterxml.jackson.databind.util.StdDateFormat withTimeZone(java.util.TimeZone)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.io.FilterOutputStream: void close()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.eval.ErrorEval: java.lang.String toString()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.InputStream: int read(byte[])>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.StyleRecord: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getAlgorithm()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void setBasicSalary(java.lang.Integer)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><synthetic.method.datatable.HR: java.lang.String getremark()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.text.MessageFormat: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>-><org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)>
<org.apache.tomcat.util.buf.UEncoder: void urlEncode(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.ByteChunk: byte[] getBuffer()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.net.SocketInputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.javaboy.vhr.config.CustomFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.MeteredStream: void close()>
<sun.net.www.MeteredStream: void finalize()>-><sun.net.www.MeteredStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.ConnectableFluxOnAssembly: java.lang.String toString()>
<sun.net.www.MeteredStream: int read()>-><java.io.SequenceInputStream: int read()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URL: java.lang.String getHost()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$ConcatSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getTiptopDegree()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: void <init>()>-><org.javaboy.vhr.controller.system.basic.JobLevelController: void <init>()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveStream$1: void <init>()>
<synthetic.method.HrRoleMapperImpl: void deleteByHrid(java.lang.Integer)>-><synthetic.method.datatable.HRROLE: synthetic.method.datatable.HRROLE getInstance()>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.http.ChunkedInputStream: void processRaw()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setAddress(java.lang.String)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.sql.Timestamp: java.lang.String toString()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.io.FilterOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<java.net.Socket: void connect(java.net.SocketAddress,int)>-><java.net.AbstractPlainSocketImpl: void connect(java.net.SocketAddress,int)>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.stream.Node build()>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.PushbackInputStream: long skip(long)>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateEmployeeSalaryById(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.lettuce.core.RedisURI: java.lang.String toString()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$SpinedNodeBuilder: java.util.Spliterator spliterator()>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.BufferedOutputStream: void write(byte[],int,int)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void run()>-><sun.net.www.http.HttpClient: void closeServer()>
<java.util.JapaneseImperialCalendar: void computeTime()>-><java.util.SimpleTimeZone: int getOffsets(long,int[])>
<java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void <init>(java.io.OutputStream,sun.net.www.http.HttpCapture)>-><java.io.FilterOutputStream: void <init>(java.io.OutputStream)>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<synthetic.method.PositionMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Position)>-><synthetic.method.datatable.POSITION: void setenabled(java.lang.Boolean)>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.String getName()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: java.util.Spliterator spliterator()>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator$OfLong spliterator()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void setBonus(java.lang.Integer)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setNationId(java.lang.Integer)>
<java.io.PrintStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<java.io.FilterInputStream: int read()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$LongArraySpliterator: java.util.Spliterator trySplit()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void setPensionPer(java.lang.Float)>
<java.util.Calendar: java.lang.Object clone()>-><java.util.SimpleTimeZone: java.lang.Object clone()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Enum: java.lang.String toString()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void reset()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getSpecialty()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><sun.net.www.ParseUtil: void appendEscape(java.lang.StringBuffer,byte)>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: java.lang.Float getpensionper()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrPasswd(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void setId(java.lang.Integer)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><org.javaboy.vhr.model.Hr: void setPassword(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setbegincontract(java.util.Date)>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><synthetic.method.datatable.HR: void setremark(java.lang.String)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.SocksSocketImpl: void <init>(java.net.Proxy)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><java.io.FileInputStream: void close()>
<sun.net.www.ParseUtil: java.net.URI createURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: void setMessageSource(org.springframework.context.MessageSource)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean supportsPreemptiveAuthorization()>
<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<sun.net.www.MeteredStream: void close()>-><java.util.zip.ZipFile$ZipFileInputStream: void close()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setemail(java.lang.String)>
<synthetic.method.RoleMapperImpl: java.util.List getAllRoles()>-><org.javaboy.vhr.model.Role: void setName(java.lang.String)>
<java.net.HttpConnectSocketImpl: void doTunneling(java.net.HttpURLConnection)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setUseCaches(boolean)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long acquirePermits(long)>-><java.util.concurrent.atomic.AtomicLong: long get()>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.apache.poi.util.LittleEndianOutputStream: void writeInt(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.OffsetTime: java.lang.String toString()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.Hr getCurrentHr(org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.HrInfoController: org.javaboy.vhr.model.Hr getCurrentHr(org.springframework.security.core.Authentication)>
<sun.security.util.HostnameChecker: boolean isIpAddress(java.lang.String)>-><sun.net.util.IPAddressUtil: boolean isIPv4LiteralAddress(java.lang.String)>
<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespPageBean getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.http.HttpClient: boolean available()>-><sun.net.www.http.HttpClient: void logFinest(java.lang.String)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getnativeplace()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Policy$1: void <init>()>-><java.lang.Object: void <init>()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<io.netty.util.concurrent.SingleThreadEventExecutor: void reject(java.lang.Runnable)>-><io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setDepartmentId(java.lang.Integer)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.Spliterators$IntArraySpliterator: long estimateSize()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setcontractterm(java.lang.Double)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><java.lang.Enum: int ordinal()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setengageform(java.lang.String)>
<synthetic.method.MailSendLogMapperImpl: java.lang.Integer insert(org.javaboy.vhr.model.MailSendLog)>-><org.javaboy.vhr.model.MailSendLog: java.lang.String getExchange()>
<java.util.stream.Nodes$ConcNode$OfLong: void <init>(java.util.stream.Node$OfLong,java.util.stream.Node$OfLong)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive,java.util.stream.Node$OfPrimitive)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: java.util.Spliterator trySplit()>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.Double getContractTerm()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.IntPipeline: java.util.stream.Node$Builder makeNodeBuilder(long,java.util.function.IntFunction)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: void endAuthRequest(java.lang.String)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: boolean hasNext()>
<javax.security.auth.Policy$4: java.lang.Object run()>-><javax.security.auth.Policy$4: java.lang.String run()>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getendcontract()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getGender()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory: void destroy()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: java.util.Spliterator trySplit()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<synthetic.method.JobLevelMapperImpl: java.util.List getAllJobLevels()>-><synthetic.method.datatable.JOBLEVEL: java.util.Date getcreatedate()>
<sun.net.NetworkClient: void setReadTimeout(int)>-><java.net.Socket: void setSoTimeout(int)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>
<sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.IntPipeline$3$1: void accept(int)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.AbstractList: boolean add(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.httpserver.SSLStreams$InputStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void start()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void flush()>-><org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><java.io.BufferedInputStream: void close()>
<org.springframework.util.ReflectionUtils: void handleReflectionException(java.lang.Exception)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.net.URL getURL()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getGender()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$ConcatSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getId()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void ensureOpen()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.io.PrintStream: boolean checkError()>-><java.io.PrintStream: void flush()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.net.SocketInputStream: int read()>
<sun.net.www.http.HttpClient: void openServer()>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.io.FilterInputStream: void mark(int)>-><java.util.zip.InflaterInputStream: void mark(int)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Node$OfLong: void forEach(java.util.function.Consumer)>
<org.apache.catalina.connector.OutputBuffer: void close()>-><org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean maxWorkID(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>-><java.util.stream.Nodes$AbstractConcNode: int getChildCount()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.SubList$1: boolean hasNext()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><org.springframework.security.web.authentication.WebAuthenticationDetails: int hashCode()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getspecialty()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: boolean cancellationRequested()>-><java.util.stream.Sink$ChainedInt: boolean cancellationRequested()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.NetworkClient: void setReadTimeout(int)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><java.nio.Buffer: int capacity()>
<java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator spliterator()>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator$OfDouble spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.SortedOps$SizedRefSortingSink: void begin(long)>
<sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>-><java.net.Proxy: java.net.SocketAddress address()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.ResponseFacade: javax.servlet.ServletOutputStream getOutputStream()>-><org.apache.catalina.connector.Response: javax.servlet.ServletOutputStream getOutputStream()>
<org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: void clear()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap: java.util.Set keySet()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: int length()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getgender()>
<sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long)>-><sun.net.ProgressSource: void updateProgress(long,long)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void ensureOpen()>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.String getMessage()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrPasswd(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.HrInfoController: org.javaboy.vhr.model.RespBean updateHrPasswd(java.util.Map)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.concurrent.CountedCompleter: void tryComplete()>-><java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>-><sun.net.www.protocol.http.HttpURLConnection: boolean usingProxy()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: boolean isSuspended()>-><org.apache.catalina.connector.OutputBuffer: boolean isSuspended()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrPasswd(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.HeaderParser: int findInt(java.lang.String,int)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$EmptyNode$OfRef: java.util.Spliterator spliterator()>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<synthetic.method.JobLevelMapperImpl: java.util.List getAllJobLevels()>-><org.javaboy.vhr.model.JobLevel: void setCreateDate(java.util.Date)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setPosition(org.javaboy.vhr.model.Position)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthScheme getAuthScheme()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deletePositionsByIds(java.lang.Integer[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.PositionController: org.javaboy.vhr.model.RespBean deletePositionsByIds(java.lang.Integer[])>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.util.stream.Node$OfLong build()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Nodes$LongArrayNode: long count()>
<reactor.core.publisher.Operators: void onDiscardQueueWithClear(java.util.Queue,reactor.util.context.Context,java.util.function.Function)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><java.io.InputStream: int read(byte[],int,int)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getProtocol()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><org.javaboy.vhr.model.Department: void setChildren(java.util.List)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.util.Date getConversionTime()>
<javax.security.auth.SubjectDomainCombiner$5: java.lang.String run()>-><java.security.ProtectionDomain: java.lang.String toString()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: boolean isEmpty()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><org.javaboy.vhr.model.Department: void setParentId(java.lang.Integer)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap: java.util.Set entrySet()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy: void setMessageSource(org.springframework.context.MessageSource)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UEncoder: void urlEncode(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.AbstractChunk: int getEnd()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><sun.net.util.IPAddressUtil: byte[] textToNumericFormatV4(java.lang.String)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<synthetic.method.PositionMapperImpl: java.util.List getAllPositions()>-><org.javaboy.vhr.model.Position: void setCreateDate(java.util.Date)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.HttpURLConnection$TunnelState tunnelState()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.x509.AVA: java.lang.String toString()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.String: int length()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllDepartments(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController: java.util.List getAllDepartments()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: long estimateSize()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: java.lang.String getRequestMethod()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><org.javaboy.vhr.model.Hr: void setAddress(java.lang.String)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteSalaryById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.String: int indexOf(int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.ProgressMonitor: int getProgressUpdateThreshold()>-><sun.net.DefaultProgressMeteringPolicy: int getProgressUpdateThreshold()>
<sun.net.www.MeteredStream: long skip(long)>-><java.util.zip.ZipInputStream: long skip(long)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setSpecialty(java.lang.String)>
<sun.net.www.MeteredStream: int available()>-><java.io.FileInputStream: int available()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.UEncoder: void urlEncode(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: int indexOf(java.lang.String)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.net.URL getURL()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy: void setMessageSource(org.springframework.context.MessageSource)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$EmptyNode: long count()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: java.util.List getAllDepartments(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.String: boolean endsWith(java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getCnonce()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><org.javaboy.vhr.model.Hr: void setRemark(java.lang.String)>
<synthetic.method.PositionMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Position)>-><synthetic.method.datatable.POSITION: synthetic.method.datatable.POSITION getInstance()>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.security.AccessController: java.security.AccessControlContext createWrapper(java.security.DomainCombiner,java.lang.Class,java.security.AccessControlContext,java.security.AccessControlContext,java.security.Permission[])>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: int length()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxCallableOnAssembly: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getCachedHA1()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setSpecialty(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setBeginContract(java.util.Date)>
<org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>-><org.apache.catalina.connector.OutputBuffer: void clear(java.nio.Buffer)>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><org.javaboy.vhr.model.Hr: java.lang.String getPhone()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.NetworkClient: int getReadTimeout()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.NetProperties$1: java.lang.Void run()>-><sun.net.NetProperties: void access$000()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getAuthority()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><org.apache.catalina.connector.Response$PrivilegedDoIsEncodable: java.lang.Object run()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.net.SocketInputStream: void close()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: void forEachRemaining(java.util.function.Consumer)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.httpserver.Request$ReadStream: int read(byte[],int,int)>-><java.nio.HeapByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>
<org.apache.catalina.connector.OutputBuffer: void clear(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer limit(int)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.HttpURLConnection$7: java.lang.Object run()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>-><java.io.PrintStream: void <init>(java.io.OutputStream)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.Flux: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.web.context.request.ServletRequestAttributes: void registerSessionDestructionCallback(java.lang.String,java.lang.Runnable)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.TreeMap$TreeMapSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Spliterators$DoubleArraySpliterator: int characteristics()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>-><java.util.LinkedHashMap: void clear()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getWedlock()>
<sun.net.www.protocol.http.HttpURLConnection$2: java.net.CookieHandler run()>-><java.net.CookieHandler: java.net.CookieHandler getDefault()>
<sun.net.www.HeaderParser: sun.net.www.HeaderParser subsequence(int,int)>-><sun.net.www.HeaderParser: void <init>()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.io.FilterOutputStream: void close()>-><java.io.FilterOutputStream: void flush()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><java.lang.String: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.util.zip.InflaterInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.String: java.lang.String valueOf(int)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.ArrayList$SubList$1: void add(java.lang.Object)>-><java.util.ConcurrentModificationException: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.IdentityHashMap$ValueSpliterator: int characteristics()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.Object: java.lang.Class getClass()>
<java.net.URLPermission: void init(java.lang.String)>-><java.net.URLPermission: java.lang.String actions()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfInt: void accept(int)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.HttpURLConnection$1: java.lang.Object run()>
<ch.qos.logback.core.helpers.ThrowableToStringArray: java.lang.String formatFirstLine(java.lang.Throwable,java.lang.StackTraceElement[])>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getengageform()>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpServletRequest _getHttpServletRequest()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsWithOutChildren()>-><synthetic.method.datatable.DEPARTMENT: java.lang.Integer getparentid()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.util.Map$Entry)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><org.apache.catalina.connector.OutputBuffer$PrivilegedCreateConverter: java.lang.Object run()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Date: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<synthetic.method.JobLevelMapperImpl: java.lang.Integer deleteJobLevelsByIds(java.lang.Integer[])>-><synthetic.method.datatable.JOBLEVEL: java.lang.Integer[] getid()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setcreatedate(java.util.Date)>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.MessageHeader: void <init>()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getnotworkdate()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void setMessageSource(org.springframework.context.MessageSource)>-><org.springframework.context.support.MessageSourceAccessor: void <init>(org.springframework.context.MessageSource)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateJobLevelById(org.javaboy.vhr.model.JobLevel,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.JobLevelController: org.javaboy.vhr.model.RespBean updateJobLevelById(org.javaboy.vhr.model.JobLevel)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setEngageForm(java.lang.String)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node getEmptyResult()>-><java.util.stream.ReferencePipeline: java.util.stream.StreamShape getOutputShape()>
<java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: java.lang.String scheme()>-><sun.net.www.HeaderParser: java.lang.String findKey(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Throwable: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.MeteredStream: void close()>-><java.util.zip.ZipInputStream: void close()>
<synthetic.method.EmployeeMapperImpl: java.lang.Integer maxWorkID()>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getmax workid()>
<synthetic.method.JobLevelMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.JobLevel)>-><synthetic.method.datatable.JOBLEVEL: void setname(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<synthetic.method.MenuMapperImpl: java.util.List getAllMenus()>-><org.javaboy.vhr.model.Menu: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.web.servlet.HttpServletBean: void setEnvironment(org.springframework.core.env.Environment)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.access.expression.AbstractSecurityExpressionHandler: void setApplicationContext(org.springframework.context.ApplicationContext)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isPrimitive()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.net.NetPermission: void <init>(java.lang.String)>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.web.header.Header: int hashCode()>
<org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$IntArraySpliterator: boolean tryAdvance(java.util.function.IntConsumer)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.Integer: java.lang.String toHexString(int)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNonce(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.AbstractShortCircuitTask: void cancelLaterNodes()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setbonus(java.lang.Integer)>
<java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.HeaderRecord: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<javax.security.auth.Policy$2: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>-><java.io.FilterInputStream: int read(byte[],int,int)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$LongArrayNode: java.util.Spliterator spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: boolean writtenOK()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.HttpRetryException: void <init>(java.lang.String,int,java.lang.String)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.lang.Thread: void sleep(long)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.Character: int digit(char,int)>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateSalaryById(org.javaboy.vhr.model.Salary,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void forEach(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setDepartment(org.javaboy.vhr.model.Department)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.DistinctOps$1$2: void begin(long)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader mapToMessageHeader(java.util.Map)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.SubjectDomainCombiner$4: java.lang.Object run()>-><javax.security.auth.SubjectDomainCombiner$4: java.lang.String run()>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getAttribute(java.lang.String,int)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicy()>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator spliterator()>
<java.lang.Thread: void run()>-><sun.net.www.http.KeepAliveCache: void run()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.SSTRecord: java.lang.String toString()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$DoubleArraySpliterator: long estimateSize()>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: org.javaboy.vhr.model.RespBean login(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.LoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AllPermissionCollection$1: boolean hasMoreElements()>
<java.util.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>-><java.util.Base64$Encoder: byte[] encode(byte[])>
<org.apache.poi.util.LittleEndianOutputStream: void writeUInt(long)>-><java.io.PrintStream: void write(int)>
<java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addPosition(org.javaboy.vhr.model.Position,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: java.lang.Integer getpensionbase()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.util.Date getBeginDate()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.AbstractTask makeChild(java.util.Spliterator)>-><java.util.stream.SliceOps$SliceTask: java.util.stream.SliceOps$SliceTask makeChild(java.util.Spliterator)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setposid(java.lang.Integer)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.io.FileInputStream: int read()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: void <init>(java.util.Spliterator,long,long,long,long)>-><java.lang.Object: void <init>()>
<synthetic.method.JobLevelMapperImpl: java.util.List getAllJobLevels()>-><org.javaboy.vhr.model.JobLevel: void setTitleLevel(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.util.regex.Pattern: java.lang.String pattern()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<sun.net.www.http.HttpClient: void finished()>-><sun.net.www.protocol.https.HttpsClient: void putInKeepAliveCache()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.net.URL: java.lang.String getHost()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxDoFinally$DoFinallyFuseableSubscriber: boolean isEmpty()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.InetSocketAddress: int getPort()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.WeakHashMap$ValueSpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<java.io.FilterInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.net.InetSocketAddress: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getBonus()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addSalary(org.javaboy.vhr.model.Salary,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.HashMap$HashMapSpliterator: long estimateSize()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: int characteristics()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.PrintHeadersRecord: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: boolean isEmpty()>-><java.util.Collections$UnmodifiableMap: boolean isEmpty()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<sun.net.www.MeteredStream: int available()>-><java.io.BufferedInputStream: int available()>
<org.springframework.web.util.NestedServletException: void <init>(java.lang.String,java.lang.Throwable)>-><javax.servlet.ServletException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>
<sun.net.www.MeteredStream: long skip(long)>-><com.rabbitmq.client.impl.TruncatedInputStream: long skip(long)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getOpaque()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: java.lang.String getRequestMethod()>
<java.io.PushbackInputStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>
<org.apache.catalina.connector.OutputBuffer: void realWriteBytes(java.nio.ByteBuffer)>-><java.nio.Buffer: int remaining()>
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>-><java.net.InetSocketAddress: void <init>(int,java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication$1: java.lang.Object run()>-><sun.net.www.protocol.http.DigestAuthentication$1: java.lang.Boolean run()>
<org.javaboy.vhr.controller.config.SystemConfigController$$InterceptorProxy: java.util.List getMenusByHrId(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getname()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.net.Proxy: boolean equals(java.lang.Object)>-><java.net.Proxy: java.net.SocketAddress address()>
<org.springframework.security.web.FilterInvocation: java.lang.String getRequestUrl()>-><org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(javax.servlet.http.HttpServletRequest)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$AbstractConcNode: int getChildCount()>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.util.HashMap: void <init>()>
<synthetic.method.JobLevelMapperImpl: int insertSelective(org.javaboy.vhr.model.JobLevel)>-><synthetic.method.datatable.JOBLEVEL: void setname(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.net.URL: int getPort()>
<sun.net.www.URLConnection: void setProxiedHost(java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><java.io.BufferedInputStream: void close()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.HeaderParser headerParser()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: void <init>()>
<java.util.stream.Nodes$ConcNode: java.lang.String toString()>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateEmp(org.javaboy.vhr.model.Employee,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setname(java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: java.lang.String getKey(int)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.AbstractList$ListItr: void add(java.lang.Object)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>
<java.io.PrintStream: void write(byte[],int,int)>-><java.io.PrintStream: void write(byte[],int,int)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: java.net.Socket createSocket()>-><java.lang.Throwable: java.lang.Throwable getCause()>
<sun.net.www.MeteredStream: long skip(long)>-><java.util.zip.ZipFile$ZipFileInputStream: long skip(long)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: int indexOf(int)>
<sun.net.www.protocol.http.HttpURLConnection$8: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$8: java.io.OutputStream run()>
<sun.nio.cs.StreamDecoder: boolean inReady()>-><java.io.InputStream: int available()>
<org.springframework.util.ReflectionUtils: void handleReflectionException(java.lang.Exception)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createProxy(com.rabbitmq.client.Channel,boolean)>-><org.springframework.aop.framework.AdvisedSupport: void addAdvisor(org.springframework.aop.Advisor)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Integer: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setallsalary(java.lang.Integer)>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>
<org.javaboy.vhr.controller.salary.SobConfigController$$InterceptorProxy: org.javaboy.vhr.model.RespPageBean getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.http.HttpClient: boolean isCachedConnection()>
<sun.net.ProgressSource: void finishTracking()>-><sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>
<com.rabbitmq.client.impl.TruncatedInputStream: void mark(int)>-><java.io.FilterInputStream: void mark(int)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.Thread: void setDaemon(boolean)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.www.http.HttpClient: boolean available()>-><java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.misc.SharedSecrets: sun.misc.JavaNetHttpCookieAccess getJavaNetHttpCookieAccess()>-><sun.misc.Unsafe: void ensureClassInitialized(java.lang.Class)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxIterable$IterableSubscription: boolean isEmpty()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.DigestAuthentication: boolean supportsPreemptiveAuthorization()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.MeteredStream: int read()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList$COWIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.jar.Manifest$FastInputStream: void fill()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.io.BufferedInputStream: void fill()>-><java.io.InputStream: int read(byte[],int,int)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.springframework.web.bind.ServletRequestBindingException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.FilterInvocation: java.lang.String toString()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: void <init>()>
<java.util.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.awt.image.ColorModel: java.lang.String toString()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.io.DataInputStream: char readChar()>-><sun.net.www.http.ChunkedInputStream: int read()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.net.URL: java.lang.String getPath()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<org.springframework.web.context.request.ServletRequestAttributes: void registerDestructionCallback(java.lang.String,java.lang.Runnable,int)>-><org.springframework.web.context.request.ServletRequestAttributes: void registerSessionDestructionCallback(java.lang.String,java.lang.Runnable)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Nation getnation()>
<java.io.DataInputStream: int read(byte[])>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.Enum: int ordinal()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.util.Spliterators$LongArraySpliterator: void forEachRemaining(java.lang.Object)>-><java.util.Spliterators$LongArraySpliterator: void forEachRemaining(java.util.function.LongConsumer)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getEmail()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<sun.misc.URLClassPath: void check(java.net.URL)>-><java.net.SocketPermission: java.lang.String getActions()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setName(java.lang.String)>
<java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.lang.String)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setTiptopDegree(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Vector$VectorSpliterator: long estimateSize()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setSalary(org.javaboy.vhr.model.Salary)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<java.util.AbstractCollection: java.lang.Object[] toArray()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$1: java.util.Iterator iterator()>
<org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.util.Properties: void load(java.io.InputStream)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator spliterator()>
<sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String,long)>-><sun.net.ProgressMonitor: sun.net.ProgressMonitor getDefault()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>
<java.net.HttpURLConnection: int getResponseCode()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<sun.security.ssl.Krb5Helper$1: sun.security.ssl.Krb5Proxy run()>-><java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: java.util.List getAllHrs(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.net.URLPermission: void <init>(java.lang.String,java.lang.String)>-><java.net.URLPermission: void init(java.lang.String)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespBean importData(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setPhone(java.lang.String)>
<java.net.URI: int needsNormalization(java.lang.String)>-><java.lang.String: int length()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.nio.cs.StreamEncoder: void implFlush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.net.URI: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.net.ssl.SSLSocketFactory$1: java.lang.Object run()>
<java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>-><java.io.PrintStream: void write(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.AssertionError: void <init>()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getMedicalBase()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setMessageSource(org.springframework.context.MessageSource)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.Subject: java.util.Set getPrincipals()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRemoteUser()>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRemoteUser()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: java.util.Spliterator trySplit()>
<org.springframework.security.web.FilterInvocation: java.lang.String toString()>-><org.springframework.security.web.FilterInvocation: java.lang.String getRequestUrl()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.core.context.SecurityContextImpl: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getHost()>
<javax.security.auth.Policy: void setPolicy(javax.security.auth.Policy)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<sun.net.www.MeteredStream: int read()>-><java.io.ByteArrayInputStream: int read()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Calendar: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.lang.StringBuilder: void <init>()>
<java.util.JapaneseImperialCalendar: void computeTime()>-><java.util.SimpleTimeZone: int getRawOffset()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: void ensureOpen()>-><java.io.PrintStream: void setError()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: java.util.Spliterator makeSpliterator(java.util.Spliterator,long,long,long,long)>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><java.io.FileInputStream: void close()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$6: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<sun.net.NetProperties: void access$000()>-><sun.net.NetProperties: void loadDefaultProperties()>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><sun.net.www.MeteredStream: void close()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.aggregates.CFRecordsAggregate: java.lang.String toString()>
<java.net.URLConnection: void <init>(java.net.URL)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<java.net.HttpRetryException: void <init>(java.lang.String,int,java.lang.String)>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.JobLevel getjoblevel()>
<sun.security.x509.X500Name: void <init>(byte[])>-><sun.security.x509.X500Name: void parseDER(sun.security.util.DerInputStream)>
<sun.net.www.protocol.https.HttpsClient: void closeIdleConnection()>-><sun.net.www.http.HttpClient: void closeServer()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>
<org.javaboy.vhr.controller.LoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.aop.support.NameMatchMethodPointcut: boolean equals(java.lang.Object)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setnationid(java.lang.Integer)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: int size()>
<java.util.TreeMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxCreate$ErrorAsyncSink: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URLConnection: boolean getUseCaches()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>
<java.io.PushbackInputStream: void close()>-><sun.net.www.MeteredStream: void close()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.http.PosterOutputStream: void <init>()>-><java.io.ByteArrayOutputStream: void <init>(int)>
<org.springframework.security.web.header.Header: int hashCode()>-><java.util.AbstractList: int hashCode()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<java.util.AbstractList: int hashCode()>-><java.util.SimpleTimeZone: int hashCode()>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.catalina.connector.Response: org.apache.coyote.Response getCoyoteResponse()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$SpinedNodeBuilder: java.util.stream.Node build()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.DefaultRowHeightRecord: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.Vector: java.lang.Object elementAt(int)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: void remove(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteHrById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><org.javaboy.vhr.model.Hr: void setRoles(java.util.List)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getposid()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>
<org.springframework.web.context.request.ServletRequestAttributes: void registerSessionDestructionCallback(java.lang.String,java.lang.Runnable)>-><org.springframework.web.context.request.DestructionCallbackBindingListener: void <init>(java.lang.Runnable)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<java.util.stream.SliceOps$1$1: boolean cancellationRequested()>-><java.util.stream.SliceOps$1$1: boolean cancellationRequested()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.NetProperties$1: java.lang.Object run()>-><sun.net.NetProperties$1: java.lang.Void run()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.util.HashMap: void clear()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(org.springframework.security.core.GrantedAuthority,org.springframework.security.core.GrantedAuthority)>-><java.lang.String: int compareTo(java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: void privilegedOpenServer(java.net.InetSocketAddress)>-><sun.net.www.http.HttpClient$1: void <init>(sun.net.www.http.HttpClient,java.net.InetSocketAddress)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void incrementNC()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrPasswd(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.text.ParsePosition: java.lang.String toString()>
<sun.net.www.http.HttpClient$1: java.lang.Void run()>-><sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateSalaryById(org.javaboy.vhr.model.Salary,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.io.DataOutputStream: void writeLong(long)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: boolean isEmpty()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.Throwable getCause()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.zip.InflaterInputStream: void fill()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<sun.security.util.HostnameChecker: boolean matchAllWildcards(java.lang.String,java.lang.String)>-><java.util.StringTokenizer: int countTokens()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setNationId(java.lang.Integer)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<sun.security.ssl.Krb5Helper: void ensureAvailable()>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$LongArrayNode: long count()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection: int access$500()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain$2: boolean getStaticPermissionsField(java.security.ProtectionDomain)>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.util.LinkedHashMap: java.util.Collection values()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String value()>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getRef()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.protocol.http.AuthenticationHeader$SchemeMapValue: void <init>(sun.net.www.HeaderParser,java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void closeServer()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.net.URI: java.net.URI normalize(java.net.URI)>-><java.net.URI: void <init>()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>
<java.util.Hashtable: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.Vector: java.lang.Object elementAt(int)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<sun.net.www.MeteredStream: int available()>-><java.net.SocketInputStream: int available()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] optimize(java.security.ProtectionDomain[])>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: boolean isPresent()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$PermitStatus permitStatus()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.apache.tomcat.util.buf.ByteChunk: void allocate(int,int)>-><org.apache.tomcat.util.buf.AbstractChunk: void setLimit(int)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Salary getsalary()>
<sun.security.util.HostnameChecker: java.lang.String getServerName(java.security.Principal)>-><sun.security.ssl.Krb5Helper: java.lang.String getPrincipalHostName(java.security.Principal)>
<org.springframework.web.util.WebUtils: java.lang.Object getSessionMutex(javax.servlet.http.HttpSession)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getendcontract()>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>-><java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession obtainSession()>-><org.springframework.util.Assert: void state(boolean,java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><sun.net.www.ParseUtil: void appendEscape(java.lang.StringBuffer,byte)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: void setAttribute(java.lang.String,java.lang.Object,int)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner$1: java.lang.Object run()>-><javax.security.auth.SubjectDomainCombiner$1: java.lang.Void run()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.http.ResponseEntity exportData(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController: org.springframework.http.ResponseEntity exportData()>
<java.nio.InvalidMarkException: void <init>()>-><java.lang.IllegalStateException: void <init>()>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteSalaryById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.stream.SliceOps: long access$000(long,long)>-><java.util.stream.SliceOps: long calcSliceFence(long,long)>
<org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>-><org.apache.catalina.connector.OutputBuffer: void clear(java.nio.Buffer)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<ch.qos.logback.core.helpers.ThrowableToStringArray: java.lang.String formatFirstLine(java.lang.Throwable,java.lang.StackTraceElement[])>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><java.lang.Object: void wait(long)>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: void writeToCache(byte[],int,int)>-><org.springframework.web.util.ContentCachingRequestWrapper: java.lang.Integer access$000(org.springframework.web.util.ContentCachingRequestWrapper)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setAddress(java.lang.String)>
<sun.util.calendar.AbstractCalendar: long getTime(sun.util.calendar.CalendarDate)>-><java.util.SimpleTimeZone: int getOffset(long)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator spliterator()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: long estimateSize()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getAuth(java.lang.String,java.net.URL)>-><sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$ArrayNode: java.util.Spliterator spliterator()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.lang.Thread: void run()>-><sun.net.www.http.KeepAliveStreamCleaner: void run()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.security.action.GetIntegerAction: java.lang.Object run()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><org.javaboy.vhr.model.Hr: void setUsername(java.lang.String)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.URL: void <init>(java.net.URL,java.lang.String)>
<java.io.DataOutputStream: void write(byte[],int,int)>-><java.io.PrintStream: void write(byte[],int,int)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner$2: java.lang.Object run()>-><javax.security.auth.SubjectDomainCombiner$2: java.lang.Void run()>
<sun.net.www.protocol.http.EmptyInputStream: void <init>()>-><java.io.InputStream: void <init>()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String raw()>
<org.springframework.aop.framework.JdkDynamicAopProxy: java.lang.Object getProxy()>-><org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><sun.net.www.protocol.https.HttpsClient: java.security.Principal getPeerPrincipal()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.Permissions: boolean implies(java.security.Permission)>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber: boolean isEmpty()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.HashMap$Node: java.lang.String toString()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode: java.util.Spliterator spliterator()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator trySplit()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.HashMap$Node: java.lang.Object getKey()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$ArraySpliterator: java.util.Spliterator trySplit()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.core.type.ResolvedType: boolean isReferenceType()>
<java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateJobLevelById(org.javaboy.vhr.model.JobLevel,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updatePositions(org.javaboy.vhr.model.Position,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void checkPath(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.nio.charset.Charset: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.io.InputStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.NetworkClient: int getReadTimeout()>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: com.rabbitmq.client.Channel createChannel(boolean)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: com.rabbitmq.client.Channel createChannel(boolean)>
<org.javaboy.vhr.controller.config.SystemConfigController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)>-><java.util.Locale: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Spliterators$ArraySpliterator: int characteristics()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: int characteristics()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.FilePassRecord: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><javax.net.ssl.HttpsURLConnection$DefaultHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.lang.String printDomain(java.security.ProtectionDomain)>-><javax.security.auth.SubjectDomainCombiner$5: void <init>(java.security.ProtectionDomain)>
<sun.net.www.MeteredStream: int available()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>-><java.util.Stack: boolean empty()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: java.lang.String getHost()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getPoliticId()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsWithOutChildren()>-><org.javaboy.vhr.model.Department: void <init>()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: java.lang.String getRequestMethod()>-><sun.net.www.MessageHeader: java.lang.String getKey(int)>
<synthetic.method.JobLevelMapperImpl: int insertSelective(org.javaboy.vhr.model.JobLevel)>-><org.javaboy.vhr.model.JobLevel: java.lang.Boolean getEnabled()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AllPermissionCollection$1: java.lang.Object nextElement()>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object getValue(java.lang.Object)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.MeteredStream: void close()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String raw()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><org.javaboy.vhr.model.Hr: void setName(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.io.IOException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeDynamic(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<javax.xml.bind.DatatypeConverterImpl$CalendarFormatter: void formatTimeZone(java.util.Calendar,java.lang.StringBuilder)>-><java.util.SimpleTimeZone: int getOffset(long)>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: int indexOf(int,int)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$5$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.net.URLConnection: boolean getUseCaches()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>-><sun.net.www.MessageHeader: java.lang.String getKey(int)>
<sun.util.calendar.AbstractCalendar: long getTime(sun.util.calendar.CalendarDate)>-><java.util.SimpleTimeZone: int getRawOffset()>
<org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>-><org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean isConcrete()>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.SliceOps$SliceTask: boolean isLeftCompleted(long)>
<java.net.SocketOutputStream: void close()>-><java.net.AbstractPlainSocketImpl: void close()>
<sun.security.util.HostnameChecker: void match(java.lang.String,java.security.cert.X509Certificate)>-><sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><java.lang.System: long currentTimeMillis()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<synthetic.method.HrMapperImpl: java.util.List getAllHrsExceptCurrentHr(java.lang.Integer)>-><synthetic.method.datatable.HR: java.lang.Boolean getenabled()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Policy: void setPolicy(javax.security.auth.Policy)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteJobLevelById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.JobLevelController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<sun.net.www.http.HttpClient: void openServer()>-><sun.net.www.URLConnection: void setProxiedHost(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHr(org.javaboy.vhr.model.Hr,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.HrController: org.javaboy.vhr.model.RespBean updateHr(org.javaboy.vhr.model.Hr)>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.DimensionsRecord: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: void <init>(java.util.stream.Node)>-><java.lang.Object: void <init>()>
<java.io.FilterOutputStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.Provider: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.MeteredStream: void close()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive)>-><java.util.stream.Nodes$InternalNodeSpliterator: void <init>(java.util.stream.Node)>
<java.io.InputStream: long skip(long)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<sun.net.NetworkClient: java.net.Socket createSocket()>-><java.net.Socket: void <init>()>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.io.PrintStream: void print(java.lang.String)>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: java.util.List getAllPositions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.io.FilterInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.URLPermission: void <init>(java.lang.String,java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<synthetic.method.HrMapperImpl: java.util.List getAllHrs(java.lang.Integer,java.lang.String)>-><synthetic.method.datatable.HR: java.lang.Boolean getenabled()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.SliceOps$SliceTask: java.util.stream.AbstractTask makeChild(java.util.Spliterator)>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>
<org.apache.catalina.connector.ResponseFacade$FlushBufferPrivilegedAction: java.lang.Void run()>-><org.apache.catalina.connector.Response: void flushBuffer()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getendcontract()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setNativePlace(java.lang.String)>
<org.javaboy.vhr.controller.salary.SalaryController$$InterceptorProxy: org.javaboy.vhr.model.RespBean addSalary(org.javaboy.vhr.model.Salary,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.salary.SalaryController: org.javaboy.vhr.model.RespBean addSalary(org.javaboy.vhr.model.Salary)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsWithOutChildren()>-><synthetic.method.datatable.DEPARTMENT: java.lang.Boolean getisparent()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.util.Set entrySet()>-><org.springframework.http.HttpHeaders: java.util.Set entrySet()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.text.ChoiceFormat: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>
<sun.security.util.HostnameChecker: void match(java.lang.String,java.security.cert.X509Certificate)>-><sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getWedlock()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.SocketException: void <init>(java.lang.String)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.atomic.AtomicLong: long get()>
<synthetic.method.PositionMapperImpl: int insertSelective(org.javaboy.vhr.model.Position)>-><synthetic.method.datatable.POSITION: void setid(java.lang.Integer)>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveCache: int getMaxConnections()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Collections$2: int characteristics()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.net.HttpConnectSocketImpl$1: java.lang.Void run()>-><java.net.HttpConnectSocketImpl: java.lang.reflect.Field access$000()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$FixedNodeBuilder: java.util.stream.Node build()>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.ReduceOps$2ReducingSink: void begin(long)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.HttpURLConnection$TunnelState tunnelState()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.MemFuncPtg: java.lang.String toString()>
<java.util.Spliterator: boolean hasCharacteristics(int)>-><java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: long estimateSize()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>-><java.net.InetSocketAddress: int checkPort(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes: java.util.stream.Node emptyNode(java.util.stream.StreamShape)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<java.util.AbstractList: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.AttrPtg: java.lang.String toString()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.http.KeepAliveCleanerEntry: void <init>(sun.net.www.http.KeepAliveStream,sun.net.www.http.HttpClient)>
<org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.MessageHeader: void setIfNotSet(java.lang.String,java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void forEach(java.util.function.Consumer)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractCollection: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxOnAssembly: java.lang.String toString()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int indexOf(java.lang.String,int)>
<java.net.Proxy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setName(java.lang.String)>
<java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.security.web.header.Header: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.net.ProgressSource: void updateProgress(long,long)>-><sun.net.ProgressSource: boolean connected()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>-><sun.net.www.protocol.http.HttpURLConnection$6: java.lang.Object run()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deletePositionById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.csource.fastdfs.ProtoCommon: org.csource.fastdfs.ProtoCommon$RecvPackageInfo recvPackage(java.io.InputStream,byte,long)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: boolean access$300(sun.net.www.protocol.http.HttpURLConnection,java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long estimateSize()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.AbstractSpinedBuffer: long count()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.net.URL: int getDefaultPort()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.HttpConnectSocketImpl: java.net.InetAddress getInetAddress()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.NetworkClient$1: java.lang.Void run()>-><java.lang.Integer: int intValue()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getMidsByRid(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer mark()>
<java.util.stream.SliceOps: long calcSize(long,long,long)>-><java.lang.Math: long max(long,long)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: void setAttribute(java.lang.String,java.lang.Object,int)>-><javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Boolean: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.time.Duration: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Integer getLunchSalary()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setConversionTime(java.util.Date)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.net.Socket: java.io.InputStream getInputStream()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.lang.Integer getdepartmentid()>
<java.util.Calendar: java.util.TimeZone getTimeZone()>-><java.util.SimpleTimeZone: java.lang.Object clone()>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.net.SocketInputStream: int read(byte[],int,int)>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.util.stream.Nodes$LongArrayNode: void forEach(java.util.function.LongConsumer)>-><java.util.stream.ReduceOps$8ReducingSink: void accept(long)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.PermissionsEnumerator: java.lang.Object nextElement()>
<java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteRoleById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.UncalcedRecord: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getworkstate()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.String toString()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<io.netty.util.internal.DefaultPriorityQueue: void bubbleDown(int,io.netty.util.internal.PriorityQueueNode)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$ConcNode: java.util.Spliterator spliterator()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.javaboy.vhr.controller.system.basic.DepartmentController getDepartmentController()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.net.URI: java.lang.String getScheme()>
<java.util.stream.AbstractPipeline: void copyIntoWithCancel(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<java.io.InputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getAuth(java.lang.String,java.net.URL)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: void setTunnelState(sun.net.www.protocol.http.HttpURLConnection$TunnelState)>
<org.javaboy.vhr.controller.system.basic.DepartmentController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteDepById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.system.basic.DepartmentController: org.javaboy.vhr.model.RespBean deleteDepById(java.lang.Integer)>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.http.HttpClient: java.lang.String getProxyHostUsed()>-><java.net.InetSocketAddress: java.lang.String getHostString()>
<synthetic.method.PositionMapperImpl: java.util.List getAllPositions()>-><synthetic.method.datatable.POSITION: java.lang.Integer getid()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.HeaderParser headerParser()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Spliterators$LongArraySpliterator: int characteristics()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<synthetic.method.RoleMapperImpl: int deleteByPrimaryKey(java.lang.Integer)>-><synthetic.method.datatable.ROLE: synthetic.method.datatable.ROLE getInstance()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$AbstractConcNode: int getChildCount()>
<javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>-><javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Float: java.lang.String toString()>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Nodes$EmptyNode: long count()>
<sun.net.util.IPAddressUtil: boolean isIPv6LiteralAddress(java.lang.String)>-><sun.net.util.IPAddressUtil: byte[] textToNumericFormatV6(java.lang.String)>
<org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void removeVector(sun.net.www.http.KeepAliveKey)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.EnumMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.LinkedList$LLSpliterator: int characteristics()>
<org.apache.logging.log4j.message.ParameterFormatter: void appendMap(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: java.net.Socket privilegedDoTunnel(java.lang.String,int)>-><java.net.HttpConnectSocketImpl$2: void <init>(java.net.HttpConnectSocketImpl,java.lang.String,int)>
<org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: org.aopalliance.aop.Advice getAdvice()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.security.util.HostnameChecker: void match(java.lang.String,java.security.cert.X509Certificate)>-><sun.security.util.HostnameChecker: boolean isIpAddress(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.JavaType refineSerializationType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<synthetic.method.HrMapperImpl: java.lang.Integer updateUserface(java.lang.String,java.lang.Integer)>-><synthetic.method.datatable.HR: synthetic.method.datatable.HR getInstance()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<java.net.Socket: void setReuseAddress(boolean)>-><java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$SpinedNodeBuilder: java.util.Spliterator spliterator()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator spliterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void flush(boolean)>
<sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>-><sun.net.www.http.HttpClient: int getDefaultPort(java.lang.String)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.OrRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.tomcat.util.buf.CharChunk: void allocate(int,int)>-><org.apache.tomcat.util.buf.AbstractChunk: void setLimit(int)>
<javax.net.ssl.SSLSocketFactory$1: java.lang.String run()>-><java.lang.String: int length()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Thread: java.lang.Thread currentThread()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>-><java.util.SimpleTimeZone: int getOffset(long)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.AbstractConstant: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.Scannable$Attr$1: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String)>-><sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String,long)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain$2: boolean getStaticPermissionsField(java.security.ProtectionDomain)>
<com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator: java.lang.Object generateId(java.lang.Object)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<javax.security.auth.SubjectDomainCombiner$3: java.lang.Object run()>-><javax.security.auth.SubjectDomainCombiner$3: java.security.PermissionCollection run()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>-><java.lang.Throwable: java.lang.String toString()>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.net.URI: void removeDots(char[],int[])>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.lang.Throwable: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.scheduler.DelegateServiceScheduler: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: long estimateSize()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<synthetic.method.SalaryMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Salary)>-><synthetic.method.datatable.SALARY: void setname(java.lang.String)>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: int cpr(java.util.Comparator,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>-><sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>-><sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Object run()>
<sun.net.www.MessageHeader: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.FnGroupCountRecord: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getNativePlace()>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><java.io.PrintStream: void write(byte[],int,int)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getAllMenus(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: java.lang.String trim()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<synthetic.method.PositionMapperImpl: int insertSelective(org.javaboy.vhr.model.Position)>-><synthetic.method.datatable.POSITION: synthetic.method.datatable.POSITION getInstance()>
<org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>-><org.apache.catalina.connector.ClientAbortException: void <init>(java.lang.Throwable)>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Node$OfPrimitive: java.util.stream.Node getChild(int)>
<javax.net.ssl.SSLSocketFactory$1: java.lang.String run()>-><java.lang.String: java.lang.String trim()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setJobLevelId(java.lang.Integer)>
<synthetic.method.HrMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Hr)>-><synthetic.method.datatable.HR: void setusername(java.lang.String)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Nation: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void closeServer()>
<org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$LongArraySpliterator: java.util.Spliterator trySplit()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.nio.HeapByteBuffer: byte get()>
<org.javaboy.vhr.controller.system.HrController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteHrById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.HttpClient: void logFinest(java.lang.String)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.collections.ConcurrentCache: java.lang.Object get(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.Spliterators$IntArraySpliterator: boolean tryAdvance(java.lang.Object)>
<java.io.PrintStream: boolean checkError()>-><sun.net.www.http.ChunkedOutputStream: boolean checkError()>
<java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.String getSpecialty()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Spliterators$DoubleArraySpliterator: long estimateSize()>
<java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator spliterator()>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator$OfLong spliterator()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$AbstractStreamBuilderImpl: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: boolean isTrustedSite(java.net.URL)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.WindowProtectRecord: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setPhone(java.lang.String)>
<sun.net.NetworkClient: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setOpaque(java.lang.String)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$RangeIntSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader mapToMessageHeader(java.util.Map)>-><sun.net.www.MessageHeader: void prepend(java.lang.String,java.lang.String)>
<java.util.stream.Nodes$DoubleArrayNode: void forEach(java.util.function.DoubleConsumer)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: void accept(double)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: java.util.List getAllRoles(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><sun.net.www.protocol.http.HttpURLConnection$5: java.lang.Object run()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.security.MessageDigest: byte[] digest()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>-><java.lang.ref.Reference: java.lang.Object get()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHr(org.javaboy.vhr.model.Hr,org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setPoliticId(java.lang.Integer)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator spliterator()>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.FilterInputStream: long skip(long)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.InputStream: void reset()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.SliceOps$1: java.util.stream.Sink opWrapSink(int,java.util.stream.Sink)>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.javaboy.vhr.model.RespPageBean getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.javaboy.vhr.controller.emp.EmpBasicController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setRequestMethod(java.lang.String)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.Streams$RangeIntSpliterator: int characteristics()>
<java.io.DataInputStream: char readChar()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.net.HttpConnectSocketImpl$2: void <init>(java.net.HttpConnectSocketImpl,java.lang.String,int)>-><java.lang.Object: void <init>()>
<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain,java.security.DomainCombiner,java.security.AccessControlContext,java.security.AccessControlContext,java.security.Permission[])>-><javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.HttpConnectSocketImpl: int getPort()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>-><sun.net.www.http.HttpClient: void closeServer()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Socket: void connect(java.net.SocketAddress)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setPoliticId(java.lang.Integer)>
<java.io.DataInputStream: short readShort()>-><sun.net.www.MeteredStream: int read()>
<org.apache.catalina.connector.OutputBuffer: void write(java.lang.String)>-><org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updatePositions(org.javaboy.vhr.model.Position,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setPosId(java.lang.Integer)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$SpinedNodeBuilder: java.util.Spliterator spliterator()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>-><java.nio.HeapByteBuffer: java.nio.ByteBuffer slice()>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.MailSendLogMapperImpl: java.lang.Integer insert(org.javaboy.vhr.model.MailSendLog)>-><synthetic.method.datatable.MAILSENDLOG: void setroutekey(java.lang.String)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.ByteBuffer: byte[] array()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.http.HttpClient: void openServer()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.HttpClient: void finished()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.www.MessageHeader: void <init>()>-><sun.net.www.MessageHeader: void grow()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: java.util.Iterator multiValueIterator(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Node$OfPrimitive: java.util.stream.Node getChild(int)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<synthetic.method.SalaryMapperImpl: int insertSelective(org.javaboy.vhr.model.Salary)>-><org.javaboy.vhr.model.Salary: java.lang.Float getPensionPer()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.ibatis.parsing.XNode: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongFixedNodeBuilder: void end()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$EmptySpliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.MeteredStream: void close()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory: void destroy()>-><org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: void forceClose()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$IntArrayNode: long count()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.HeapCharBuffer: java.nio.CharBuffer put(char)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.Proxy$Type type()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object getValue(java.lang.Object)>
<java.util.Spliterator: boolean hasCharacteristics(int)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>
<sun.net.www.protocol.https.DelegateHttpsURLConnection: void dispose()>-><java.lang.Object: void finalize()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void remove(java.lang.String)>
<java.util.LinkedList$ListItr: void add(java.lang.Object)>-><java.util.LinkedList: void linkBefore(java.lang.Object,java.util.LinkedList$Node)>
<org.springframework.web.context.request.ServletWebRequest: java.lang.String getDescription(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><org.javaboy.vhr.model.Salary: void setAccumulationFundPer(java.lang.Float)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.io.FilterInputStream: long skip(long)>-><sun.net.www.MeteredStream: long skip(long)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$2: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.Operators$EmptySubscription: boolean isEmpty()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int indexOf(int)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getEngageForm()>
<sun.net.www.MeteredStream: int read()>-><java.io.PushbackInputStream: int read()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>-><sun.net.www.protocol.http.HttpURLConnection$9: java.lang.Object run()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.util.ArrayList: void <init>()>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.util.Objects: int hashCode(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: void flushBuffer()>-><org.apache.catalina.connector.OutputBuffer: void flush()>
<sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String,java.lang.String)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.DSFRecord: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.IndexRecord: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPageWithSalary(java.lang.Integer,java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getphone()>
<java.io.FilterInputStream: void reset()>-><java.io.ByteArrayInputStream: void reset()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Properties$LineReader: int readLine()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.MeteredStream: int available()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.javaboy.vhr.model.RespBean deleteRoleById(java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.String: boolean endsWith(java.lang.String)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<synthetic.method.NationMapperImpl: java.util.List getAllNations()>-><synthetic.method.datatable.NATION: java.lang.String getname()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: int characteristics()>
<java.io.FilterInputStream: int read(byte[])>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: void add(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><org.javaboy.vhr.model.Employee: void setDepartment(org.javaboy.vhr.model.Department)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: void <init>()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object getValue(java.lang.Object)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: org.javaboy.vhr.model.Nation getnation()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getCnonce()>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator spliterator()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Node: java.util.stream.Node getChild(int)>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.PlainSocketImpl: void <init>()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.Character: char toUpperCase(char)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<org.javaboy.vhr.controller.system.basic.PermissController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.javaboy.vhr.controller.system.basic.PositionController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updatePositions(org.javaboy.vhr.model.Position,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<java.util.Spliterators$EmptySpliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>-><java.util.Spliterators$EmptySpliterator: boolean tryAdvance(java.lang.Object)>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<synthetic.method.DepartmentMapperImpl: java.util.List getAllDepartmentsByParentId(java.lang.Integer)>-><synthetic.method.datatable.DEPARTMENT: java.util.List getchildren()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: void begin(long)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><sun.reflect.Reflection: java.lang.Class getCallerClass()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: java.lang.String getPath()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>-><java.net.SocketException: void <init>(java.lang.String)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.Math: int min(int,int)>
<org.springframework.aop.framework.ProxyFactory: void <init>(java.lang.Object)>-><org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfaces(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URI: java.lang.String getScheme()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: int updateByPrimaryKeySelective(org.javaboy.vhr.model.Employee)>-><synthetic.method.datatable.EMPLOYEE: void setemail(java.lang.String)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: void add(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.util.IPAddressUtil: boolean isIPv4LiteralAddress(java.lang.String)>-><sun.net.util.IPAddressUtil: byte[] textToNumericFormatV4(java.lang.String)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.javaboy.vhr.controller.HrInfoController$$InterceptorProxy: org.javaboy.vhr.model.RespBean updateHrUserface(org.springframework.web.multipart.MultipartFile,java.lang.Integer,org.springframework.security.core.Authentication,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.HttpClient: void setDoNotRetry(boolean)>
<sun.net.www.MeteredStream: void close()>-><java.io.BufferedInputStream: void close()>
<java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.MeteredStream: void close()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.jar.Manifest$FastInputStream: void fill()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><java.lang.String: int hashCode()>
<synthetic.method.EmployeeMapperImpl: org.javaboy.vhr.model.Employee getEmployeeById(java.lang.Integer)>-><synthetic.method.datatable.EMPLOYEE: java.lang.String getaddress()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Collections$SetFromMap: boolean isEmpty()>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean isEmpty()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.String getKey()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.util.zip.ZipFile$ZipFileInputStream: int read(byte[],int,int)>
<sun.net.www.HeaderParser: sun.net.www.HeaderParser subsequence(int,int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.LinkedHashMap$LinkedEntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<synthetic.method.SalaryMapperImpl: java.util.List getAllSalaries()>-><synthetic.method.datatable.SALARY: java.lang.Integer getbasicsalary()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.ParseUtil: void appendFragment(java.lang.StringBuffer,java.lang.String)>-><sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><java.net.NetPermission: void <init>(java.lang.String)>
<java.util.PropertyPermissionCollection: boolean implies(java.security.Permission)>-><java.security.Permission: java.lang.String getName()>
<org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>-><java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.AbstractPipeline: java.util.stream.Sink wrapAndCopyInto(java.util.stream.Sink,java.util.Spliterator)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><sun.net.www.http.HttpClient: boolean isCachedConnection()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: boolean isPresent()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfInt: void forEachRemaining(java.util.function.IntConsumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>
<sun.net.www.MeteredStream: void finalize()>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractMap: java.lang.String toString()>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><synthetic.method.datatable.EMPLOYEE: java.util.Date getbegincontract()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxCreate$BufferAsyncSink: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.web.filter.GenericFilterBean: void afterPropertiesSet()>
<com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>-><com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<synthetic.method.EmployeeMapperImpl: int insertSelective(org.javaboy.vhr.model.Employee)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getWorkAge()>
<java.util.Properties$LineReader: int readLine()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<synthetic.method.MenuRoleMapperImpl: java.lang.Integer insertRecord(java.lang.Integer,java.lang.Integer[])>-><synthetic.method.datatable.MENUROLE: void setmid(java.lang.Integer[])>
<java.util.LinkedList$ListItr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: int capacity()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes$ConcNode$OfInt: void <init>(java.util.stream.Node$OfInt,java.util.stream.Node$OfInt)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive,java.util.stream.Node$OfPrimitive)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.HideObjRecord: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$OfDouble: void forEach(java.util.function.Consumer)>
<synthetic.method.EmployeeMapperImpl: java.util.List getEmployeeByPage(java.lang.Integer,java.lang.Integer,org.javaboy.vhr.model.Employee,java.util.Date[])>-><org.javaboy.vhr.model.Employee: void setJobLevelId(java.lang.Integer)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
